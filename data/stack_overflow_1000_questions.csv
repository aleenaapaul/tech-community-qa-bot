title,link,score,tags,answer
What does the &quot;yield&quot; keyword do in Python?,https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python,13089,python;iterator;generator;yield,"<p>To understand what <a href=""https://docs.python.org/3/reference/simple_stmts.html#yield"" rel=""noreferrer""><code>yield</code></a> does, you must understand what <em><a href=""https://docs.python.org/3/glossary.html#term-generator"" rel=""noreferrer"">generators</a></em> are. And before you can understand generators, you must understand <em><a href=""https://docs.python.org/3/glossary.html#term-iterable"" rel=""noreferrer"">iterables</a></em>.</p>
<h2>Iterables</h2>
<p>When you create a list, you can read its items one by one. Reading its items one by one is called iteration:</p>
<pre><code>&gt;&gt;&gt; mylist = [1, 2, 3]
&gt;&gt;&gt; for i in mylist:
...    print(i)
1
2
3
</code></pre>
<p><code>mylist</code> is an <em>iterable</em>. When you use a list comprehension, you create a list, and so an iterable:</p>
<pre><code>&gt;&gt;&gt; mylist = [x*x for x in range(3)]
&gt;&gt;&gt; for i in mylist:
...    print(i)
0
1
4
</code></pre>
<p>Everything you can use &quot;<code>for... in...</code>&quot; on is an iterable; <code>lists</code>, <code>strings</code>, files...</p>
<p>These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values.</p>
<h2>Generators</h2>
<p>Generators are <em><a href=""https://docs.python.org/3/glossary.html#term-iterator"" rel=""noreferrer"">iterators</a></em>, a kind of iterable <strong>you can only iterate over once</strong>. Generators do not store all the values in memory, <strong>they generate the values on the fly</strong>:</p>
<pre><code>&gt;&gt;&gt; mygenerator = (x*x for x in range(3))
&gt;&gt;&gt; for i in mygenerator:
...    print(i)
0
1
4
</code></pre>
<p>It is just the same except you used <code>()</code> instead of <code>[]</code>. BUT, you <strong>cannot</strong> perform <code>for i in mygenerator</code> a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end after calculating 4, one by one.</p>
<h2>Yield</h2>
<p><code>yield</code> is a keyword that is used like <code>return</code>, except the function will return a generator.</p>
<pre><code>&gt;&gt;&gt; def create_generator():
...    mylist = range(3)
...    for i in mylist:
...        yield i*i
...
&gt;&gt;&gt; mygenerator = create_generator() # create a generator
&gt;&gt;&gt; print(mygenerator) # mygenerator is an object!
&lt;generator object create_generator at 0xb7555c34&gt;
&gt;&gt;&gt; for i in mygenerator:
...     print(i)
0
1
4
</code></pre>
<p>Here it's a useless example, but it's handy when you know your function will return a huge set of values that you will only need to read once.</p>
<p>To master <code>yield</code>, you must understand that <strong>when you call the function, the code you have written in the function body does not run.</strong> The function only returns the generator object, this is a bit tricky.</p>
<p>Then, your code will continue from where it left off each time <code>for</code> uses the generator.</p>
<p>Now the hard part:</p>
<p>The first time the <code>for</code> calls the generator object created from your function, it will run the code in your function from the beginning until it hits <code>yield</code>, then it'll return the first value of the loop. Then, each subsequent call will run another iteration of the loop you have written in the function and return the next value. This will continue until the generator is considered empty, which happens when the function runs without hitting <code>yield</code>. That can be because the loop has come to an end, or because you no longer satisfy an <code>&quot;if/else&quot;</code>.</p>
<hr />
<h2>Your code explained</h2>
<p><em>Generator:</em></p>
<pre><code># Here you create the method of the node object that will return the generator
def _get_child_candidates(self, distance, min_dist, max_dist):

    # Here is the code that will be called each time you use the generator object:

    # If there is still a child of the node object on its left
    # AND if the distance is ok, return the next child
    if self._leftchild and distance - max_dist &lt; self._median:
        yield self._leftchild

    # If there is still a child of the node object on its right
    # AND if the distance is ok, return the next child
    if self._rightchild and distance + max_dist &gt;= self._median:
        yield self._rightchild

    # If the function arrives here, the generator will be considered empty
    # There are no more than two values: the left and the right children
</code></pre>
<p><em>Caller:</em></p>
<pre><code># Create an empty list and a list with the current object reference
result, candidates = list(), [self]

# Loop on candidates (they contain only one element at the beginning)
while candidates:

    # Get the last candidate and remove it from the list
    node = candidates.pop()

    # Get the distance between obj and the candidate
    distance = node._get_dist(obj)

    # If the distance is ok, then you can fill in the result
    if distance &lt;= max_dist and distance &gt;= min_dist:
        result.extend(node._values)

    # Add the children of the candidate to the candidate's list
    # so the loop will keep running until it has looked
    # at all the children of the children of the children, etc. of the candidate
    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))

return result
</code></pre>
<p>This code contains several smart parts:</p>
<ul>
<li><p>The loop iterates on a list, but the list expands while the loop is being iterated. It's a concise way to go through all these nested data even if it's a bit dangerous since you can end up with an infinite loop. In this case, <code>candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</code> exhausts all the values of the generator, but <code>while</code> keeps creating new generator objects which will produce different values from the previous ones since it's not applied on the same node.</p>
</li>
<li><p>The <code>extend()</code> method is a list object method that expects an iterable and adds its values to the list.</p>
</li>
</ul>
<p>Usually, we pass a list to it:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2]
&gt;&gt;&gt; b = [3, 4]
&gt;&gt;&gt; a.extend(b)
&gt;&gt;&gt; print(a)
[1, 2, 3, 4]
</code></pre>
<p>But in your code, it gets a generator, which is good because:</p>
<ol>
<li>You don't need to read the values twice.</li>
<li>You may have a lot of children and you don't want them all stored in memory.</li>
</ol>
<p>And it works because Python does not care if the argument of a method is a list or not. Python expects iterables so it will work with strings, lists, tuples, and generators! This is called duck typing and is one of the reasons why Python is so cool. But this is another story, for another question...</p>
<p>You can stop here, or read a little bit to see an advanced use of a generator:</p>
<h2>Controlling a generator exhaustion</h2>
<pre><code>&gt;&gt;&gt; class Bank(): # Let's create a bank, building ATMs
...    crisis = False
...    def create_atm(self):
...        while not self.crisis:
...            yield &quot;$100&quot;
&gt;&gt;&gt; hsbc = Bank() # When everything's ok the ATM gives you as much as you want
&gt;&gt;&gt; corner_street_atm = hsbc.create_atm()
&gt;&gt;&gt; print(corner_street_atm.next())
$100
&gt;&gt;&gt; print(corner_street_atm.next())
$100
&gt;&gt;&gt; print([corner_street_atm.next() for cash in range(5)])
['$100', '$100', '$100', '$100', '$100']
&gt;&gt;&gt; hsbc.crisis = True # Crisis is coming, no more money!
&gt;&gt;&gt; print(corner_street_atm.next())
&lt;type 'exceptions.StopIteration'&gt;
&gt;&gt;&gt; wall_street_atm = hsbc.create_atm() # It's even true for new ATMs
&gt;&gt;&gt; print(wall_street_atm.next())
&lt;type 'exceptions.StopIteration'&gt;
&gt;&gt;&gt; hsbc.crisis = False # The trouble is, even post-crisis the ATM remains empty
&gt;&gt;&gt; print(corner_street_atm.next())
&lt;type 'exceptions.StopIteration'&gt;
&gt;&gt;&gt; brand_new_atm = hsbc.create_atm() # Build a new one to get back in business
&gt;&gt;&gt; for cash in brand_new_atm:
...    print cash
$100
$100
$100
$100
$100
$100
$100
$100
$100
...
</code></pre>
<p><strong>Note:</strong> For Python 3, use<code>print(corner_street_atm.__next__())</code> or <code>print(next(corner_street_atm))</code></p>
<p>It can be useful for various things like controlling access to a resource.</p>
<h2>Itertools, your best friend</h2>
<p>The <code>itertools</code> module contains special functions to manipulate iterables. Ever wish to duplicate a generator?
Chain two generators? Group values in a nested list with a one-liner? <code>Map / Zip</code> without creating another list?</p>
<p>Then just <code>import itertools</code>.</p>
<p>An example? Let's see the possible orders of arrival for a four-horse race:</p>
<pre><code>&gt;&gt;&gt; horses = [1, 2, 3, 4]
&gt;&gt;&gt; races = itertools.permutations(horses)
&gt;&gt;&gt; print(races)
&lt;itertools.permutations object at 0xb754f1dc&gt;
&gt;&gt;&gt; print(list(itertools.permutations(horses)))
[(1, 2, 3, 4),
 (1, 2, 4, 3),
 (1, 3, 2, 4),
 (1, 3, 4, 2),
 (1, 4, 2, 3),
 (1, 4, 3, 2),
 (2, 1, 3, 4),
 (2, 1, 4, 3),
 (2, 3, 1, 4),
 (2, 3, 4, 1),
 (2, 4, 1, 3),
 (2, 4, 3, 1),
 (3, 1, 2, 4),
 (3, 1, 4, 2),
 (3, 2, 1, 4),
 (3, 2, 4, 1),
 (3, 4, 1, 2),
 (3, 4, 2, 1),
 (4, 1, 2, 3),
 (4, 1, 3, 2),
 (4, 2, 1, 3),
 (4, 2, 3, 1),
 (4, 3, 1, 2),
 (4, 3, 2, 1)]
</code></pre>
<h2>Understanding the inner mechanisms of iteration</h2>
<p>Iteration is a process implying iterables (implementing the <code>__iter__()</code> method) and iterators (implementing the <code>__next__()</code> method).
Iterables are any objects you can get an iterator from. Iterators are objects that let you iterate on iterables.</p>
<p>There is more about it in this article about <a href=""https://web.archive.org/web/20201109034340/http://effbot.org/zone/python-for-statement.htm"" rel=""noreferrer"">how <code>for</code> loops work</a>.</p>
"
What does if __name__ == &quot;__main__&quot;: do?,https://stackoverflow.com/questions/419163/what-does-if-name-main-do,8394,python;namespaces;program-entry-point;python-module;idioms,"<h1>Short Answer</h1>
<p>It's boilerplate code that protects users from accidentally invoking the script when they didn't intend to. Here are some common problems when the guard is omitted from a script:</p>
<ul>
<li><p>If you import the guardless script in another script (e.g. <code>import my_script_without_a_name_eq_main_guard</code>), then the latter script will trigger the former to run <em>at import time</em> and <em>using the second script's command line arguments</em>. This is almost always a mistake.</p>
</li>
<li><p>If you have a custom class in the guardless script and save it to a pickle file, then unpickling it in another script will trigger an import of the guardless script, with the same problems outlined in the previous bullet.</p>
</li>
</ul>
<h1>Long Answer</h1>
<p>To better understand why and how this matters, we need to take a step back to understand how Python initializes scripts and how this interacts with its module import mechanism.</p>
<p>Whenever the Python interpreter reads a source file, it does two things:</p>
<ul>
<li><p>it sets a few special variables like <code>__name__</code>, and then</p>
</li>
<li><p>it executes all of the code found in the file.</p>
</li>
</ul>
<p>Let's see how this works and how it relates to your question about the <code>__name__</code> checks we always see in Python scripts.</p>
<h2>Code Sample</h2>
<p>Let's use a slightly different code sample to explore how imports and scripts work.  Suppose the following is in a file called <code>foo.py</code>.</p>
<pre><code># Suppose this is foo.py.

print(&quot;before import&quot;)
import math

print(&quot;before function_a&quot;)
def function_a():
    print(&quot;Function A&quot;)

print(&quot;before function_b&quot;)
def function_b():
    print(&quot;Function B {}&quot;.format(math.sqrt(100)))

print(&quot;before __name__ guard&quot;)
if __name__ == '__main__':
    function_a()
    function_b()
print(&quot;after __name__ guard&quot;)
</code></pre>
<h2>Special Variables</h2>
<p>When the Python interpreter reads a source file, it first defines a few special variables. In this case, we care about the <code>__name__</code> variable.</p>
<p><strong>When Your Module Is the Main Program</strong></p>
<p>If you are running your module (the source file) as the main program, e.g.</p>
<pre><code>python foo.py
</code></pre>
<p>the interpreter will assign the hard-coded string <code>&quot;__main__&quot;</code> to the <code>__name__</code> variable, i.e.</p>
<pre><code># It's as if the interpreter inserts this at the top
# of your module when run as the main program.
__name__ = &quot;__main__&quot; 
</code></pre>
<p><strong>When Your Module Is Imported By Another</strong></p>
<p>On the other hand, suppose some other module is the main program and it imports your module. This means there's a statement like this in the main program, or in some other module the main program imports:</p>
<pre><code># Suppose this is in some other main program.
import foo
</code></pre>
<p>The interpreter will search for your <code>foo.py</code> file (along with searching for a few other variants), and prior to executing that module, it will assign the name <code>&quot;foo&quot;</code> from the import statement to the <code>__name__</code> variable, i.e.</p>
<pre><code># It's as if the interpreter inserts this at the top
# of your module when it's imported from another module.
__name__ = &quot;foo&quot;
</code></pre>
<h2>Executing the Module's Code</h2>
<p>After the special variables are set up, the interpreter executes all the code in the module, one statement at a time. You may want to open another window on the side with the code sample so you can follow along with this explanation.</p>
<p><strong>Always</strong></p>
<ol>
<li><p>It prints the string <code>&quot;before import&quot;</code> (without quotes).</p>
</li>
<li><p>It loads the <code>math</code> module and assigns it to a variable called <code>math</code>. This is equivalent to replacing <code>import math</code> with the following (note that <code>__import__</code> is a low-level function in Python that takes a string and triggers the actual import):</p>
</li>
</ol>
<pre><code># Find and load a module given its string name, &quot;math&quot;,
# then assign it to a local variable called math.
math = __import__(&quot;math&quot;)
</code></pre>
<ol start=""3"">
<li><p>It prints the string <code>&quot;before function_a&quot;</code>.</p>
</li>
<li><p>It executes the <code>def</code> block, creating a function object, then assigning that function object to a variable called <code>function_a</code>.</p>
</li>
<li><p>It prints the string <code>&quot;before function_b&quot;</code>.</p>
</li>
<li><p>It executes the second <code>def</code> block, creating another function object, then assigning it to a variable called <code>function_b</code>.</p>
</li>
<li><p>It prints the string <code>&quot;before __name__ guard&quot;</code>.</p>
</li>
</ol>
<p><strong>Only When Your Module Is the Main Program</strong></p>
<ol start=""8"">
<li>If your module is the main program, then it will see that <code>__name__</code> was indeed set to <code>&quot;__main__&quot;</code> and it calls the two functions, printing the strings <code>&quot;Function A&quot;</code> and <code>&quot;Function B 10.0&quot;</code>.</li>
</ol>
<p><strong>Only When Your Module Is Imported by Another</strong></p>
<ol start=""8"">
<li>(<strong>instead</strong>) If your module is not the main program but was imported by another one, then <code>__name__</code> will be <code>&quot;foo&quot;</code>, not <code>&quot;__main__&quot;</code>, and it'll skip the body of the <code>if</code> statement.</li>
</ol>
<p><strong>Always</strong></p>
<ol start=""9"">
<li>It will print the string <code>&quot;after __name__ guard&quot;</code> in both situations.</li>
</ol>
<p><em><strong>Summary</strong></em></p>
<p>In summary, here's what'd be printed in the two cases:</p>
<pre class=""lang-none prettyprint-override""><code># What gets printed if foo is the main program
before import
before function_a
before function_b
before __name__ guard
Function A
Function B 10.0
after __name__ guard
</code></pre>
<pre class=""lang-none prettyprint-override""><code># What gets printed if foo is imported as a regular module
before import
before function_a
before function_b
before __name__ guard
after __name__ guard
</code></pre>
<h2>Why Does It Work This Way?</h2>
<p>You might naturally wonder why anybody would want this.  Well, sometimes you want to write a <code>.py</code> file that can be both used by other programs and/or modules as a module, and can also be run as the main program itself.  Examples:</p>
<ul>
<li><p>Your module is a library, but you want to have a script mode where it runs some unit tests or a demo.</p>
</li>
<li><p>Your module is only used as a main program, but it has some unit tests, and the testing framework works by importing <code>.py</code> files like your script and running special test functions. You don't want it to try running the script just because it's importing the module.</p>
</li>
<li><p>Your module is mostly used as a main program, but it also provides a programmer-friendly API for advanced users.</p>
</li>
</ul>
<p>Beyond those examples, it's elegant that running a script in Python is just setting up a few magic variables and importing the script. &quot;Running&quot; the script is a side effect of importing the script's module.</p>
<h2>Food for Thought</h2>
<ul>
<li><p>Question: Can I have multiple <code>__name__</code> checking blocks?  Answer: it's strange to do so, but the language won't stop you.</p>
</li>
<li><p>Suppose the following is in <code>foo2.py</code>.  What happens if you say <code>python foo2.py</code> on the command-line? Why?</p>
</li>
</ul>
<pre class=""lang-py prettyprint-override""><code># Suppose this is foo2.py.
import os, sys; sys.path.insert(0, os.path.dirname(__file__)) # needed for some interpreters

def function_a():
    print(&quot;a1&quot;)
    from foo2 import function_b
    print(&quot;a2&quot;)
    function_b()
    print(&quot;a3&quot;)

def function_b():
    print(&quot;b&quot;)

print(&quot;t1&quot;)
if __name__ == &quot;__main__&quot;:
    print(&quot;m1&quot;)
    function_a()
    print(&quot;m2&quot;)
print(&quot;t2&quot;)
      
</code></pre>
<ul>
<li>Now, figure out what will happen in <code>foo3.py</code> (having removed the <code>__name__</code> check):</li>
</ul>
<pre class=""lang-py prettyprint-override""><code># Suppose this is foo3.py.
import os, sys; sys.path.insert(0, os.path.dirname(__file__)) # needed for some interpreters

def function_a():
    print(&quot;a1&quot;)
    from foo3 import function_b
    print(&quot;a2&quot;)
    function_b()
    print(&quot;a3&quot;)

def function_b():
    print(&quot;b&quot;)

print(&quot;t1&quot;)
print(&quot;m1&quot;)
function_a()
print(&quot;m2&quot;)
print(&quot;t2&quot;)
</code></pre>
<ul>
<li>What will this do when used as a script?  When imported as a module?</li>
</ul>
<pre class=""lang-py prettyprint-override""><code># Suppose this is in foo4.py
__name__ = &quot;__main__&quot;

def bar():
    print(&quot;bar&quot;)
    
print(&quot;before __name__ guard&quot;)
if __name__ == &quot;__main__&quot;:
    bar()
print(&quot;after __name__ guard&quot;)
</code></pre>
"
Does Python have a ternary conditional operator?,https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator,8091,python;operators;conditional-operator,"<p>Yes, it was <a href=""https://mail.python.org/pipermail/python-dev/2005-September/056846.html"" rel=""noreferrer"" title=""[Python-Dev] Conditional Expression Resolution"">added</a> in version 2.5. The expression syntax is:</p>
<pre class=""lang-py prettyprint-override""><code>a if condition else b
</code></pre>
<p>First <code>condition</code> is evaluated, then exactly one of either <code>a</code> or <code>b</code> is evaluated and returned based on the <a href=""https://en.wikipedia.org/wiki/Boolean_data_type"" rel=""noreferrer"" title=""Boolean data type"">Boolean</a> value of <code>condition</code>. If <code>condition</code> evaluates to <code>True</code>, then <code>a</code> is evaluated and returned but <code>b</code> is ignored, or else when <code>b</code> is evaluated and returned but <code>a</code> is ignored.</p>
<p>This allows short-circuiting because when <code>condition</code> is true only <code>a</code> is evaluated and <code>b</code> is not evaluated at all, but when <code>condition</code> is false only <code>b</code> is evaluated and <code>a</code> is not evaluated at all.</p>
<p>For example:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; 'true' if True else 'false'
'true'
&gt;&gt;&gt; 'true' if False else 'false'
'false'
</code></pre>
<p>Note that conditionals are an <em>expression</em>, not a <em>statement</em>. This means you can't use <strong>statements</strong> such as <code>pass</code>, or assignments with <code>=</code> (or &quot;augmented&quot; assignments like <code>+=</code>), within a conditional <strong>expression</strong>:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; pass if False else pass
  File &quot;&lt;stdin&gt;&quot;, line 1
    pass if False else pass
         ^
SyntaxError: invalid syntax

&gt;&gt;&gt; # Python parses this as `x = (1 if False else y) = 2`
&gt;&gt;&gt; # The `(1 if False else x)` part is actually valid, but
&gt;&gt;&gt; # it can't be on the left-hand side of `=`.
&gt;&gt;&gt; x = 1 if False else y = 2
  File &quot;&lt;stdin&gt;&quot;, line 1
SyntaxError: cannot assign to conditional expression

&gt;&gt;&gt; # If we parenthesize it instead...
&gt;&gt;&gt; (x = 1) if False else (y = 2)
  File &quot;&lt;stdin&gt;&quot;, line 1
    (x = 1) if False else (y = 2)
       ^
SyntaxError: invalid syntax
</code></pre>
<p>(In 3.8 and above, the <code>:=</code> &quot;walrus&quot; operator allows simple assignment of values <em>as an expression</em>, which is then compatible with this syntax. But please don't write code like that; it will quickly become very difficult to understand.)</p>
<p>Similarly, because it is an expression, the <code>else</code> part is <em>mandatory</em>:</p>
<pre><code># Invalid syntax: we didn't specify what the value should be if the 
# condition isn't met. It doesn't matter if we can verify that
# ahead of time.
a if True
</code></pre>
<p>You can, however, use conditional expressions to assign a variable like so:</p>
<pre class=""lang-py prettyprint-override""><code>x = a if True else b
</code></pre>
<p>Or for example to return a value:</p>
<pre><code># Of course we should just use the standard library `max`;
# this is just for demonstration purposes.
def my_max(a, b):
    return a if a &gt; b else b
</code></pre>
<p>Think of the conditional expression as switching between two values. We can use it when we are in a 'one value or another' situation, where we will <em>do the same thing</em> with the result, regardless of whether the condition is met. We use the expression to compute the value, and then do something with it. If you need to <em>do something different</em> depending on the condition, then use a normal <code>if</code> <strong>statement</strong> instead.</p>
<hr />
<p>Keep in mind that it's frowned upon by some Pythonistas for several reasons:</p>
<ul>
<li>The order of the arguments is different from those of the classic <code>condition ? a : b</code> ternary operator from many other languages (such as <a href=""https://en.wikipedia.org/wiki/C_%28programming_language%29"" rel=""noreferrer"">C</a>, <a href=""https://en.wikipedia.org/wiki/C%2B%2B"" rel=""noreferrer"">C++</a>, <a href=""https://en.wikipedia.org/wiki/Go_%28programming_language%29"" rel=""noreferrer"">Go</a>, <a href=""https://en.wikipedia.org/wiki/Perl"" rel=""noreferrer"">Perl</a>, <a href=""https://en.wikipedia.org/wiki/Ruby_%28programming_language%29"" rel=""noreferrer"">Ruby</a>, <a href=""https://en.wikipedia.org/wiki/Java_%28programming_language%29"" rel=""noreferrer"">Java</a>, <a href=""https://en.wikipedia.org/wiki/JavaScript"" rel=""noreferrer"">JavaScript</a>, etc.), which may lead to bugs when people unfamiliar with Python's &quot;surprising&quot; behaviour use it (they may reverse the argument order).</li>
<li>Some find it &quot;unwieldy&quot;, since it goes contrary to the normal flow of thought (thinking of the condition first and then the effects).</li>
<li>Stylistic reasons. (Although the 'inline <code>if</code>' can be <em>really</em> useful, and make your script more concise, it really does complicate your code)</li>
</ul>
<p>If you're having trouble remembering the order, then remember that when read aloud, you (almost) say what you mean. For example, <code>x = 4 if b &gt; 8 else 9</code> is read aloud as <code>x will be 4 if b is greater than 8 otherwise 9</code>.</p>
<p>Official documentation:</p>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#conditional-expressions"" rel=""noreferrer"" title=""Conditional expressions"">Conditional expressions</a></li>
<li><a href=""https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator"" rel=""noreferrer"" title=""Is there an equivalent of C’s ”?:” ternary operator?"">Is there an equivalent of C’s ”?:” ternary operator?</a></li>
</ul>
"
What are metaclasses in Python?,https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python,7507,python;oop;metaclass;python-class;python-datamodel,"<p>A metaclass is the class of a class. A class defines how an instance of the class (i.e. an object) behaves while a metaclass defines how a class behaves. A class is an instance of a metaclass.</p>

<p>While in Python you can use arbitrary callables for metaclasses (like <a href=""https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/100037#100037"">Jerub</a> shows), the better approach is to make it an actual class itself. <code>type</code> is the usual metaclass in Python. <code>type</code> is itself a class, and it is its own type. You won't be able to recreate something like <code>type</code> purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass <code>type</code>.</p>

<p>A metaclass is most commonly used as a class-factory. When you create an object by calling the class, Python creates a new class (when it executes the 'class' statement) by calling the metaclass. Combined with the normal <code>__init__</code> and <code>__new__</code> methods, metaclasses therefore allow you to do 'extra things' when creating a class, like registering the new class with some registry or replace the class with something else entirely.</p>

<p>When the <code>class</code> statement is executed, Python first executes the body of the <code>class</code> statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the <code>__metaclass__</code> attribute of the class-to-be (if any) or the <code>__metaclass__</code> global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.</p>

<p>However, metaclasses actually define the <em>type</em> of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. <code>type.__subclasses__()</code> is an example of a method on the <code>type</code> metaclass. You can also define the normal 'magic' methods, like <code>__add__</code>, <code>__iter__</code> and <code>__getattr__</code>, to implement or change how the class behaves.</p>

<p>Here's an aggregated example of the bits and pieces:</p>

<pre><code>def make_hook(f):
    """"""Decorator to turn 'foo' method into '__foo__'""""""
    f.is_hook = 1
    return f

class MyType(type):
    def __new__(mcls, name, bases, attrs):

        if name.startswith('None'):
            return None

        # Go over attributes and see if they should be renamed.
        newattrs = {}
        for attrname, attrvalue in attrs.iteritems():
            if getattr(attrvalue, 'is_hook', 0):
                newattrs['__%s__' % attrname] = attrvalue
            else:
                newattrs[attrname] = attrvalue

        return super(MyType, mcls).__new__(mcls, name, bases, newattrs)

    def __init__(self, name, bases, attrs):
        super(MyType, self).__init__(name, bases, attrs)

        # classregistry.register(self, self.interfaces)
        print ""Would register class %s now."" % self

    def __add__(self, other):
        class AutoClass(self, other):
            pass
        return AutoClass
        # Alternatively, to autogenerate the classname as well as the class:
        # return type(self.__name__ + other.__name__, (self, other), {})

    def unregister(self):
        # classregistry.unregister(self)
        print ""Would unregister class %s now."" % self

class MyObject:
    __metaclass__ = MyType


class NoneSample(MyObject):
    pass

# Will print ""NoneType None""
print type(NoneSample), repr(NoneSample)

class Example(MyObject):
    def __init__(self, value):
        self.value = value
    @make_hook
    def add(self, other):
        return self.__class__(self.value + other.value)

# Will unregister the class
Example.unregister()

inst = Example(10)
# Will fail with an AttributeError
#inst.unregister()

print inst + inst
class Sibling(MyObject):
    pass

ExampleSibling = Example + Sibling
# ExampleSibling is now a subclass of both Example and Sibling (with no
# content of its own) although it will believe it's called 'AutoClass'
print ExampleSibling
print ExampleSibling.__mro__
</code></pre>
"
How do I merge two dictionaries in a single expression in Python?,https://stackoverflow.com/questions/38987/how-do-i-merge-two-dictionaries-in-a-single-expression-in-python,7100,python;dictionary;merge,"<p><strong>Python 3.9+ only</strong></p>

<p>Merge (|) and update (|=) operators have been added to the built-in <code>dict</code> class.</p>

<pre><code>&gt;&gt;&gt; d = {'spam': 1, 'eggs': 2, 'cheese': 3}
&gt;&gt;&gt; e = {'cheese': 'cheddar', 'aardvark': 'Ethel'}
&gt;&gt;&gt; d | e
{'spam': 1, 'eggs': 2, 'cheese': 'cheddar', 'aardvark': 'Ethel'}
</code></pre>

<p>The augmented assignment version operates in-place:</p>

<pre><code>&gt;&gt;&gt; d |= e
&gt;&gt;&gt; d
{'spam': 1, 'eggs': 2, 'cheese': 'cheddar', 'aardvark': 'Ethel'}
</code></pre>

<p>See <a href=""https://www.python.org/dev/peps/pep-0584/"" rel=""noreferrer"">PEP 584</a></p>
"
How do I execute a program or call a system command?,https://stackoverflow.com/questions/89228/how-do-i-execute-a-program-or-call-a-system-command,6264,python;shell;terminal;subprocess;command,"<p>Use <a href=""https://docs.python.org/library/subprocess.html#subprocess.run"" rel=""noreferrer""><code>subprocess.run</code></a>:</p>
<pre class=""lang-py prettyprint-override""><code>import subprocess

subprocess.run([&quot;ls&quot;, &quot;-l&quot;]) 
</code></pre>
<p>Another common way is <a href=""https://docs.python.org/library/os.html#os.system"" rel=""noreferrer""><code>os.system</code></a> but you shouldn't use it because it is unsafe if any parts of the command come from outside your program or can contain spaces or other special characters, also <code>subprocess.run</code> is generally more flexible (you can get the <a href=""https://docs.python.org/library/subprocess.html#subprocess.CompletedProcess.stdout"" rel=""noreferrer""><code>stdout</code></a>, <a href=""https://docs.python.org/library/subprocess.html#subprocess.CompletedProcess.stderr"" rel=""noreferrer""><code>stderr</code></a>, the <a href=""https://docs.python.org/library/subprocess.html#subprocess.CompletedProcess.returncode"" rel=""noreferrer"">&quot;real&quot; status code</a>, better <a href=""https://docs.python.org/library/subprocess.html#subprocess.CalledProcessError"" rel=""noreferrer"">error handling</a>, etc.). Even the <a href=""https://docs.python.org/library/os.html#os.system"" rel=""noreferrer"">documentation for <code>os.system</code></a> recommends using <code>subprocess</code> instead.</p>
<p>On Python 3.4 and earlier, use <code>subprocess.call</code> instead of <code>.run</code>:</p>
<pre class=""lang-py prettyprint-override""><code>subprocess.call([&quot;ls&quot;, &quot;-l&quot;])
</code></pre>
"
"How do I create a directory, and any missing parent directories?",https://stackoverflow.com/questions/273192/how-do-i-create-a-directory-and-any-missing-parent-directories,5798,python;exception;path;directory;operating-system,"<p>On Python ≥ 3.5, use <a href=""https://docs.python.org/library/pathlib.html#pathlib.Path.mkdir"" rel=""noreferrer""><code>pathlib.Path.mkdir</code></a>:</p>

<pre><code>from pathlib import Path
Path(""/my/directory"").mkdir(parents=True, exist_ok=True)
</code></pre>

<p>For older versions of Python, I see two answers with good qualities, each with a small flaw, so I will give my take on it:</p>

<p>Try <a href=""https://docs.python.org/library/os.path.html#os.path.exists"" rel=""noreferrer""><code>os.path.exists</code></a>, and consider <a href=""https://docs.python.org/library/os.html#os.makedirs"" rel=""noreferrer""><code>os.makedirs</code></a> for the creation.</p>

<pre><code>import os
if not os.path.exists(directory):
    os.makedirs(directory)
</code></pre>

<p>As noted in comments and elsewhere, there's a race condition &ndash; if the directory is created between the <code>os.path.exists</code> and the <code>os.makedirs</code> calls, the <code>os.makedirs</code> will fail with an <code>OSError</code>. Unfortunately, blanket-catching <code>OSError</code> and continuing is not foolproof, as it will ignore a failure to create the directory due to other factors, such as insufficient permissions, full disk, etc.</p>

<p>One option would be to trap the <code>OSError</code> and examine the embedded error code (see <a href=""https://stackoverflow.com/questions/273698/is-there-a-cross-platform-way-of-getting-information-from-pythons-oserror"">Is there a cross-platform way of getting information from Python’s OSError</a>):</p>

<pre><code>import os, errno

try:
    os.makedirs(directory)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise
</code></pre>

<p>Alternatively, there could be a second <code>os.path.exists</code>, but suppose another created the directory after the first check, then removed it before the second one &ndash; we could still be fooled. </p>

<p>Depending on the application, the danger of concurrent operations may be more or less than the danger posed by other factors such as file permissions. The developer would have to know more about the particular application being developed and its expected environment before choosing an implementation.</p>

<p>Modern versions of Python improve this code quite a bit, both by exposing <a href=""https://docs.python.org/3.3/library/exceptions.html?#FileExistsError"" rel=""noreferrer""><code>FileExistsError</code></a> (in 3.3+)...</p>

<pre><code>try:
    os.makedirs(""path/to/directory"")
except FileExistsError:
    # directory already exists
    pass
</code></pre>

<p>...and by allowing <a href=""https://docs.python.org/3.2/library/os.html#os.makedirs"" rel=""noreferrer"">a keyword argument to <code>os.makedirs</code> called <code>exist_ok</code></a> (in 3.2+).</p>

<pre><code>os.makedirs(""path/to/directory"", exist_ok=True)  # succeeds even if directory exists.
</code></pre>
"
How can I access the index value in a &#39;for&#39; loop?,https://stackoverflow.com/questions/522563/how-can-i-access-the-index-value-in-a-for-loop,5641,python;loops;list,"<p>Use the built-in function <a href=""https://docs.python.org/3/library/functions.html#enumerate"" rel=""noreferrer"" title=""enumerate""><code>enumerate()</code></a>:</p>
<pre><code>for idx, x in enumerate(xs):
    print(idx, x)
</code></pre>
<p>It is <em><a href=""https://stackoverflow.com/questions/25011078/what-does-pythonic-mean"">non-Pythonic</a></em> to manually index via <code>for i in range(len(xs)): x = xs[i]</code> or manually manage an additional state variable.</p>
<p>Check out <a href=""https://www.python.org/dev/peps/pep-0279/"" rel=""noreferrer"" title=""PEP 279"">PEP 279</a> for more.</p>
"
How do I make a flat list out of a list of lists?,https://stackoverflow.com/questions/952914/how-do-i-make-a-flat-list-out-of-a-list-of-lists,5476,python;list;multidimensional-array;flatten,"<p>A list of lists named <code>xss</code> can be flattened using a nested <a href=""https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"" rel=""noreferrer"">list comprehension</a>:</p>
<pre><code>flat_list = [
    x
    for xs in xss
    for x in xs
]
</code></pre>
<p>The above is equivalent to:</p>
<pre><code>flat_list = []

for xs in xss:
    for x in xs:
        flat_list.append(x)
</code></pre>
<p>Here is the corresponding function:</p>
<pre><code>def flatten(xss):
    return [x for xs in xss for x in xs]
</code></pre>
<p>This is the fastest method.
As evidence, using the <a href=""https://docs.python.org/3/library/timeit.html"" rel=""noreferrer""><code>timeit</code></a> module in the standard library, we see:</p>
<pre class=""lang-bash prettyprint-override""><code>$ python -mtimeit -s'xss=[[1,2,3],[4,5,6],[7],[8,9]]*99' '[x for xs in xss for x in xs]'
10000 loops, best of 3: 143 usec per loop

$ python -mtimeit -s'xss=[[1,2,3],[4,5,6],[7],[8,9]]*99' 'sum(xss, [])'
1000 loops, best of 3: 969 usec per loop

$ python -mtimeit -s'xss=[[1,2,3],[4,5,6],[7],[8,9]]*99' 'reduce(lambda xs, ys: xs + ys, xss)'
1000 loops, best of 3: 1.1 msec per loop
</code></pre>
<p>Explanation: the methods based on <code>+</code> (including the implied use in <code>sum</code>) are, of necessity, <code>O(L**2)</code> when there are L sublists -- as the intermediate result list keeps getting longer, at each step a new intermediate result list object gets allocated, and all the items in the previous intermediate result must be copied over (as well as a few new ones added at the end). So, for simplicity and without actual loss of generality, say you have L sublists of M items each: the first M items are copied back and forth <code>L-1</code> times, the second M items <code>L-2</code> times, and so on; total number of copies is M times the sum of x for x from 1 to L excluded, i.e., <code>M * (L**2)/2</code>.</p>
<p>The list comprehension just generates one list, once, and copies each item over (from its original place of residence to the result list) also exactly once.</p>
"
What is the difference between @staticmethod and @classmethod in Python?,https://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python,4765,python;oop;static-methods;python-decorators;class-method,"<p>Maybe a bit of example code will help: Notice the difference in the call signatures of <code>foo</code>, <code>class_foo</code> and <code>static_foo</code>:</p>
<pre><code>class A(object):
    def foo(self, x):
        print(f&quot;executing foo({self}, {x})&quot;)

    @classmethod
    def class_foo(cls, x):
        print(f&quot;executing class_foo({cls}, {x})&quot;)

    @staticmethod
    def static_foo(x):
        print(f&quot;executing static_foo({x})&quot;)

a = A()
</code></pre>
<p>Below is the usual way an object instance calls a method. The object instance, <code>a</code>, is implicitly passed as the first argument.</p>
<pre><code>a.foo(1)
# executing foo(&lt;__main__.A object at 0xb7dbef0c&gt;, 1)
</code></pre>
<hr />
<p><strong>With classmethods</strong>, the class of the object instance is implicitly passed as the first argument instead of <code>self</code>.</p>
<pre><code>a.class_foo(1)
# executing class_foo(&lt;class '__main__.A'&gt;, 1)
</code></pre>
<p>You can also call <code>class_foo</code> using the class. In fact, if you define something to be
a classmethod, it is probably because you intend to call it from the class rather than from a class instance. <code>A.foo(1)</code> would have raised a TypeError, but <code>A.class_foo(1)</code> works just fine:</p>
<pre><code>A.class_foo(1)
# executing class_foo(&lt;class '__main__.A'&gt;, 1)
</code></pre>
<p>One use people have found for class methods is to create <a href=""https://stackoverflow.com/a/1950927/190597"">inheritable alternative constructors</a>.</p>
<hr />
<p><strong>With staticmethods</strong>, neither <code>self</code> (the object instance) nor  <code>cls</code> (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class:</p>
<pre><code>a.static_foo(1)
# executing static_foo(1)

A.static_foo('hi')
# executing static_foo(hi)
</code></pre>
<p>Staticmethods are used to group functions which have some logical connection with a class to the class.</p>
<hr />
<p><code>foo</code> is just a function, but when you call <code>a.foo</code> you don't just get the function,
you get a &quot;partially applied&quot; version of the function with the object instance <code>a</code> bound as the first argument to the function. <code>foo</code> expects 2 arguments, while <code>a.foo</code> only expects 1 argument.</p>
<p><code>a</code> is bound to <code>foo</code>. That is what is meant by the term &quot;bound&quot; below:</p>
<pre><code>print(a.foo)
# &lt;bound method A.foo of &lt;__main__.A object at 0xb7d52f0c&gt;&gt;
</code></pre>
<p>With <code>a.class_foo</code>, <code>a</code> is not bound to <code>class_foo</code>, rather the class <code>A</code> is bound to <code>class_foo</code>.</p>
<pre><code>print(a.class_foo)
# &lt;bound method type.class_foo of &lt;class '__main__.A'&gt;&gt;
</code></pre>
<p>Here, with a staticmethod, even though it is a method, <code>a.static_foo</code> just returns
a good 'ole function with no arguments bound. <code>static_foo</code> expects 1 argument, and
<code>a.static_foo</code> expects 1 argument too.</p>
<pre><code>print(a.static_foo)
# &lt;function static_foo at 0xb7d479cc&gt;
</code></pre>
<p>And of course the same thing happens when you call <code>static_foo</code> with the class <code>A</code> instead.</p>
<pre><code>print(A.static_foo)
# &lt;function static_foo at 0xb7d479cc&gt;
</code></pre>
"
How slicing in Python works,https://stackoverflow.com/questions/509211/how-slicing-in-python-works,4682,python;slice;sequence,"<p>The syntax is:</p>
<pre><code>a[start:stop]  # items start through stop-1
a[start:]      # items start through the rest of the array
a[:stop]       # items from the beginning through stop-1
a[:]           # a copy of the whole array
</code></pre>
<p>There is also the <code>step</code> value, which can be used with any of the above:</p>
<pre><code>a[start:stop:step] # start through not past stop, by step
</code></pre>
<p>The key point to remember is that the <code>:stop</code> value represents the first value that is <em>not</em> in the selected slice. So, the difference between <code>stop</code> and <code>start</code> is the number of elements selected (if <code>step</code> is 1, the default).</p>
<p>The other feature is that <code>start</code> or <code>stop</code> may be a <em>negative</em> number, which means it counts from the end of the array instead of the beginning. So:</p>
<pre><code>a[-1]    # last item in the array
a[-2:]   # last two items in the array
a[:-2]   # everything except the last two items
</code></pre>
<p>Similarly, <code>step</code> may be a negative number:</p>
<pre><code>a[::-1]    # all items in the array, reversed
a[1::-1]   # the first two items, reversed
a[:-3:-1]  # the last two items, reversed
a[-3::-1]  # everything except the last two items, reversed
</code></pre>
<p>Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for <code>a[:-2]</code> and <code>a</code> only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.</p>
<h3>Relationship with the <code>slice</code> object</h3>
<p>A <a href=""https://docs.python.org/3/library/functions.html#slice"" rel=""noreferrer""><code>slice</code> object</a> can represent a slicing operation, i.e.:</p>
<pre><code>a[start:stop:step]
</code></pre>
<p>is equivalent to:</p>
<pre><code>a[slice(start, stop, step)]
</code></pre>
<p>Slice objects also behave slightly differently depending on the number of arguments, similar to <code>range()</code>, i.e. both <code>slice(stop)</code> and <code>slice(start, stop[, step])</code> are supported.
To skip specifying a given argument, one might use <code>None</code>, so that e.g. <code>a[start:]</code> is equivalent to <code>a[slice(start, None)]</code> or <code>a[::-1]</code> is equivalent to <code>a[slice(None, None, -1)]</code>.</p>
<p>While the <code>:</code>-based notation is very helpful for simple slicing, the explicit use of <code>slice()</code> objects simplifies the programmatic generation of slicing.</p>
"
How can I find the index for a given item in a list?,https://stackoverflow.com/questions/176918/how-can-i-find-the-index-for-a-given-item-in-a-list,4477,python;list;indexing,"<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;].index(&quot;bar&quot;)
1
</code></pre>
<p>See <a href=""https://docs.python.org/tutorial/datastructures.html#more-on-lists"" rel=""noreferrer"">the documentation</a> for the built-in <code>.index()</code> method of the list:</p>
<blockquote>
<pre><code>list.index(x[, start[, end]])
</code></pre>
<p>Return zero-based index in the list of the first item whose value is equal to <em>x</em>. Raises a <a href=""https://docs.python.org/library/exceptions.html#ValueError"" rel=""noreferrer""><code>ValueError</code></a> if there is no such item.</p>
<p>The optional arguments <em>start</em> and <em>end</em> are interpreted as in the <a href=""https://docs.python.org/tutorial/introduction.html#lists"" rel=""noreferrer"">slice notation</a> and are used to limit the search to a particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence rather than the start argument.</p>
</blockquote>
<h2>Caveats</h2>
<h3>Linear time-complexity in list length</h3>
<p>An <code>index</code> call checks every element of the list in order, until it finds a match. If the list is long, and if there is no guarantee that the value will be near the beginning, this can slow down the code.</p>
<p>This problem can only be completely avoided by using a different data structure. However, if the element is known to be within a certain part of the list, the <code>start</code> and <code>end</code> parameters can be used to narrow the search.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('l.index(999_999)', setup='l = list(range(0, 1_000_000))', number=1000)
9.356267921015387
&gt;&gt;&gt; timeit.timeit('l.index(999_999, 999_990, 1_000_000)', setup='l = list(range(0, 1_000_000))', number=1000)
0.0004404920036904514
</code></pre>
<p>The second call is orders of magnitude faster, because it only has to search through 10 elements, rather than all 1 million.</p>
<h3>Only the index of the <em>first match</em> is returned</h3>
<p>A call to <code>index</code> searches through the list in order until it finds a match, and <em>stops there.</em> If there could be more than one occurrence of the value, and all indices are needed, <code>index</code> cannot solve the problem:</p>
<pre><code>&gt;&gt;&gt; [1, 1].index(1) # the `1` index is not found.
0
</code></pre>
<p>Instead, use a <a href=""/questions/34835951/"">list comprehension or generator expression to do the search</a>, with <a href=""/questions/522563/""><code>enumerate</code> to get indices</a>:</p>
<pre><code>&gt;&gt;&gt; # A list comprehension gives a list of indices directly:
&gt;&gt;&gt; [i for i, e in enumerate([1, 2, 1]) if e == 1]
[0, 2]
&gt;&gt;&gt; # A generator comprehension gives us an iterable object...
&gt;&gt;&gt; g = (i for i, e in enumerate([1, 2, 1]) if e == 1)
&gt;&gt;&gt; # which can be used in a `for` loop, or manually iterated with `next`:
&gt;&gt;&gt; next(g)
0
&gt;&gt;&gt; next(g)
2
</code></pre>
<p>The list comprehension and generator expression techniques still work if there is only one match, and are more generalizable.</p>
<h3>Raises an exception if there is no match</h3>
<p>As noted in the documentation above, using <code>.index</code> will raise an exception if the searched-for value is not in the list:</p>
<pre><code>&gt;&gt;&gt; [1, 1].index(2)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
ValueError: 2 is not in list
</code></pre>
<p>If this is a concern, either <a href=""https://stackoverflow.com/questions/12934190"">explicitly check first</a> using <code>item in my_list</code>, or handle the exception with <code>try</code>/<code>except</code> as appropriate.</p>
<p>The explicit check is simple and readable, but it must iterate the list a second time. See <a href=""https://stackoverflow.com/questions/11360858"">What is the EAFP principle in Python?</a> for more guidance on this choice.</p>
"
Iterating over dictionaries using &#39;for&#39; loops,https://stackoverflow.com/questions/3294889/iterating-over-dictionaries-using-for-loops,4404,python;loops;dictionary;key,"<p><code>key</code> is just a variable name.  </p>

<pre><code>for key in d:
</code></pre>

<p>will simply loop over the keys in the dictionary, rather than the keys and values.  To loop over both key and value you can use the following:</p>

<p>For Python 3.x:</p>

<pre><code>for key, value in d.items():
</code></pre>

<p>For Python 2.x:</p>

<pre><code>for key, value in d.iteritems():
</code></pre>

<p>To test for yourself, change the word <code>key</code> to <code>poop</code>.</p>

<p>In Python 3.x, <code>iteritems()</code> was replaced with simply <code>items()</code>, which returns a set-like view backed by the dict, like <code>iteritems()</code> but even better. 
This is also available in 2.7 as <code>viewitems()</code>. </p>

<p>The operation <code>items()</code> will work for both 2 and 3, but in 2 it will return a list of the dictionary's <code>(key, value)</code> pairs, which will not reflect changes to the dict that happen after the <code>items()</code> call. If you want the 2.x behavior in 3.x, you can call <code>list(d.items())</code>.</p>
"
How can I iterate over rows in a Pandas DataFrame?,https://stackoverflow.com/questions/16476924/how-can-i-iterate-over-rows-in-a-pandas-dataframe,4230,python;pandas;dataframe;loops,"<p><a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iterrows.html#pandas-dataframe-iterrows"" rel=""noreferrer""><code>DataFrame.iterrows</code></a> is a generator which yields both the index and row (as a Series):</p>
<pre><code>import pandas as pd

df = pd.DataFrame({'c1': [10, 11, 12], 'c2': [100, 110, 120]})
df = df.reset_index()  # make sure indexes pair with number of rows

for index, row in df.iterrows():
    print(row['c1'], row['c2'])
</code></pre>

<pre><code>10 100
11 110
12 120
</code></pre>
<hr />
<p>Obligatory disclaimer from the <a href=""https://pandas.pydata.org/docs/user_guide/basics.html#iteration"" rel=""noreferrer"">documentation</a></p>
<blockquote>
<p>Iterating through pandas objects is generally <strong>slow</strong>. In many cases, iterating manually over the rows is not needed and can be avoided with one of the following approaches:</p>
<ul>
<li>Look for a <em>vectorized</em> solution: many operations can be performed using built-in methods or NumPy functions, (boolean) indexing, …</li>
<li>When you have a function that cannot work on the full DataFrame/Series at once, it is better to use <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply"" rel=""noreferrer"" title=""pandas.DataFrame.apply""><code>apply()</code></a> instead of iterating over the values. See the docs on <a href=""https://pandas.pydata.org/docs/user_guide/basics.html#basics-apply"" rel=""noreferrer"">function application</a>.</li>
<li>If you need to do iterative manipulations on the values but performance is important, consider writing the inner loop with cython or numba. See the <a href=""https://pandas.pydata.org/docs/user_guide/enhancingperf.html#enhancingperf"" rel=""noreferrer"">enhancing performance</a> section for some examples of this approach.</li>
</ul>
</blockquote>
<p>Other answers in this thread delve into greater depth on alternatives to iter* functions if you are interested to learn more.</p>
"
How can I use a global variable in a function?,https://stackoverflow.com/questions/423379/how-can-i-use-a-global-variable-in-a-function,4041,python;global-variables;scope,"<p>You can use a global variable within other functions by declaring it as <code>global</code> <strong>within each function that assigns a value to it</strong>:</p>
<pre><code>globvar = 0

def set_globvar_to_one():
    global globvar    # Needed to modify global copy of globvar
    globvar = 1

def print_globvar():
    print(globvar)     # No need for global declaration to read value of globvar

set_globvar_to_one()
print_globvar()       # Prints 1
</code></pre>
<p>Since it's unclear whether <code>globvar = 1</code> is creating a local variable or changing a global variable, Python defaults to creating a local variable, and makes you explicitly choose the other behavior with the <code>global</code> keyword.</p>
<p>See other answers if you want to share a global variable across modules.</p>
"
How do I get the current time in Python?,https://stackoverflow.com/questions/415511/how-do-i-get-the-current-time-in-python,3976,python;datetime;time,"<p>Use <a href=""https://docs.python.org/3/library/datetime.html"" rel=""noreferrer""><code>datetime</code></a>:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; now
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)
&gt;&gt;&gt; print(now)
2009-01-06 15:08:24.789150
</code></pre>
<p>For just the clock time without the date:</p>
<pre><code>&gt;&gt;&gt; now.time()
datetime.time(15, 8, 24, 78915)
&gt;&gt;&gt; print(now.time())
15:08:24.789150
</code></pre>
<hr />
<p>To save typing, you can import the <code>datetime</code> object from the <a href=""https://docs.python.org/3/library/datetime.html"" rel=""noreferrer""><code>datetime</code></a> module:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
</code></pre>
<p>Then remove the prefix <code>datetime.</code> from all of the above.</p>
"
How can I catch multiple exceptions in one line? (in the &quot;except&quot; block),https://stackoverflow.com/questions/6470428/how-can-i-catch-multiple-exceptions-in-one-line-in-the-except-block,3945,python;exception,"<p>From <a href=""https://docs.python.org/3/tutorial/errors.html#handling-exceptions"" rel=""noreferrer"">Python Documentation</a>:</p>

<blockquote>
  <p>An except clause may name multiple exceptions as a parenthesized tuple, for example</p>
</blockquote>

<pre><code>except (IDontLikeYouException, YouAreBeingMeanException) as e:
    pass
</code></pre>

<p>Or, for Python 2 only:</p>

<pre><code>except (IDontLikeYouException, YouAreBeingMeanException), e:
    pass
</code></pre>

<p>Separating the exception from the variable with a comma will still work in Python 2.6 and 2.7, but is now deprecated and does not work in Python 3; now you should be using <code>as</code>.</p>
"
How do I copy a file?,https://stackoverflow.com/questions/123198/how-do-i-copy-a-file,3930,python;file;copy;filesystems;file-copying,"<p><a href=""http://docs.python.org/3/library/shutil.html"" rel=""noreferrer""><code>shutil</code></a> has many methods you can use. One of which is:</p>
<pre><code>import shutil

shutil.copyfile(src, dst)

# 2nd option
shutil.copy(src, dst)  # dst can be a folder; use shutil.copy2() to preserve timestamp
</code></pre>
<ul>
<li>Copy the contents of the file named <code>src</code> to a file named <code>dst</code>. Both <code>src</code> and <code>dst</code> need to be the entire filename of the files, including path.</li>
<li>The destination location must be writable; otherwise, an <code>IOError</code> exception will be raised.</li>
<li>If <code>dst</code> already exists, it will be replaced.</li>
<li>Special files such as character or block devices and pipes cannot be copied with this function.</li>
<li>With <code>copy</code>, <code>src</code> and <code>dst</code> are path names given as <code>str</code>s.</li>
</ul>
<p>Another <code>shutil</code> method to look at is <a href=""https://docs.python.org/3/library/shutil.html#shutil.copy2"" rel=""noreferrer""><code>shutil.copy2()</code></a>. It's similar but preserves more metadata (e.g. time stamps).</p>
<p>If you use <code>os.path</code> operations, use <code>copy</code> rather than <code>copyfile</code>. <code>copyfile</code> will only accept strings.</p>
"
What is __init__.py for?,https://stackoverflow.com/questions/448271/what-is-init-py-for,3887,python;module;package;python-packaging,"<p>It used to be a required part of a package (<a href=""https://docs.python.org/3/reference/import.html#regular-packages"" rel=""noreferrer"">old, pre-3.3 ""regular package""</a>, not <a href=""https://docs.python.org/3/reference/import.html#namespace-packages"" rel=""noreferrer"">newer 3.3+ ""namespace package""</a>).</p>

<p><a href=""https://docs.python.org/3/reference/import.html#regular-packages"" rel=""noreferrer"">Here's the documentation.</a></p>

<blockquote>
  <p>Python defines two types of packages, regular packages and namespace packages. Regular packages are traditional packages as they existed in Python 3.2 and earlier. A regular package is typically implemented as a directory containing an <code>__init__.py</code> file. When a regular package is imported, this <code>__init__.py</code> file is implicitly executed, and the objects it defines are bound to names in the package’s namespace. The <code>__init__.py</code> file can contain the same Python code that any other module can contain, and Python will add some additional attributes to the module when it is imported.</p>
</blockquote>

<p>But just click the link, it contains an example, more information, and an explanation of namespace packages, the kind of packages without <code>__init__.py</code>.</p>
"
Convert bytes to a string in Python 3,https://stackoverflow.com/questions/606191/convert-bytes-to-a-string-in-python-3,3873,python;string;python-3.x,"<p><a href=""https://docs.python.org/3/library/stdtypes.html#bytes.decode"" rel=""noreferrer"">Decode the <code>bytes</code> object</a> to produce a string:</p>
<pre><code>&gt;&gt;&gt; b&quot;abcde&quot;.decode(&quot;utf-8&quot;)
'abcde'
</code></pre>
<p>The above example <em>assumes</em> that the <code>bytes</code> object is in UTF-8, because it is a common encoding. However, you should use the encoding your data is actually in!</p>
"
What is the difference between __str__ and __repr__?,https://stackoverflow.com/questions/1436703/what-is-the-difference-between-str-and-repr,3810,python;magic-methods;repr,"
<p><a href=""https://stackoverflow.com/a/1436756/3798217"">Alex Martelli summarized well</a> but, surprisingly, was too succinct.</p>
<p>First, let me reiterate the main points in <a href=""https://stackoverflow.com/users/95810/alex-martelli"">Alex</a>’s post:</p>
<ul>
<li>The default implementation is useless (it’s hard to think of one which wouldn’t be, but yeah)</li>
<li><code>__repr__</code> goal is to be unambiguous</li>
<li><code>__str__</code> goal is to be readable</li>
<li>Container’s <code>__str__</code> uses contained objects’ <code>__repr__</code></li>
</ul>
<p><strong>Default implementation is useless</strong></p>
<p>This is mostly a surprise because Python’s defaults tend to be fairly useful. However, in this case, having a default for <code>__repr__</code> which would act like:</p>
<pre class=""lang-none prettyprint-override""><code>return &quot;%s(%r)&quot; % (self.__class__, self.__dict__)
</code></pre>
<p>Or in new f-string formatting:</p>
<pre class=""lang-none prettyprint-override""><code>return f&quot;{self.__class__!s}({self.__dict__!r})&quot;
</code></pre>
<p>would have been too dangerous (for example, too easy to get into infinite recursion if objects reference each other). So Python cops out. Note that there is one default which is true: if <code>__repr__</code> is defined, and <code>__str__</code> is not, the object will behave as though <code>__str__=__repr__</code>.</p>
<p>This means, in simple terms: almost every object you implement should have a functional <code>__repr__</code> that’s usable for understanding the object. Implementing <code>__str__</code> is optional: do that if you need a “pretty print” functionality (for example, used by a report generator).</p>
<p><strong>The goal of <code>__repr__</code> is to be unambiguous</strong></p>
<p>Let me come right out and say it — I do not believe in debuggers. I don’t really know how to use any debugger, and have never used one seriously. Furthermore, I believe that the big fault in debuggers is their basic nature — most failures I debug happened a long long time ago, in a galaxy far far away. This means that I do believe, with religious fervor, in logging. Logging is the lifeblood of any decent fire-and-forget server system. Python makes it easy to log: with maybe some project specific wrappers, all you need is a</p>
<pre class=""lang-none prettyprint-override""><code>log(INFO, &quot;I am in the weird function and a is&quot;, a, &quot;and b is&quot;, b, &quot;but I got a null C — using default&quot;, default_c)
</code></pre>
<p>But you have to do the last step — make sure every object you implement has a useful repr, so code like that can just work. This is why the “eval” thing comes up: if you have enough information so <code>eval(repr(c))==c</code>, that means you know everything there is to know about <code>c</code>. If that’s easy enough, at least in a fuzzy way, do it. If not, make sure you have enough information about <code>c</code> anyway. I usually use an eval-like format: <code>&quot;MyClass(this=%r,that=%r)&quot; % (self.this,self.that)</code>. It does not mean that you can actually construct MyClass, or that those are the right constructor arguments — but it is a useful form to express “this is everything you need to know about this instance”.</p>
<p>Note: I used <code>%r</code> above, not <code>%s</code>. You always want to use <code>repr()</code> [or <code>%r</code> formatting character, equivalently] inside <code>__repr__</code> implementation, or you’re defeating the goal of repr. You want to be able to differentiate <code>MyClass(3)</code> and <code>MyClass(&quot;3&quot;)</code>.</p>
<p><strong>The goal of <code>__str__</code> is to be readable</strong></p>
<p>Specifically, it is not intended to be unambiguous — notice that <code>str(3)==str(&quot;3&quot;)</code>. Likewise, if you implement an IP abstraction, having the str of it look like 192.168.1.1 is just fine. When implementing a date/time abstraction, the str can be &quot;2010/4/12 15:35:22&quot;, etc. The goal is to represent it in a way that a user, not a programmer, would want to read it. Chop off useless digits, pretend to be some other class — as long is it supports readability, it is an improvement.</p>
<p><strong>Container’s <code>__str__</code> uses contained objects’ <code>__repr__</code></strong></p>
<p>This seems surprising, doesn’t it? It is a little, but how readable would it be if it used their <code>__str__</code>?</p>
<pre class=""lang-none prettyprint-override""><code>[moshe is, 3, hello
world, this is a list, oh I don't know, containing just 4 elements]
</code></pre>
<p>Not very. Specifically, the strings in a container would find it way too easy to disturb its string representation. In the face of ambiguity, remember, Python resists the temptation to guess. If you want the above behavior when you’re printing a list, just</p>
<pre class=""lang-none prettyprint-override""><code>print(&quot;[&quot; + &quot;, &quot;.join(lst) + &quot;]&quot;)
</code></pre>
<p>(you can probably also figure out what to do about dictionaries).</p>
<p><strong>Summary</strong></p>
<p>Implement <code>__repr__</code> for any class you implement. This should be second nature. Implement <code>__str__</code> if you think it would be useful to have a string version which errs on the side of readability.</p>
"
How do I select rows from a DataFrame based on column values?,https://stackoverflow.com/questions/17071871/how-do-i-select-rows-from-a-dataframe-based-on-column-values,3615,python;pandas;dataframe;indexing;filter,"<p>To select rows whose column value equals a scalar, <code>some_value</code>, use <code>==</code>:</p>
<pre><code>df.loc[df['column_name'] == some_value]
</code></pre>
<p>To select rows whose column value is in an iterable, <code>some_values</code>, use <code>isin</code>:</p>
<pre><code>df.loc[df['column_name'].isin(some_values)]
</code></pre>
<p>Combine multiple conditions with <code>&amp;</code>:</p>
<pre><code>df.loc[(df['column_name'] &gt;= A) &amp; (df['column_name'] &lt;= B)]
</code></pre>
<p>Note the parentheses. Due to Python's <a href=""https://docs.python.org/3/reference/expressions.html#operator-precedence"" rel=""noreferrer"">operator precedence rules</a>, <code>&amp;</code> binds more tightly than <code>&lt;=</code> and <code>&gt;=</code>. Thus, the parentheses in the last example are necessary. Without the parentheses</p>
<pre><code>df['column_name'] &gt;= A &amp; df['column_name'] &lt;= B
</code></pre>
<p>is parsed as</p>
<pre><code>df['column_name'] &gt;= (A &amp; df['column_name']) &lt;= B
</code></pre>
<p>which results in a <a href=""https://stackoverflow.com/questions/36921951/truth-value-of-a-series-is-ambiguous-use-a-empty-a-bool-a-item-a-any-o"">Truth value of a Series is ambiguous error</a>.</p>
<hr />
<p>To select rows whose column value <em>does not equal</em> <code>some_value</code>, use <code>!=</code>:</p>
<pre><code>df.loc[df['column_name'] != some_value]
</code></pre>
<p>The <code>isin</code> returns a boolean Series, so to select rows whose value is <em>not</em> in <code>some_values</code>, negate the boolean Series using <code>~</code>:</p>
<pre><code>df = df.loc[~df['column_name'].isin(some_values)] # .loc is not in-place replacement
</code></pre>
<hr />
<p>For example,</p>
<pre><code>import pandas as pd
import numpy as np
df = pd.DataFrame({'A': 'foo bar foo bar foo bar foo foo'.split(),
                   'B': 'one one two three two two one three'.split(),
                   'C': np.arange(8), 'D': np.arange(8) * 2})
print(df)
#      A      B  C   D
# 0  foo    one  0   0
# 1  bar    one  1   2
# 2  foo    two  2   4
# 3  bar  three  3   6
# 4  foo    two  4   8
# 5  bar    two  5  10
# 6  foo    one  6  12
# 7  foo  three  7  14

print(df.loc[df['A'] == 'foo'])
</code></pre>
<p>yields</p>
<pre><code>     A      B  C   D
0  foo    one  0   0
2  foo    two  2   4
4  foo    two  4   8
6  foo    one  6  12
7  foo  three  7  14
</code></pre>
<hr />
<p>If you have multiple values you want to include, put them in a
list (or more generally, any iterable) and use <code>isin</code>:</p>
<pre><code>print(df.loc[df['B'].isin(['one','three'])])
</code></pre>
<p>yields</p>
<pre><code>     A      B  C   D
0  foo    one  0   0
1  bar    one  1   2
3  bar  three  3   6
6  foo    one  6  12
7  foo  three  7  14
</code></pre>
<hr />
<p>Note, however, that if you wish to do this many times, it is more efficient to
make an index first, and then use <code>df.loc</code>:</p>
<pre><code>df = df.set_index(['B'])
print(df.loc['one'])
</code></pre>
<p>yields</p>
<pre><code>       A  C   D
B              
one  foo  0   0
one  bar  1   2
one  foo  6  12
</code></pre>
<p>or, to include multiple values from the index use <code>df.index.isin</code>:</p>
<pre><code>df.loc[df.index.isin(['one','two'])]
</code></pre>
<p>yields</p>
<pre><code>       A  C   D
B              
one  foo  0   0
one  bar  1   2
two  foo  2   4
two  foo  4   8
two  bar  5  10
one  foo  6  12
</code></pre>
"
How can I add new keys to a dictionary?,https://stackoverflow.com/questions/1024847/how-can-i-add-new-keys-to-a-dictionary,3591,python;dictionary;key;lookup,"<p>You create a new key/value pair on a dictionary by assigning a value to that key</p>
<pre><code>d = {'key': 'value'}
print(d)  # {'key': 'value'}

d['mynewkey'] = 'mynewvalue'

print(d)  # {'key': 'value', 'mynewkey': 'mynewvalue'}
</code></pre>
<p>If the key doesn't exist, it's added and points to that value. If it exists, the current value it points to is overwritten.</p>
"
Does Python have a string &#39;contains&#39; substring method?,https://stackoverflow.com/questions/3437059/does-python-have-a-string-contains-substring-method,3586,python;string;substring;contains,"<p>Use the <a href=""https://docs.python.org/reference/expressions.html#membership-test-details"" rel=""noreferrer""><code>in</code> operator</a>:</p>
<pre><code>if &quot;blah&quot; not in somestring: 
    continue
</code></pre>
<p>Note: This is case-sensitive.</p>
"
How can I delete a file or folder in Python?,https://stackoverflow.com/questions/6996603/how-can-i-delete-a-file-or-folder-in-python,3521,python;file-io;directory;delete-file,"<p>Use one of these methods:</p>
<ul>
<li><p><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink"" rel=""noreferrer""><code>pathlib.Path.unlink()</code></a> removes a file or symbolic link.</p>
</li>
<li><p><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.rmdir"" rel=""noreferrer""><code>pathlib.Path.rmdir()</code></a> removes an empty directory.</p>
</li>
<li><p><a href=""http://docs.python.org/library/shutil.html#shutil.rmtree"" rel=""noreferrer""><code>shutil.rmtree()</code></a> deletes a directory and all its contents.</p>
</li>
</ul>
<hr />
<p>On Python 3.3 and below, you can use these methods instead of the <a href=""https://docs.python.org/3/library/pathlib.html"" rel=""noreferrer""><code>pathlib</code></a> ones:</p>
<ul>
<li><p><a href=""http://docs.python.org/library/os.html#os.remove"" rel=""noreferrer""><code>os.remove()</code></a> removes a file.</p>
</li>
<li><p><a href=""https://docs.python.org/3/library/os.html#os.unlink"" rel=""noreferrer""><code>os.unlink()</code></a> removes a symbolic link.</p>
</li>
<li><p><a href=""http://docs.python.org/library/os.html#os.rmdir"" rel=""noreferrer""><code>os.rmdir()</code></a> removes an empty directory.</p>
</li>
</ul>
"
&quot;Least Astonishment&quot; and the Mutable Default Argument,https://stackoverflow.com/questions/1132941/least-astonishment-and-the-mutable-default-argument,3498,python;language-design;default-parameters;least-astonishment,"<p>Actually, this is not a design flaw, and it is not because of internals or performance. It comes simply from the fact that functions in Python are <a href=""https://en.wikipedia.org/wiki/First-class_function"" rel=""noreferrer""><em>first-class objects</em></a>, and not only a piece of code.</p>
<p>As soon as you think of it this way, then it completely makes sense: a function is an <em>object</em> being evaluated on its definition; default parameters are kind of <em>&quot;member data&quot;</em> and therefore their state may change from one call to the other - exactly as in any other object.</p>
<p>In any case, the Effbot (<a href=""https://lwn.net/Articles/878325/"" rel=""noreferrer"">Fredrik Lundh</a>) has a very nice explanation of the reasons for this behavior in <a href=""https://web.archive.org/web/20200221224620id_/http://effbot.org/zone/default-values.htm"" rel=""noreferrer"">Default Parameter Values in Python</a>. I found it very clear, and I really suggest reading it for a better knowledge of how function objects work.</p>
"
What does ** (double star/asterisk) and * (star/asterisk) do for parameters?,https://stackoverflow.com/questions/36901/what-does-double-star-asterisk-and-star-asterisk-do-for-parameters,3483,python;syntax;parameter-passing;variadic-functions;argument-unpacking,"<p>The <code>*args</code> and <code>**kwargs</code> are common idioms to allow an arbitrary number of arguments to functions, as described in the section <a href=""http://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions"" rel=""noreferrer"">more on defining functions</a> in the Python tutorial.</p>
<p>The <code>*args</code> will give you all positional arguments <a href=""https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists"" rel=""noreferrer"">as a tuple</a>:</p>
<pre><code>def foo(*args):
    for a in args:
        print(a)        

foo(1)
# 1

foo(1, 2, 3)
# 1
# 2
# 3
</code></pre>
<p>The <code>**kwargs</code> will give you all
keyword arguments as a dictionary:</p>
<pre><code>def bar(**kwargs):
    for a in kwargs:
        print(a, kwargs[a])  

bar(name='one', age=27)
# name one
# age 27
</code></pre>
<p>Both idioms can be mixed with normal arguments to allow a set of fixed and some variable arguments:</p>
<pre><code>def foo(kind, *args, bar=None, **kwargs):
    print(kind, args, bar, kwargs)

foo(123, 'a', 'b', apple='red')
# 123 ('a', 'b') None {'apple': 'red'}
</code></pre>
<p>It is also possible to use this the other way around:</p>
<pre><code>def foo(a, b, c):
    print(a, b, c)

obj = {'b':10, 'c':'lee'}

foo(100, **obj)
# 100 10 lee
</code></pre>
<p>Another usage of the <code>*l</code> idiom is to <strong>unpack argument lists</strong> when calling a function.</p>
<pre><code>def foo(bar, lee):
    print(bar, lee)

baz = [1, 2]

foo(*baz)
# 1 2
</code></pre>
<p>In Python 3 it is possible to use <code>*l</code> on the left side of an assignment (<a href=""http://www.python.org/dev/peps/pep-3132/"" rel=""noreferrer"">Extended Iterable Unpacking</a>), though it gives a list instead of a tuple in this context:</p>
<pre><code>first, *rest = [1, 2, 3, 4]
# first = 1
# rest = [2, 3, 4]
</code></pre>
<p>Also Python 3 adds a new semantic (refer <a href=""https://www.python.org/dev/peps/pep-3102/"" rel=""noreferrer"">PEP 3102</a>):</p>
<pre><code>def func(arg1, arg2, arg3, *, kwarg1, kwarg2):
    pass
</code></pre>
<p>Such function accepts only 3 positional arguments, and everything after <code>*</code> can only be passed as keyword arguments.</p>
<h3>Note:</h3>
<p>A Python <code>dict</code>, semantically used for keyword argument passing, is arbitrarily ordered. However, in Python 3.6+, keyword arguments are guaranteed to remember insertion order.
&quot;The order of elements in <code>**kwargs</code> now corresponds to the order in which keyword arguments were passed to the function.&quot; - <a href=""https://docs.python.org/3/whatsnew/3.6.html"" rel=""noreferrer"">What’s New In Python 3.6</a>.
In fact, all dicts in CPython 3.6 will remember insertion order as an implementation detail, and this becomes standard in Python 3.7.</p>
"
How can I access environment variables in Python?,https://stackoverflow.com/questions/4906977/how-can-i-access-environment-variables-in-python,3437,python;environment-variables,"<p>Environment variables are accessed through <a href=""https://docs.python.org/library/os.html#os.environ"" rel=""noreferrer""><code>os.environ</code></a>:</p>
<pre><code>import os
print(os.environ['HOME'])
</code></pre>
<p>To see a list of all environment variables:</p>
<pre><code>print(os.environ)
</code></pre>
<hr />
<p>If a key is not present, attempting to access it will raise a <code>KeyError</code>. To avoid this:</p>
<pre><code># Returns `None` if the key doesn't exist
print(os.environ.get('KEY_THAT_MIGHT_EXIST'))

# Returns `default_value` if the key doesn't exist
print(os.environ.get('KEY_THAT_MIGHT_EXIST', default_value))

# Returns `default_value` if the key doesn't exist
print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))
</code></pre>
"
How do I sort a dictionary by value?,https://stackoverflow.com/questions/613183/how-do-i-sort-a-dictionary-by-value,3413,python;sorting;dictionary,"<h3>Python 3.7+ or CPython 3.6</h3>
<p>Dicts preserve insertion order in Python 3.7+. Same in CPython 3.6, but <a href=""https://stackoverflow.com/q/39980323/4518341"">it's an implementation detail</a>.</p>
<pre><code>&gt;&gt;&gt; x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
&gt;&gt;&gt; {k: v for k, v in sorted(x.items(), key=lambda item: item[1])}
{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}
</code></pre>
<p>or</p>
<pre><code>&gt;&gt;&gt; dict(sorted(x.items(), key=lambda item: item[1]))
{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}
</code></pre>
<h3>Older Python</h3>
<p>It is not possible to sort a dictionary, only to get a representation of a dictionary that is sorted. Dictionaries are inherently orderless, but other types, such as lists and tuples, are not. So you need an ordered data type to represent sorted values, which will be a list—probably a list of tuples.</p>
<p>For instance,</p>
<pre><code>import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(1))
</code></pre>
<p><code>sorted_x</code> will be a list of tuples sorted by the second element in each tuple. <code>dict(sorted_x) == x</code>.</p>
<p>And for those wishing to sort on keys instead of values:</p>
<pre><code>import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(0))
</code></pre>
<p>In Python3 since <a href=""https://stackoverflow.com/a/15712231/4293057"">unpacking is not allowed</a> we can use</p>
<pre><code>x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=lambda kv: kv[1])
</code></pre>
<p>If you want the output as a dict, you can use <a href=""https://docs.python.org/3/library/collections.html#collections.OrderedDict"" rel=""noreferrer""><code>collections.OrderedDict</code></a>:</p>
<pre><code>import collections

sorted_dict = collections.OrderedDict(sorted_x)
</code></pre>
"
How do I clone a list so that it doesn&#39;t change unexpectedly after assignment?,https://stackoverflow.com/questions/2612802/how-do-i-clone-a-list-so-that-it-doesnt-change-unexpectedly-after-assignment,3362,python;list;clone;mutable,"<p><code>new_list = my_list</code> doesn't actually create a second list. The assignment just copies the reference to the list, not the actual list, so both <code>new_list</code> and <code>my_list</code> refer to the same list after the assignment.</p>
<p>To actually copy the list, you have several options:</p>
<ul>
<li><p>You can use the built-in <a href=""https://docs.python.org/library/stdtypes.html#mutable-sequence-types"" rel=""noreferrer""><code>list.copy()</code></a> method (available since Python 3.3):</p>
<pre><code>new_list = old_list.copy()
</code></pre>
</li>
<li><p>You can slice it:</p>
<pre><code>new_list = old_list[:]
</code></pre>
<p><a href=""https://en.wikipedia.org/wiki/Alex_Martelli"" rel=""noreferrer"">Alex Martelli</a>'s opinion (at least <a href=""https://www.youtube.com/watch?v=g7V89K8QfgQ"" rel=""noreferrer"">back in 2007</a>) about this is, that <em>it is a weird syntax and it does not make sense to use it ever</em>. ;) (In his opinion, the next one is more readable).</p>
</li>
<li><p>You can use the built-in <a href=""https://docs.python.org/library/stdtypes.html#list"" rel=""noreferrer""><code>list()</code></a> constructor:</p>
<pre><code>new_list = list(old_list)
</code></pre>
</li>
<li><p>You can use generic <a href=""https://docs.python.org/library/copy.html#copy.copy"" rel=""noreferrer""><code>copy.copy()</code></a>:</p>
<pre><code>import copy
new_list = copy.copy(old_list)
</code></pre>
<p>This is a little slower than <code>list()</code> because it has to find out the datatype of <code>old_list</code> first.</p>
</li>
<li><p>If you need to copy the elements of the list as well, use generic <a href=""https://docs.python.org/library/copy.html#copy.deepcopy"" rel=""noreferrer""><code>copy.deepcopy()</code></a>:</p>
<pre><code>import copy
new_list = copy.deepcopy(old_list)
</code></pre>
<p>Obviously the slowest and most memory-needing method, but sometimes unavoidable. This operates recursively; it will handle any number of levels of nested lists (or other containers).</p>
</li>
</ul>
<p><strong>Example:</strong></p>
<pre><code>import copy

class Foo(object):
    def __init__(self, val):
         self.val = val

    def __repr__(self):
        return f'Foo({self.val!r})'

foo = Foo(1)

a = ['foo', foo]
b = a.copy()
c = a[:]
d = list(a)
e = copy.copy(a)
f = copy.deepcopy(a)

# edit orignal list and instance 
a.append('baz')
foo.val = 5

print(f'original: {a}\nlist.copy(): {b}\nslice: {c}\nlist(): {d}\ncopy: {e}\ndeepcopy: {f}')
</code></pre>
<p>Result:</p>
<pre><code>original: ['foo', Foo(5), 'baz']
list.copy(): ['foo', Foo(5)]
slice: ['foo', Foo(5)]
list(): ['foo', Foo(5)]
copy: ['foo', Foo(5)]
deepcopy: ['foo', Foo(1)]
</code></pre>
"
How do I pass a variable by reference?,https://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference,3355,python;reference;parameter-passing;pass-by-reference,"<p>Arguments are <a href=""http://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference"" rel=""noreferrer"">passed by assignment</a>. The rationale behind this is twofold:</p>

<ol>
<li>the parameter passed in is actually a <em>reference</em> to an object (but the reference is passed by value)</li>
<li>some data types are mutable, but others aren't</li>
</ol>

<p>So:</p>

<ul>
<li><p>If you pass a <em>mutable</em> object into a method, the method gets a reference to that same object and you can mutate it to your heart's delight, but if you rebind the reference in the method, the outer scope will know nothing about it, and after you're done, the outer reference will still point at the original object. </p></li>
<li><p>If you pass an <em>immutable</em> object to a method, you still can't rebind the outer reference, and you can't even mutate the object.</p></li>
</ul>

<p>To make it even more clear, let's have some examples. </p>

<h2>List - a mutable type</h2>

<p><strong>Let's try to modify the list that was passed to a method:</strong></p>

<pre><code>def try_to_change_list_contents(the_list):
    print('got', the_list)
    the_list.append('four')
    print('changed to', the_list)

outer_list = ['one', 'two', 'three']

print('before, outer_list =', outer_list)
try_to_change_list_contents(outer_list)
print('after, outer_list =', outer_list)
</code></pre>

<p>Output:</p>

<pre class=""lang-none prettyprint-override""><code>before, outer_list = ['one', 'two', 'three']
got ['one', 'two', 'three']
changed to ['one', 'two', 'three', 'four']
after, outer_list = ['one', 'two', 'three', 'four']
</code></pre>

<p>Since the parameter passed in is a reference to <code>outer_list</code>, not a copy of it, we can use the mutating list methods to change it and have the changes reflected in the outer scope.</p>

<p><strong>Now let's see what happens when we try to change the reference that was passed in as a parameter:</strong></p>

<pre><code>def try_to_change_list_reference(the_list):
    print('got', the_list)
    the_list = ['and', 'we', 'can', 'not', 'lie']
    print('set to', the_list)

outer_list = ['we', 'like', 'proper', 'English']

print('before, outer_list =', outer_list)
try_to_change_list_reference(outer_list)
print('after, outer_list =', outer_list)
</code></pre>

<p>Output:</p>

<pre class=""lang-none prettyprint-override""><code>before, outer_list = ['we', 'like', 'proper', 'English']
got ['we', 'like', 'proper', 'English']
set to ['and', 'we', 'can', 'not', 'lie']
after, outer_list = ['we', 'like', 'proper', 'English']
</code></pre>

<p>Since the <code>the_list</code> parameter was passed by value, assigning a new list to it had no effect that the code outside the method could see. The <code>the_list</code> was a copy of the <code>outer_list</code> reference, and we had <code>the_list</code> point to a new list, but there was no way to change where <code>outer_list</code> pointed.</p>

<h2>String - an immutable type</h2>

<p><strong>It's immutable, so there's nothing we can do to change the contents of the string</strong></p>

<p><strong>Now, let's try to change the reference</strong></p>

<pre><code>def try_to_change_string_reference(the_string):
    print('got', the_string)
    the_string = 'In a kingdom by the sea'
    print('set to', the_string)

outer_string = 'It was many and many a year ago'

print('before, outer_string =', outer_string)
try_to_change_string_reference(outer_string)
print('after, outer_string =', outer_string)
</code></pre>

<p>Output:</p>

<pre class=""lang-none prettyprint-override""><code>before, outer_string = It was many and many a year ago
got It was many and many a year ago
set to In a kingdom by the sea
after, outer_string = It was many and many a year ago
</code></pre>

<p>Again, since the <code>the_string</code> parameter was passed by value, assigning a new string to it had no effect that the code outside the method could see. The <code>the_string</code> was a copy of the <code>outer_string</code> reference, and we had <code>the_string</code> point to a new string, but there was no way to change where <code>outer_string</code> pointed.</p>

<p>I hope this clears things up a little.</p>

<p><strong>EDIT:</strong> It's been noted that this doesn't answer the question that @David originally asked, ""Is there something I can do to pass the variable by actual reference?"". Let's work on that.</p>

<h2>How do we get around this?</h2>

<p>As @Andrea's answer shows, you could return the new value. This doesn't change the way things are passed in, but does let you get the information you want back out:</p>

<pre><code>def return_a_whole_new_string(the_string):
    new_string = something_to_do_with_the_old_string(the_string)
    return new_string

# then you could call it like
my_string = return_a_whole_new_string(my_string)
</code></pre>

<p>If you really wanted to avoid using a return value, you could create a class to hold your value and pass it into the function or use an existing class, like a list:</p>

<pre><code>def use_a_wrapper_to_simulate_pass_by_reference(stuff_to_change):
    new_string = something_to_do_with_the_old_string(stuff_to_change[0])
    stuff_to_change[0] = new_string

# then you could call it like
wrapper = [my_string]
use_a_wrapper_to_simulate_pass_by_reference(wrapper)

do_something_with(wrapper[0])
</code></pre>

<p>Although this seems a little cumbersome.</p>
"
Manually raising (throwing) an exception in Python,https://stackoverflow.com/questions/2052390/manually-raising-throwing-an-exception-in-python,3310,python;exception,"<blockquote>
<h2>How do I manually throw/raise an exception in Python?</h2>
</blockquote>
<p><a href=""https://docs.python.org/3/library/exceptions.html#exception-hierarchy"" rel=""noreferrer"">Use the most specific Exception constructor that semantically fits your issue</a>.</p>
<p>Be specific in your message, e.g.:</p>
<pre><code>raise ValueError('A very specific bad thing happened.')
</code></pre>
<h2>Don't raise generic exceptions</h2>
<p>Avoid raising a generic <code>Exception</code>. To catch it, you'll have to catch all other more specific exceptions that subclass it.</p>
<h3>Problem 1: Hiding bugs</h3>
<pre><code>raise Exception('I know Python!') # Don't! If you catch, likely to hide bugs.
</code></pre>
<p>For example:</p>
<pre><code>def demo_bad_catch():
    try:
        raise ValueError('Represents a hidden bug, do not catch this')
        raise Exception('This is the exception you expect to handle')
    except Exception as error:
        print('Caught this error: ' + repr(error))

&gt;&gt;&gt; demo_bad_catch()
Caught this error: ValueError('Represents a hidden bug, do not catch this',)
</code></pre>
<h3>Problem 2: Won't catch</h3>
<p>And more specific catches won't catch the general exception:</p>
<pre><code>def demo_no_catch():
    try:
        raise Exception('general exceptions not caught by specific handling')
    except ValueError as e:
        print('we will not catch exception: Exception')
 

&gt;&gt;&gt; demo_no_catch()
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;&lt;stdin&gt;&quot;, line 3, in demo_no_catch
Exception: general exceptions not caught by specific handling
</code></pre>
<h2>Best Practices: <code>raise</code> statement</h2>
<p><a href=""https://docs.python.org/3/library/exceptions.html#exception-hierarchy"" rel=""noreferrer"">Instead, use the most specific Exception constructor that semantically fits your issue</a>.</p>
<pre><code>raise ValueError('A very specific bad thing happened')
</code></pre>
<p>which also handily allows an arbitrary number of arguments to be passed to the constructor:</p>
<pre><code>raise ValueError('A very specific bad thing happened', 'foo', 'bar', 'baz') 
</code></pre>
<p>These arguments are accessed by the <code>args</code> attribute on the <code>Exception</code> object. For example:</p>
<pre><code>try:
    some_code_that_may_raise_our_value_error()
except ValueError as err:
    print(err.args)
</code></pre>
<p>prints</p>
<pre><code>('message', 'foo', 'bar', 'baz')    
</code></pre>
<p>In Python 2.5, an actual <code>message</code> attribute was added to <code>BaseException</code> in favor of encouraging users to subclass Exceptions and stop using <code>args</code>, but <a href=""http://www.python.org/dev/peps/pep-0352/#retracted-ideas"" rel=""noreferrer"">the introduction of <code>message</code> and the original deprecation of args has been retracted</a>.</p>
<h2>Best Practices: <code>except</code> clause</h2>
<p>When inside an except clause, you might want to, for example, log that a specific type of error happened, and then re-raise. The best way to do this while preserving the stack trace is to use a bare raise statement. For example:</p>
<pre><code>logger = logging.getLogger(__name__)

try:
    do_something_in_app_that_breaks_easily()
except AppError as error:
    logger.error(error)
    raise                 # just this!
    # raise AppError      # Don't do this, you'll lose the stack trace!
</code></pre>
<h3>Don't modify your errors... but if you insist.</h3>
<p>You can preserve the stacktrace (and error value) with <code>sys.exc_info()</code>, but <strong>this is way more error prone</strong> and <strong>has compatibility problems between Python 2 and 3</strong>, prefer to use a bare <code>raise</code> to re-raise.</p>
<p>To explain - the <code>sys.exc_info()</code> returns the type, value, and traceback.</p>
<pre><code>type, value, traceback = sys.exc_info()
</code></pre>
<p>This is the syntax in Python 2 - note this is not compatible with Python 3:</p>
<pre><code>raise AppError, error, sys.exc_info()[2] # avoid this.
# Equivalently, as error *is* the second object:
raise sys.exc_info()[0], sys.exc_info()[1], sys.exc_info()[2]
</code></pre>
<p>If you want to, you can modify what happens with your new raise - e.g. setting new <code>args</code> for the instance:</p>
<pre><code>def error():
    raise ValueError('oops!')

def catch_error_modify_message():
    try:
        error()
    except ValueError:
        error_type, error_instance, traceback = sys.exc_info()
        error_instance.args = (error_instance.args[0] + ' &lt;modification&gt;',)
        raise error_type, error_instance, traceback
</code></pre>
<p>And we have preserved the whole traceback while modifying the args. Note that this is <strong>not a best practice</strong> and it is <strong>invalid syntax</strong> in Python 3 (making keeping compatibility much harder to work around).</p>
<pre><code>&gt;&gt;&gt; catch_error_modify_message()
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;&lt;stdin&gt;&quot;, line 3, in catch_error_modify_message
  File &quot;&lt;stdin&gt;&quot;, line 2, in error
ValueError: oops! &lt;modification&gt;
</code></pre>
<p>In <a href=""https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement"" rel=""noreferrer"">Python 3</a>:</p>
<pre><code>raise error.with_traceback(sys.exc_info()[2])
</code></pre>
<p>Again: avoid manually manipulating tracebacks. It's <a href=""https://docs.python.org/2/reference/simple_stmts.html#the-raise-statement"" rel=""noreferrer"">less efficient</a> and more error prone. And if you're using threading and <code>sys.exc_info</code> you may even get the wrong traceback (especially if you're using exception handling for control flow - which I'd personally tend to avoid.)</p>
<h3>Python 3, Exception chaining</h3>
<p>In Python 3, you can chain Exceptions, which preserve tracebacks:</p>
<pre><code>raise RuntimeError('specific message') from error
</code></pre>
<p>Be aware:</p>
<ul>
<li>this <em>does</em> allow changing the error type raised, and</li>
<li>this is <em>not</em> compatible with Python 2.</li>
</ul>
<h3>Deprecated Methods:</h3>
<p>These can easily hide and even get into production code. You want to raise an exception, and doing them will raise an exception, <strong>but not the one intended!</strong></p>
<p><a href=""http://www.python.org/dev/peps/pep-3109/"" rel=""noreferrer"">Valid in Python 2, but not in Python 3</a> is the following:</p>
<pre><code>raise ValueError, 'message' # Don't do this, it's deprecated!
</code></pre>
<p>Only <a href=""https://docs.python.org/2/whatsnew/2.5.html#pep-352-exceptions-as-new-style-classes"" rel=""noreferrer"">valid in much older versions of Python</a> (2.4 and lower), you may still see people raising strings:</p>
<pre><code>raise 'message' # really really wrong. don't do this.
</code></pre>
<p>In all modern versions, this will actually raise a <code>TypeError</code>, because you're not raising a <code>BaseException</code> type. If you're not checking for the right exception and don't have a reviewer that's aware of the issue, it could get into production.</p>
<h2>Example Usage</h2>
<p>I raise Exceptions to warn consumers of my API if they're using it incorrectly:</p>
<pre><code>def api_func(foo):
    '''foo should be either 'baz' or 'bar'. returns something very useful.'''
    if foo not in _ALLOWED_ARGS:
        raise ValueError('{foo} wrong, use &quot;baz&quot; or &quot;bar&quot;'.format(foo=repr(foo)))
</code></pre>
<h2>Create your own error types when apropos</h2>
<blockquote>
<p><strong>&quot;I want to make an error on purpose, so that it would go into the except&quot;</strong></p>
</blockquote>
<p>You can create your own error types, if you want to indicate something specific is wrong with your application, just subclass the appropriate point in the exception hierarchy:</p>
<pre><code>class MyAppLookupError(LookupError):
    '''raise this when there's a lookup error for my app'''
</code></pre>
<p>and usage:</p>
<pre><code>if important_key not in resource_dict and not ok_to_be_missing:
    raise MyAppLookupError('resource is missing, and that is not ok.')
</code></pre>
"
Understanding Python super() with __init__() methods,https://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods,3284,python;class;oop;inheritance;super,"<p><code>super()</code> lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of <a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=236275"" rel=""noreferrer"">fun stuff</a> can happen. See the <a href=""https://docs.python.org/2/library/functions.html#super"" rel=""noreferrer"">standard docs on super</a> if you haven't already.</p>

<p>Note that <a href=""https://docs.python.org/3/library/functions.html#super"" rel=""noreferrer"">the syntax changed in Python 3.0</a>: you can just say <code>super().__init__()</code> instead of <code>super(ChildB, self).__init__()</code> which IMO is quite a bit nicer. The standard docs also refer to a <a href=""https://rhettinger.wordpress.com/2011/05/26/super-considered-super/"" rel=""noreferrer"">guide to using <code>super()</code></a> which is quite explanatory.</p>
"
How do I concatenate two lists in Python?,https://stackoverflow.com/questions/1720421/how-do-i-concatenate-two-lists-in-python,3238,python;list;concatenation,"<p>Use the <code>+</code> operator to combine the lists:</p>
<pre><code>listone = [1, 2, 3]
listtwo = [4, 5, 6]

joinedlist = listone + listtwo
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; joinedlist
[1, 2, 3, 4, 5, 6]
</code></pre>
<p>NOTE: This will create a new list with a shallow copy of the items in the first list, followed by a shallow copy of the items in the second list. Use <a href=""https://docs.python.org/3/library/copy.html#copy.deepcopy"" rel=""noreferrer"">copy.deepcopy()</a> to get deep copies of lists.</p>
"
How do I check if a list is empty?,https://stackoverflow.com/questions/53513/how-do-i-check-if-a-list-is-empty,3222,python;list,"<pre><code>if not a:
    print(&quot;List is empty&quot;)
</code></pre>
<p>Using the <a href=""https://docs.python.org/library/stdtypes.html#truth-value-testing"" rel=""noreferrer"">implicit booleanness</a> of the empty <code>list</code> is quite Pythonic.</p>
"
How do I make function decorators and chain them together?,https://stackoverflow.com/questions/739654/how-do-i-make-function-decorators-and-chain-them-together,3196,python;function;decorator;python-decorators;chain,"<p>Check out <a href=""http://docs.python.org/reference/compound_stmts.html#function"" rel=""noreferrer"">the documentation</a> to see how decorators work. Here is what you asked for:</p>
<pre><code>from functools import wraps

def makebold(fn):
    @wraps(fn)
    def wrapper(*args, **kwargs):
        return &quot;&lt;b&gt;&quot; + fn(*args, **kwargs) + &quot;&lt;/b&gt;&quot;
    return wrapper

def makeitalic(fn):
    @wraps(fn)
    def wrapper(*args, **kwargs):
        return &quot;&lt;i&gt;&quot; + fn(*args, **kwargs) + &quot;&lt;/i&gt;&quot;
    return wrapper

@makebold
@makeitalic
def hello():
    return &quot;hello world&quot;

@makebold
@makeitalic
def log(s):
    return s

print hello()        # returns &quot;&lt;b&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/b&gt;&quot;
print hello.__name__ # with functools.wraps() this returns &quot;hello&quot;
print log('hello')   # returns &quot;&lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;&quot;
</code></pre>
"
How do I split a list into equally-sized chunks?,https://stackoverflow.com/questions/312443/how-do-i-split-a-list-into-equally-sized-chunks,3162,python;list;split;chunks,"<p>Here's a generator that yields evenly-sized chunks:</p>
<pre><code>def chunks(lst, n):
    &quot;&quot;&quot;Yield successive n-sized chunks from lst.&quot;&quot;&quot;
    for i in range(0, len(lst), n):
        yield lst[i:i + n]
</code></pre>
<pre><code>import pprint
pprint.pprint(list(chunks(range(10, 75), 10)))
[[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
 [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
 [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
 [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],
 [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],
 [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],
 [70, 71, 72, 73, 74]]
</code></pre>
<p>For Python 2, using <code>xrange</code> instead of <code>range</code>:</p>
<pre><code>def chunks(lst, n):
    &quot;&quot;&quot;Yield successive n-sized chunks from lst.&quot;&quot;&quot;
    for i in xrange(0, len(lst), n):
        yield lst[i:i + n]
</code></pre>
<hr />
<p>Below is a list comprehension one-liner. The method above is preferable, though, since using named functions makes code easier to understand. For Python 3:</p>
<pre><code>[lst[i:i + n] for i in range(0, len(lst), n)]
</code></pre>
<p>For Python 2:</p>
<pre><code>[lst[i:i + n] for i in xrange(0, len(lst), n)]
</code></pre>
"
Find the current directory and file&#39;s directory,https://stackoverflow.com/questions/5137497/find-the-current-directory-and-files-directory,3116,python;directory,"<p>To get the full path to the directory a Python file is contained in, write this in that file:</p>

<pre><code>import os 
dir_path = os.path.dirname(os.path.realpath(__file__))
</code></pre>

<p>(Note that the incantation above won't work if you've already used <code>os.chdir()</code> to change your current working directory, since the value of the <code>__file__</code> constant is relative to the current working directory and is not changed by an <code>os.chdir()</code> call.)</p>

<hr>

<p>To get the current working directory use </p>

<pre><code>import os
cwd = os.getcwd()
</code></pre>

<hr>

<p>Documentation references for the modules, constants and functions used above:</p>

<ul>
<li>The <a href=""https://docs.python.org/library/os.html""><code>os</code></a> and <a href=""https://docs.python.org/library/os.path.html#module-os.path""><code>os.path</code></a> modules.</li>
<li>The <a href=""https://docs.python.org/reference/datamodel.html""><code>__file__</code></a> constant</li>
<li><a href=""https://docs.python.org/library/os.path.html#os.path.realpath""><code>os.path.realpath(path)</code></a> (returns <em>""the canonical path of the specified filename, eliminating any symbolic links encountered in the path""</em>)</li>
<li><a href=""https://docs.python.org/library/os.path.html#os.path.dirname""><code>os.path.dirname(path)</code></a> (returns <em>""the directory name of pathname <code>path</code>""</em>)</li>
<li><a href=""https://docs.python.org/library/os.html#os.getcwd""><code>os.getcwd()</code></a> (returns <em>""a string representing the current working directory""</em>)</li>
<li><a href=""https://docs.python.org/library/os.html#os.chdir""><code>os.chdir(path)</code></a> (<em>""change the current working directory to <code>path</code>""</em>)</li>
</ul>
"
What is the difference between Python&#39;s list methods append and extend?,https://stackoverflow.com/questions/252703/what-is-the-difference-between-pythons-list-methods-append-and-extend,3110,python;list;data-structures;append;extend,"<p><a href=""https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types"" rel=""noreferrer""><code>.append()</code></a> appends a <strong>single object</strong> at the end of the list:</p>
<pre><code>&gt;&gt;&gt; x = [1, 2, 3]
&gt;&gt;&gt; x.append([4, 5])
&gt;&gt;&gt; print(x)
[1, 2, 3, [4, 5]]
</code></pre>
<p><a href=""https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types"" rel=""noreferrer""><code>.extend()</code></a> appends <strong>multiple objects</strong> that are taken from inside the specified iterable:</p>
<pre><code>&gt;&gt;&gt; x = [1, 2, 3]
&gt;&gt;&gt; x.extend([4, 5])
&gt;&gt;&gt; print(x)
[1, 2, 3, 4, 5]
</code></pre>
"
Why is &quot;1000000000000000 in range(1000000000000001)&quot; so fast in Python 3?,https://stackoverflow.com/questions/30081275/why-is-1000000000000000-in-range1000000000000001-so-fast-in-python-3,3068,python;performance;python-3.x;range;python-internals,"<p>The Python 3 <code>range()</code> object doesn't produce numbers immediately; it is a smart <a href=""https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence"" rel=""noreferrer"">sequence object</a> that produces numbers <em>on demand</em>. All it contains is your start, stop and step values, then as you iterate over the object the next integer is calculated each iteration.</p>
<p>The object also implements the <a href=""https://docs.python.org/3/reference/datamodel.html#object.__contains__"" rel=""noreferrer""><code>object.__contains__</code> hook</a>, and <em>calculates</em> if your number is part of its range. Calculating is a (near) constant time operation <sup>*</sup>. There is never a need to scan through all possible integers in the range.</p>
<p>From the <a href=""https://docs.python.org/3/library/stdtypes.html#range"" rel=""noreferrer""><code>range()</code> object documentation</a>:</p>
<blockquote>
<p>The advantage of the <code>range</code> type over a regular <code>list</code> or <code>tuple</code> is that a range object will always take the same (small) amount of memory, no matter the size of the range it represents (as it only stores the <code>start</code>, <code>stop</code> and <code>step</code> values, calculating individual items and subranges as needed).</p>
</blockquote>
<p>So at a minimum, your <code>range()</code> object would do:</p>
<pre><code>class my_range:
    def __init__(self, start, stop=None, step=1, /):
        if stop is None:
            start, stop = 0, start
        self.start, self.stop, self.step = start, stop, step
        if step &lt; 0:
            lo, hi, step = stop, start, -step
        else:
            lo, hi = start, stop
        self.length = 0 if lo &gt; hi else ((hi - lo - 1) // step) + 1

    def __iter__(self):
        current = self.start
        if self.step &lt; 0:
            while current &gt; self.stop:
                yield current
                current += self.step
        else:
            while current &lt; self.stop:
                yield current
                current += self.step

    def __len__(self):
        return self.length

    def __getitem__(self, i):
        if i &lt; 0:
            i += self.length
        if 0 &lt;= i &lt; self.length:
            return self.start + i * self.step
        raise IndexError('my_range object index out of range')

    def __contains__(self, num):
        if self.step &lt; 0:
            if not (self.stop &lt; num &lt;= self.start):
                return False
        else:
            if not (self.start &lt;= num &lt; self.stop):
                return False
        return (num - self.start) % self.step == 0
</code></pre>
<p>This is still missing several things that a real <code>range()</code> supports (such as the <code>.index()</code> or <code>.count()</code> methods, hashing, equality testing, or slicing), but should give you an idea.</p>
<p>I also simplified the <code>__contains__</code> implementation to only focus on integer tests; if you give a real <code>range()</code> object a non-integer value (including subclasses of <code>int</code>), a slow scan is initiated to see if there is a match, just as if you use a containment test against a list of all the contained values. This was done to continue to support other numeric types that just happen to support equality testing with integers but are not expected to support integer arithmetic as well. See the original <a href=""http://bugs.python.org/issue1766304"" rel=""noreferrer"">Python issue</a> that implemented the containment test.</p>
<hr />
<p>* <em>Near</em> constant time because Python integers are unbounded and so math operations also grow in time as N grows, making this a O(log N) operation. Since it’s all executed in optimised C code and Python stores integer values in 30-bit chunks, you’d run out of memory before you saw any performance impact due to the size of the integers involved here.</p>
"
Renaming column names in Pandas,https://stackoverflow.com/questions/11346283/renaming-column-names-in-pandas,3062,python;pandas;replace;dataframe;rename,"<p>Just assign it to the <code>.columns</code> attribute:</p>
<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'$a':[1,2], '$b': [10,20]})
&gt;&gt;&gt; df
   $a  $b
0   1  10
1   2  20

&gt;&gt;&gt; df.columns = ['a', 'b']
&gt;&gt;&gt; df
   a   b
0  1  10
1  2  20
</code></pre>
"
Convert string &quot;Jun 1 2005 1:33PM&quot; into datetime,https://stackoverflow.com/questions/466345/convert-string-jun-1-2005-133pm-into-datetime,2999,python;datetime;type-conversion,"<p><a href=""https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime"" rel=""noreferrer""><code>datetime.strptime</code></a> parses an input string in the user-specified format into a <em>timezone-naive</em> <a href=""https://docs.python.org/3/library/datetime.html#datetime-objects"" rel=""noreferrer""><code>datetime</code></a> object:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')
datetime.datetime(2005, 6, 1, 13, 33)
</code></pre>
<p>To obtain a <a href=""https://docs.python.org/3/library/datetime.html#date-objects"" rel=""noreferrer""><code>date</code></a> object using an existing <code>datetime</code> object, convert it using <code>.date()</code>:</p>
<pre><code>&gt;&gt;&gt; datetime.strptime('Jun 1 2005', '%b %d %Y').date()
date(2005, 6, 1)
</code></pre>
<hr />
<p><strong>Links:</strong></p>
<ul>
<li><p><code>strptime</code> docs: <a href=""https://docs.python.org/2/library/datetime.html#datetime.datetime.strptime"" rel=""noreferrer"" title=""datetime.datetime.strptime"">Python 2</a>, <a href=""https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime"" rel=""noreferrer"">Python 3</a></p>
</li>
<li><p><code>strptime</code>/<code>strftime</code> format string docs: <a href=""https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior"" rel=""noreferrer"" title=""strftime-and-strptime-behavior"">Python 2</a>, <a href=""https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior"" rel=""noreferrer"">Python 3</a></p>
</li>
<li><p><a href=""http://strftime.org/"" rel=""noreferrer"">strftime.org</a> format string cheatsheet</p>
</li>
</ul>
<p><strong>Notes:</strong></p>
<ul>
<li><code>strptime</code> = &quot;string parse time&quot;</li>
<li><code>strftime</code> = &quot;string format time&quot;</li>
</ul>
"
How can I remove a key from a Python dictionary?,https://stackoverflow.com/questions/11277432/how-can-i-remove-a-key-from-a-python-dictionary,2999,python;dictionary;unset,"<p>To delete a key regardless of whether it is in the dictionary, use the two-argument form of <a href=""http://docs.python.org/library/stdtypes.html#dict.pop"" rel=""noreferrer""><code>dict.pop()</code></a>:</p>
<pre class=""lang-py prettyprint-override""><code>my_dict.pop('key', None)
</code></pre>
<p>This will return <code>my_dict[key]</code> if <code>key</code> exists in the dictionary, and <code>None</code> otherwise. If the second parameter is not specified (i.e. <code>my_dict.pop('key')</code>) and <code>key</code> does not exist, a <code>KeyError</code> is raised.</p>
<p>To delete a key that is guaranteed to exist, you can also use</p>
<pre><code>del my_dict['key']
</code></pre>
<p>This will raise a <code>KeyError</code> if the key is not in the dictionary.</p>
"
How to upgrade all Python packages with pip,https://stackoverflow.com/questions/2720014/how-to-upgrade-all-python-packages-with-pip,2872,python;pip;pypi,"<p>There isn't a built-in flag yet. Starting with pip version 22.3, the <code>--outdated</code> and <code>--format=freeze</code> have become <a href=""https://pip.pypa.io/en/stable/news/#v22-3"" rel=""noreferrer"">mutually exclusive</a>. Use Python, to parse the JSON output:</p>
<pre class=""lang-bash prettyprint-override""><code>pip --disable-pip-version-check list --outdated --format=json | python -c &quot;import json, sys; print('\n'.join([x['name'] for x in json.load(sys.stdin)]))&quot; | xargs -n1 pip install -U
</code></pre>
<p>If you are using <code>pip&lt;22.3</code> you can use:</p>
<pre class=""lang-bash prettyprint-override""><code>pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U
</code></pre>
<p>For older versions of <code>pip</code>:</p>
<pre class=""lang-bash prettyprint-override""><code>pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U
</code></pre>
<hr />
<ul>
<li><p>The <code>grep</code> is to skip editable (&quot;-e&quot;) package definitions, as suggested by <a href=""https://stackoverflow.com/questions/2720014/how-to-upgrade-all-python-packages-with-pip#comment13279323_3452888"">@jawache</a>. (Yes, you could replace <code>grep</code>+<code>cut</code> with <code>sed</code> or <code>awk</code> or <code>perl</code> or...).</p>
</li>
<li><p>The <code>-n1</code> flag for <code>xargs</code> prevents stopping everything if updating one package fails (thanks <a href=""https://stackoverflow.com/users/339505/andsens"">@andsens</a>).</p>
</li>
</ul>
<hr />
<p><strong>Note:</strong> there are infinite potential variations for this. I'm trying to keep this answer short and simple, but please do suggest variations in the comments!</p>
"
How can I sort a list of dictionaries by a value of the dictionary in Python?,https://stackoverflow.com/questions/72899/how-can-i-sort-a-list-of-dictionaries-by-a-value-of-the-dictionary-in-python,2850,python;list;sorting;dictionary;data-structures,"<p>The <a href=""https://docs.python.org/library/functions.html#sorted"" rel=""noreferrer""><code>sorted()</code></a> function takes a <code>key=</code> parameter</p>
<pre><code>newlist = sorted(list_to_be_sorted, key=lambda d: d['name'])
</code></pre>
<p>Alternatively, you can use <a href=""https://docs.python.org/library/operator.html#operator.itemgetter"" rel=""noreferrer""><code>operator.itemgetter</code></a> instead of defining the function yourself</p>
<pre><code>from operator import itemgetter
newlist = sorted(list_to_be_sorted, key=itemgetter('name'))
</code></pre>
<p>For completeness, add <code>reverse=True</code> to sort in descending order</p>
<pre><code>newlist = sorted(list_to_be_sorted, key=itemgetter('name'), reverse=True)
</code></pre>
"
How to leave/exit/deactivate a Python virtualenv,https://stackoverflow.com/questions/990754/how-to-leave-exit-deactivate-a-python-virtualenv,2808,python;virtualenv;exit;virtualenvwrapper,"<p>Usually, activating a virtualenv gives you a shell function named:</p>

<pre><code>$ deactivate
</code></pre>

<p>which puts things back to normal.</p>

<p>I have just looked specifically again at the code for <code>virtualenvwrapper</code>, and, yes, it too supports <code>deactivate</code> as the way to escape from all virtualenvs.</p>

<p>If you are trying to leave an <a href=""https://en.wikipedia.org/wiki/Anaconda_(Python_distribution)"" rel=""noreferrer""><em>Anaconda</em></a> environment, the command depends upon your version of <code>conda</code>. Recent versions (like 4.6) install a <code>conda</code> function directly in your shell, in which case you run:</p>

<pre><code>conda deactivate
</code></pre>

<p>Older conda versions instead implement deactivation using a stand-alone script:</p>

<pre><code>source deactivate
</code></pre>
"
How do I get the last element of a list?,https://stackoverflow.com/questions/930397/how-do-i-get-the-last-element-of-a-list,2805,python;list;indexing,"<p><code>some_list[-1]</code> is the shortest and most Pythonic.</p>
<p>In fact, you can do much more with this syntax. The <code>some_list[-n]</code> syntax gets the nth-to-last element. So <code>some_list[-1]</code> gets the last element, <code>some_list[-2]</code> gets the second to last, etc, all the way down to <code>some_list[-len(some_list)]</code>, which gives you the first element.</p>
<p>You can also set list elements in this way. For instance:</p>
<pre><code>&gt;&gt;&gt; some_list = [1, 2, 3]
&gt;&gt;&gt; some_list[-1] = 5 # Set the last element
&gt;&gt;&gt; some_list[-2] = 3 # Set the second to last element
&gt;&gt;&gt; some_list
[1, 3, 5]
</code></pre>
<p>Note that getting a list item by index will raise an <a href=""https://docs.python.org/3/library/exceptions.html#IndexError"" rel=""noreferrer""><code>IndexError</code></a> if the expected item doesn't exist. This means that <code>some_list[-1]</code> will raise an exception if <code>some_list</code> is empty, because an empty list can't have a last element.</p>
"
How do I install pip on Windows?,https://stackoverflow.com/questions/4750806/how-do-i-install-pip-on-windows,2772,python;windows;pip,"<h2>Python 3.4+ and 2.7.9+</h2>
<p>Good news! <a href=""https://docs.python.org/3/whatsnew/3.4.html"" rel=""noreferrer"">Python 3.4</a> (released March 2014) and <a href=""https://docs.python.org/2/whatsnew/2.7.html#pep-477-backport-ensurepip-pep-453-to-python-2-7"" rel=""noreferrer"">Python 2.7.9</a> (released December 2014) ship with Pip. This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded from using community libraries by the prohibitive difficulty of setup. In shipping with a package manager, Python joins <a href=""http://en.wikipedia.org/wiki/Ruby_%28programming_language%29"" rel=""noreferrer"">Ruby</a>, <a href=""http://en.wikipedia.org/wiki/Node.js"" rel=""noreferrer"">Node.js</a>, <a href=""http://en.wikipedia.org/wiki/Haskell_%28programming_language%29"" rel=""noreferrer"">Haskell</a>, <a href=""http://en.wikipedia.org/wiki/Perl"" rel=""noreferrer"">Perl</a>, <a href=""http://en.wikipedia.org/wiki/Go_%28programming_language%29"" rel=""noreferrer"">Go</a>—almost every other contemporary language with a majority open-source community. Thank you, Python.</p>
<p>If you do find that pip is not available, simply run <a href=""https://docs.python.org/library/ensurepip.html"" rel=""noreferrer""><code>ensurepip</code></a>.</p>
<ul>
<li><p>On Windows:</p>
<pre><code>py -3 -m ensurepip
</code></pre>
</li>
<li><p>Otherwise:</p>
<pre><code>python3 -m ensurepip
</code></pre>
</li>
</ul>
<p>Of course, that doesn't mean Python packaging is problem solved. The experience remains frustrating. I discuss this <a href=""https://stackoverflow.com/questions/2436731/does-python-have-a-package-module-management-system/13445719#13445719"">in the Stack Overflow question <em>Does Python have a package/module management system?</em></a>.</p>
<h2>Python 3 ≤ 3.3 and 2 ≤ 2.7.8</h2>
<p>Flying in the face of its <a href=""http://www.python.org/about/"" rel=""noreferrer"">'batteries included'</a> motto, Python ships without a package manager. To make matters worse, Pip was—until recently—ironically difficult to install.</p>
<h3>Official instructions</h3>
<p>Per <a href=""https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip"" rel=""noreferrer"">https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip</a>:</p>
<p>Download <a href=""https://bootstrap.pypa.io/get-pip.py"" rel=""noreferrer""><code>get-pip.py</code></a>, being careful to save it as a <code>.py</code> file rather than <code>.txt</code>. Then, run it from the command prompt:</p>
<pre><code>python get-pip.py
</code></pre>
<p>You possibly need an administrator command prompt to do this. Follow <em><a href=""http://technet.microsoft.com/en-us/library/cc947813(v=ws.10).aspx"" rel=""noreferrer"">Start a Command Prompt as an Administrator</a></em> (Microsoft TechNet).</p>
<p>This installs the pip package, which (in Windows) contains ...\Scripts\pip.exe that path must be in PATH environment variable to use pip from the command line (see the second part of 'Alternative Instructions' for adding it to your PATH,</p>
<h3>Alternative instructions</h3>
<p>The official documentation tells users to install Pip and each of its dependencies from source. That's tedious for the experienced and prohibitively difficult for newbies.</p>
<p>For our sake, Christoph Gohlke prepares Windows installers (<code>.msi</code>) for popular Python packages. He builds installers for all Python versions, both 32 and 64 bit. You need to:</p>
<ol>
<li><a href=""http://www.lfd.uci.edu/%7Egohlke/pythonlibs/#setuptools"" rel=""noreferrer"">Install setuptools</a></li>
<li><a href=""http://www.lfd.uci.edu/%7Egohlke/pythonlibs/#pip"" rel=""noreferrer"">Install pip</a></li>
</ol>
<p>For me, this installed Pip at <code>C:\Python27\Scripts\pip.exe</code>. Find <code>pip.exe</code> on your computer, then add its folder (for example, <code>C:\Python27\Scripts</code>) to your path (Start / Edit environment variables). Now you should be able to run <code>pip</code> from the command line. Try installing a package:</p>
<pre><code>pip install httpie
</code></pre>
<p>There you go (hopefully)! Solutions for common problems are given below:</p>
<h3>Proxy problems</h3>
<p>If you work in an office, you might be behind an HTTP proxy. If so, set the environment variables <a href=""http://docs.python.org/2/library/urllib.html"" rel=""noreferrer""><code>http_proxy</code> and <code>https_proxy</code></a>. Most Python applications (and other free software) respect these. Example syntax:</p>
<pre><code>http://proxy_url:port
http://username:password@proxy_url:port
</code></pre>
<p>If you're really unlucky, your proxy might be a Microsoft <a href=""https://en.wikipedia.org/wiki/NT_LAN_Manager"" rel=""noreferrer"">NTLM</a> proxy. Free software can't cope. The only solution is to install a free software friendly proxy that forwards to the nasty proxy. <a href=""http://cntlm.sourceforge.net/"" rel=""noreferrer"">http://cntlm.sourceforge.net/</a></p>
<h3>Unable to find vcvarsall.bat</h3>
<p>Python modules can be partly written in C or C++. Pip tries to compile from source. If you don't have a C/C++ compiler installed and configured, you'll see this cryptic error message.</p>
<blockquote>
<p>Error: Unable to find vcvarsall.bat</p>
</blockquote>
<p>You can fix that by <a href=""https://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat"">installing a C++ compiler</a> such as <a href=""http://en.wikipedia.org/wiki/MinGW"" rel=""noreferrer"">MinGW</a> or <a href=""http://en.wikipedia.org/wiki/Visual_C%2B%2B#32-bit_versions"" rel=""noreferrer"">Visual C++</a>. Microsoft actually ships one specifically for use with Python. Or try <em><a href=""http://aka.ms/vcpython27"" rel=""noreferrer"">Microsoft Visual C++ Compiler for Python 2.7</a></em>.</p>
<p>Often though it's easier to check <a href=""http://www.lfd.uci.edu/%7Egohlke/pythonlibs/"" rel=""noreferrer"">Christoph's site</a> for your package.</p>
"
How do I parse a string to a float or int?,https://stackoverflow.com/questions/379906/how-do-i-parse-a-string-to-a-float-or-int,2771,python;parsing;floating-point;type-conversion;integer,"<pre><code>&gt;&gt;&gt; a = &quot;545.2222&quot;
&gt;&gt;&gt; float(a)
545.22220000000004
&gt;&gt;&gt; int(float(a))
545
</code></pre>
"
How do I get a substring of a string in Python?,https://stackoverflow.com/questions/663171/how-do-i-get-a-substring-of-a-string-in-python,2717,python;string;substring,"<pre><code>&gt;&gt;&gt; x = ""Hello World!""
&gt;&gt;&gt; x[2:]
'llo World!'
&gt;&gt;&gt; x[:2]
'He'
&gt;&gt;&gt; x[:-2]
'Hello Worl'
&gt;&gt;&gt; x[-2:]
'd!'
&gt;&gt;&gt; x[2:-2]
'llo Worl'
</code></pre>

<p>Python calls this concept ""slicing"" and it works on more than just strings. Take a look <a href=""https://stackoverflow.com/questions/509211/good-primer-for-python-slice-notation"">here</a> for a comprehensive introduction.</p>
"
How do I escape curly-brace ({}) characters characters in a string while using .format?,https://stackoverflow.com/questions/5466451/how-do-i-escape-curly-brace-characters-characters-in-a-string-while-using,2696,python;string;format;string-formatting;curly-braces,"<p>You need to double the <code>{{</code> and <code>}}</code>:</p>

<pre><code>&gt;&gt;&gt; x = "" {{ Hello }} {0} ""
&gt;&gt;&gt; print(x.format(42))
' { Hello } 42 '
</code></pre>

<p>Here's the relevant part of the <a href=""https://docs.python.org/library/string.html#formatstrings"" rel=""noreferrer"">Python documentation for format string syntax</a>:</p>

<blockquote>
  <p>Format strings contain “replacement fields” surrounded by curly braces <code>{}</code>. Anything that is not contained in braces is considered literal text, which is copied unchanged to the output. If you need to include a brace character in the literal text, it can be escaped by doubling: <code>{{</code> and <code>}}</code>.</p>
</blockquote>
"
Check if a given key already exists in a dictionary,https://stackoverflow.com/questions/1602934/check-if-a-given-key-already-exists-in-a-dictionary,2675,python;dictionary,"<p><a href=""https://docs.python.org/reference/expressions.html#membership-test-operations"" rel=""noreferrer""><code>in</code></a> tests for the existence of a key in a <a href=""https://docs.python.org/library/stdtypes.html#dict"" rel=""noreferrer""><code>dict</code></a>:</p>
<pre><code>d = {&quot;key1&quot;: 10, &quot;key2&quot;: 23}

if &quot;key1&quot; in d:
    print(&quot;this will execute&quot;)

if &quot;nonexistent key&quot; in d:
    print(&quot;this will not&quot;)
</code></pre>
<hr />
<p>Use <a href=""https://docs.python.org/library/stdtypes.html#dict.get"" rel=""noreferrer""><code>dict.get()</code></a> to provide a default value when the key does not exist:</p>
<pre><code>d = {}

for i in range(100):
    key = i % 10
    d[key] = d.get(key, 0) + 1
</code></pre>
<hr />
<p>To provide a default value for <em>every</em> key, either use <a href=""https://docs.python.org/library/stdtypes.html#dict.setdefault"" rel=""noreferrer""><code>dict.setdefault()</code></a> on each assignment:</p>
<pre><code>d = {}

for i in range(100):
    d[i % 10] = d.setdefault(i % 10, 0) + 1    
</code></pre>
<p>...or better, use <a href=""https://docs.python.org/library/collections.html#collections.defaultdict"" rel=""noreferrer""><code>defaultdict</code></a> from the <a href=""https://docs.python.org/library/collections.html"" rel=""noreferrer""><code>collections</code></a> module:</p>
<pre><code>from collections import defaultdict

d = defaultdict(int)

for i in range(100):
    d[i % 10] += 1
</code></pre>
"
Class (static) variables and methods,https://stackoverflow.com/questions/68645/class-static-variables-and-methods,2626,python;class;static;class-variables,"<p>Variables declared inside the class definition, but not inside a method are class or static variables:</p>
<pre><code>&gt;&gt;&gt; class MyClass:
...     i = 3
...
&gt;&gt;&gt; MyClass.i
3 
</code></pre>
<p>As @<a href=""https://stackoverflow.com/questions/68645/static-class-variables-in-python#answer-69067"">millerdev</a> points out, this creates a class-level <code>i</code> variable, but this is distinct from any instance-level <code>i</code> variable, so you could have</p>
<pre><code>&gt;&gt;&gt; m = MyClass()
&gt;&gt;&gt; m.i = 4
&gt;&gt;&gt; MyClass.i, m.i
&gt;&gt;&gt; (3, 4)
</code></pre>
<p>This is different from C++ and Java, but not so different from C#, where a static member can't be accessed using a reference to an instance.</p>
<p>See <a href=""https://docs.python.org/3/tutorial/classes.html#class-objects"" rel=""noreferrer"">what the Python tutorial has to say on the subject of classes and class objects</a>.</p>
<p>@Steve Johnson has already answered regarding <a href=""http://web.archive.org/web/20090214211613/http://pyref.infogami.com/staticmethod"" rel=""noreferrer"">static methods</a>, also documented under <a href=""https://docs.python.org/3/library/functions.html#staticmethod"" rel=""noreferrer"">&quot;Built-in Functions&quot; in the Python Library Reference</a>.</p>
<pre><code>class C:
    @staticmethod
    def f(arg1, arg2, ...): ...
</code></pre>
<p>@beidy recommends <a href=""https://docs.python.org/3/library/functions.html#classmethod"" rel=""noreferrer"">classmethod</a>s over staticmethod, as the method then receives the class type as the first argument.</p>
"
How do I lowercase a string in Python?,https://stackoverflow.com/questions/6797984/how-do-i-lowercase-a-string-in-python,2577,python;string;uppercase;lowercase,"<p>Use <a href=""https://docs.python.org/library/stdtypes.html#str.lower"" rel=""noreferrer""><code>str.lower()</code></a>:</p>
<pre><code>&quot;Kilometer&quot;.lower()
</code></pre>
"
How can I check if an object has an attribute?,https://stackoverflow.com/questions/610883/how-can-i-check-if-an-object-has-an-attribute,2527,python;class;object;attributes;attributeerror,"<p>Try <a href=""https://docs.python.org/3/library/functions.html#hasattr"" rel=""noreferrer""><code>hasattr()</code></a>:</p>
<pre><code>if hasattr(a, 'property'):
    a.property
</code></pre>
<p>See <a href=""https://stackoverflow.com/a/610923/117030"">zweiterlinde's answer</a>, which offers good advice about asking forgiveness! It is a very Pythonic approach!</p>
<p>The general practice in Python is that, if the property is likely to be there most of the time, simply call it and either let the exception propagate, or trap it with a try/except block. This will likely be faster than <code>hasattr</code>. If the property is likely to not be there most of the time, or you're not sure, using <code>hasattr</code> will probably be faster than repeatedly falling into an exception block.</p>
"
How to print without a newline or space,https://stackoverflow.com/questions/493386/how-to-print-without-a-newline-or-space,2508,python;trailing-newline,"<p>In Python 3, you can use the <code>sep=</code> and <code>end=</code> parameters of the <a href=""https://docs.python.org/library/functions.html#print"" rel=""noreferrer""><code>print</code></a> function:</p>

<p>To not add a newline to the end of the string:</p>

<pre><code>print('.', end='')
</code></pre>

<p>To not add a space between all the function arguments you want to print:</p>

<pre><code>print('a', 'b', 'c', sep='')
</code></pre>

<p>You can pass any string to either parameter, and you can use both parameters at the same time.</p>

<p>If you are having trouble with buffering, you can flush the output by adding <code>flush=True</code> keyword argument:</p>

<pre><code>print('.', end='', flush=True)
</code></pre>

<h2>Python 2.6 and 2.7</h2>

<p>From Python 2.6 you can either import the <code>print</code> function from Python 3 using the <a href=""https://docs.python.org/2/library/__future__.html"" rel=""noreferrer""><code>__future__</code> module</a>:</p>

<pre><code>from __future__ import print_function
</code></pre>

<p>which allows you to use the Python 3 solution above.</p>

<p>However, note that the <code>flush</code> keyword is not available in the version of the <code>print</code> function imported from <code>__future__</code> in Python 2; it only works in Python 3, more specifically 3.3 and later. In earlier versions you'll still need to flush manually with a call to <code>sys.stdout.flush()</code>. You'll also have to rewrite all other print statements in the file where you do this import.</p>

<p>Or you can use <a href=""https://docs.python.org/library/sys.html#sys.stdout"" rel=""noreferrer""><code>sys.stdout.write()</code></a></p>

<pre><code>import sys
sys.stdout.write('.')
</code></pre>

<p>You may also need to call</p>

<pre><code>sys.stdout.flush()
</code></pre>

<p>to ensure <code>stdout</code> is flushed immediately.</p>
"
Calling a function of a module by using its name (a string),https://stackoverflow.com/questions/3061/calling-a-function-of-a-module-by-using-its-name-a-string,2490,python;object;reflection,"<p>Given a module <code>foo</code> with method <code>bar</code>:</p>
<pre><code>import foo
bar = getattr(foo, 'bar')
result = bar()
</code></pre>
<p><a href=""https://docs.python.org/library/functions.html#getattr"" rel=""noreferrer""><code>getattr</code></a> can similarly be used on class instance bound methods, module-level methods, class methods... the list goes on.</p>
"
How can I randomly select (choose) an item from a list (get a random element)?,https://stackoverflow.com/questions/306400/how-can-i-randomly-select-choose-an-item-from-a-list-get-a-random-element,2429,python;list;random,"<p>Use <a href=""https://docs.python.org/library/random.html#random.choice"" rel=""noreferrer""><code>random.choice()</code></a>:</p>
<pre><code>import random

foo = ['a', 'b', 'c', 'd', 'e']
print(random.choice(foo))
</code></pre>
<p>For <a href=""https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator"" rel=""noreferrer"">cryptographically secure</a> random choices (e.g., for generating a passphrase from a wordlist), use <a href=""https://docs.python.org/library/secrets.html#secrets.choice"" rel=""noreferrer""><code>secrets.choice()</code></a>:</p>
<pre><code>import secrets

foo = ['battery', 'correct', 'horse', 'staple']
print(secrets.choice(foo))
</code></pre>
<p><code>secrets</code> is new in Python 3.6. On older versions of Python you can use the <a href=""https://docs.python.org/library/random.html#random.SystemRandom"" rel=""noreferrer""><code>random.SystemRandom</code></a> class:</p>
<pre><code>import random

secure_random = random.SystemRandom()
print(secure_random.choice(foo))
</code></pre>
"
How to remove an element from a list by index,https://stackoverflow.com/questions/627435/how-to-remove-an-element-from-a-list-by-index,2341,python;list;indexing,"<p>Use <code>del</code> and specify the index of the element you want to delete:</p>

<pre><code>&gt;&gt;&gt; a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; del a[-1]
&gt;&gt;&gt; a
[0, 1, 2, 3, 4, 5, 6, 7, 8]
</code></pre>

<p>Also supports slices:</p>

<pre><code>&gt;&gt;&gt; del a[2:4]
&gt;&gt;&gt; a
[0, 1, 4, 5, 6, 7, 8, 9]
</code></pre>

<p><a href=""http://docs.python.org/tutorial/datastructures.html#the-del-statement"" rel=""noreferrer"">Here</a> is the section from the tutorial.</p>
"
Delete a column from a Pandas DataFrame,https://stackoverflow.com/questions/13411544/delete-a-column-from-a-pandas-dataframe,2326,python;pandas;dataframe;del,"<p>As you've guessed, the right syntax is </p>

<pre><code>del df['column_name']
</code></pre>

<p>It's difficult to make <code>del df.column_name</code> work simply as the result of syntactic limitations in Python. <code>del df[name]</code> gets translated to <code>df.__delitem__(name)</code> under the covers by Python.</p>
"
How do I get the number of elements in a list (length of a list) in Python?,https://stackoverflow.com/questions/1712227/how-do-i-get-the-number-of-elements-in-a-list-length-of-a-list-in-python,2296,python;list,"<p>The <a href=""https://docs.python.org/3/library/functions.html#len"" rel=""noreferrer""><code>len()</code></a> function can be used with several different types in Python - both built-in types and library types. For example:</p>
<pre><code>&gt;&gt;&gt; len([1, 2, 3])
3
</code></pre>
"
How do I pad a string with zeros?,https://stackoverflow.com/questions/339007/how-do-i-pad-a-string-with-zeros,2243,python;string;zero-padding,"<p>To pad strings:</p>
<pre><code>&gt;&gt;&gt; n = '4'
&gt;&gt;&gt; print(n.zfill(3))
004
</code></pre>
<p>To pad numbers:</p>
<pre><code>&gt;&gt;&gt; n = 4
&gt;&gt;&gt; print(f'{n:03}') # Preferred method, python &gt;= 3.6
004
&gt;&gt;&gt; print('%03d' % n)
004
&gt;&gt;&gt; print(format(n, '03')) # python &gt;= 2.6
004
&gt;&gt;&gt; print('{0:03d}'.format(n))  # python &gt;= 2.6 + python 3
004
&gt;&gt;&gt; print('{foo:03d}'.format(foo=n))  # python &gt;= 2.6 + python 3
004
&gt;&gt;&gt; print('{:03d}'.format(n))  # python &gt;= 2.7 + python3
004
</code></pre>
<p><a href=""https://docs.python.org/3/library/string.html#format-string-syntax"" rel=""noreferrer"">String formatting documentation</a>.</p>
"
"What is the difference between venv, pyvenv, pyenv, virtualenv, virtualenvwrapper, pipenv, etc?",https://stackoverflow.com/questions/41573587/what-is-the-difference-between-venv-pyvenv-pyenv-virtualenv-virtualenvwrappe,2243,python;virtualenv;virtualenvwrapper;pyenv;python-venv,"<p><strong>This is my personal recommendation for beginners:</strong> start by learning <a href=""https://pypi.org/project/virtualenv/"" rel=""noreferrer""><code>virtualenv</code></a> and <a href=""https://pypi.org/project/pip/"" rel=""noreferrer""><code>pip</code></a>, tools which work with both Python 2 and 3 and in a variety of situations, and pick up other tools once you start needing them.</p>
<p>Now on to answer the question: what is the difference between these similarly named things: venv, virtualenv, etc?</p>
<h1>PyPI packages not in the standard library:</h1>
<ul>
<li><p><strong><a href=""https://pypi.python.org/pypi/virtualenv"" rel=""noreferrer""><code>virtualenv</code></a></strong> is a very popular tool that creates isolated Python environments for Python libraries. If you're not familiar with this tool, I highly recommend learning it, as it is a very useful tool.</p>
<p>It works by installing a bunch of files in a directory (eg: <code>env/</code>), and then modifying the <code>PATH</code> environment variable to prefix it with a custom <code>bin</code> directory (eg: <code>env/bin/</code>). An exact copy of the <code>python</code> or <code>python3</code> binary is placed in this directory, but Python is programmed to look for libraries relative to its path first, in the environment directory. It's not part of Python's standard library, but is officially blessed by the PyPA (Python Packaging Authority). Once activated, you can install packages in the virtual environment using <code>pip</code>.</p>
</li>
<li><p><strong><a href=""https://github.com/pyenv/pyenv"" rel=""noreferrer""><code>pyenv</code></a></strong> is used to isolate Python versions. For example, you may want to test your code against Python 2.7, 3.6, 3.7 and 3.8, so you'll need a way to switch between them. Once activated, it prefixes the <code>PATH</code> environment variable with <code>~/.pyenv/shims</code>, where there are special files matching the Python commands (<code>python</code>, <code>pip</code>). These are not copies of the Python-shipped commands; they are special scripts that decide on the fly which version of Python to run based on the <code>PYENV_VERSION</code> environment variable, or the <code>.python-version</code> file, or the <code>~/.pyenv/version</code> file. <code>pyenv</code> also makes the process of downloading and installing multiple Python versions easier, using the command <code>pyenv install</code>.</p>
</li>
<li><p><strong><a href=""https://github.com/pyenv/pyenv-virtualenv"" rel=""noreferrer""><code>pyenv-virtualenv</code></a></strong> is a plugin for <code>pyenv</code> by the same author as <code>pyenv</code>, to allow you to use <code>pyenv</code> and <code>virtualenv</code> at the same time conveniently. However, if you're using Python 3.3 or later, <code>pyenv-virtualenv</code> will try to run <code>python -m venv</code> if it is available, instead of <code>virtualenv</code>. You can use <code>virtualenv</code> and <code>pyenv</code> together without <code>pyenv-virtualenv</code>, if you don't want the convenience features.</p>
</li>
<li><p><strong><a href=""https://pypi.python.org/pypi/virtualenvwrapper"" rel=""noreferrer""><code>virtualenvwrapper</code></a></strong> is a set of extensions to <code>virtualenv</code> (see <a href=""http://virtualenvwrapper.readthedocs.io/en/latest/"" rel=""noreferrer"">docs</a>). It gives you commands like <code>mkvirtualenv</code>, <code>lssitepackages</code>, and especially <code>workon</code> for switching between different <code>virtualenv</code> directories. This tool is especially useful if you want multiple <code>virtualenv</code> directories.</p>
</li>
<li><p><strong><a href=""https://github.com/pyenv/pyenv-virtualenvwrapper"" rel=""noreferrer""><code>pyenv-virtualenvwrapper</code></a></strong> is a plugin for <code>pyenv</code> by the same author as <code>pyenv</code>, to conveniently integrate <code>virtualenvwrapper</code> into <code>pyenv</code>.</p>
</li>
<li><p><strong><a href=""https://pypi.python.org/pypi/pipenv"" rel=""noreferrer""><code>pipenv</code></a></strong> aims to combine <code>Pipfile</code>, <code>pip</code> and <code>virtualenv</code> into one command on the command-line. The <code>virtualenv</code> directory typically gets placed in <code>~/.local/share/virtualenvs/XXX</code>, with <code>XXX</code> being a hash of the path of the project directory. This is different from <code>virtualenv</code>, where the directory is typically in the current working directory. <code>pipenv</code> is meant to be used when developing Python applications (as opposed to libraries). There are alternatives to <code>pipenv</code>, such as <code>poetry</code>, which I won't list here since this question is only about the packages that are similarly named.</p>
</li>
</ul>
<h1>Standard library:</h1>
<ul>
<li><p><strong><code>pyvenv</code></strong> (not to be confused with <strong><a href=""https://github.com/pyenv/pyenv"" rel=""noreferrer""><code>pyenv</code></a></strong> in the previous section) is a script shipped with Python 3.3 to 3.7. It was <a href=""https://docs.python.org/3/whatsnew/3.8.html#api-and-feature-removals"" rel=""noreferrer"">removed from Python 3.8</a> as it had problems (not to mention the confusing name). Running <code>python3 -m venv</code> has exactly the same effect as <code>pyvenv</code>.</p>
</li>
<li><p><strong><a href=""https://docs.python.org/3/library/venv.html"" rel=""noreferrer""><code>venv</code></a></strong> is a package shipped with Python 3, which you can run using <code>python3 -m venv</code> (although for some reason some distros separate it out into a separate distro package, such as <code>python3-venv</code> on Ubuntu/Debian). It serves the same purpose as <code>virtualenv</code>, but only has a subset of its features (<a href=""https://virtualenv.pypa.io/en/latest/"" rel=""noreferrer"">see a comparison here</a>). <code>virtualenv</code> continues to be more popular than <code>venv</code>, especially since the former supports both Python 2 and 3.</p>
</li>
</ul>
"
Delete an element from a dictionary,https://stackoverflow.com/questions/5844672/delete-an-element-from-a-dictionary,2237,python;dictionary;del,"<p>The <a href=""http://docs.python.org/reference/simple_stmts.html#the-del-statement"" rel=""noreferrer""><code>del</code> statement</a> removes an element:</p>
<pre><code>del d[key]
</code></pre>
<p>Note that this mutates the existing dictionary, so the contents of the dictionary changes for anybody else who has a reference to the same instance. To return a <em>new</em> dictionary, make a copy of the dictionary:</p>
<pre><code>def removekey(d, key):
    r = dict(d)
    del r[key]
    return r
</code></pre>
<p>The <code>dict()</code> constructor makes a <em>shallow copy</em>. To make a deep copy, see the <a href=""https://docs.python.org/library/copy.html"" rel=""noreferrer""><code>copy</code> module</a>.</p>
<hr />
<p>Note that making a copy for every dict <code>del</code>/assignment/etc. means you're going from constant time to linear time, and also using linear space. For small dicts, this is not a problem. But if you're planning to make lots of copies of large dicts, you probably want a different data structure, like a HAMT (as described in <a href=""https://stackoverflow.com/a/50341031/908494"">this answer</a>).</p>
"
Determine the type of an object?,https://stackoverflow.com/questions/2225038/determine-the-type-of-an-object,2219,python;dictionary;types;typeof,"<p>There are two built-in functions that help you identify the type of an object. You can use <a href=""http://docs.python.org/3/library/functions.html#type"" rel=""noreferrer""><code>type()</code></a>  if you need the exact type of an object, and <a href=""http://docs.python.org/3/library/functions.html#isinstance"" rel=""noreferrer""><code>isinstance()</code></a> to <em>check</em> an object’s type against something. Usually, you want to use <code>isinstance()</code> most of the times since it is very robust and also supports type inheritance.</p>
<hr />
<p>To get the actual type of an object, you use the built-in <a href=""http://docs.python.org/3/library/functions.html#type"" rel=""noreferrer""><code>type()</code></a> function. Passing an object as the only parameter will return the type object of that object:</p>
<pre><code>&gt;&gt;&gt; type([]) is list
True
&gt;&gt;&gt; type({}) is dict
True
&gt;&gt;&gt; type('') is str
True
&gt;&gt;&gt; type(0) is int
True
</code></pre>
<p>This of course also works for custom types:</p>
<pre><code>&gt;&gt;&gt; class Test1 (object):
        pass
&gt;&gt;&gt; class Test2 (Test1):
        pass
&gt;&gt;&gt; a = Test1()
&gt;&gt;&gt; b = Test2()
&gt;&gt;&gt; type(a) is Test1
True
&gt;&gt;&gt; type(b) is Test2
True
</code></pre>
<p>Note that <code>type()</code> will only return the immediate type of the object, but won’t be able to tell you about type inheritance.</p>
<pre><code>&gt;&gt;&gt; type(b) is Test1
False
</code></pre>
<p>To cover that, you should use the <a href=""http://docs.python.org/3/library/functions.html#isinstance"" rel=""noreferrer""><code>isinstance</code></a> function. This of course also works for built-in types:</p>
<pre><code>&gt;&gt;&gt; isinstance(b, Test1)
True
&gt;&gt;&gt; isinstance(b, Test2)
True
&gt;&gt;&gt; isinstance(a, Test1)
True
&gt;&gt;&gt; isinstance(a, Test2)
False
&gt;&gt;&gt; isinstance([], list)
True
&gt;&gt;&gt; isinstance({}, dict)
True
</code></pre>
<p><code>isinstance()</code> is usually the preferred way to ensure the type of an object because it will also accept derived types. So unless you actually need the type object (for whatever reason), using <code>isinstance()</code> is preferred over <code>type()</code>.</p>
<p>The second parameter of <code>isinstance()</code> also accepts a tuple of types, so it’s possible to check for multiple types at once. <code>isinstance</code> will then return true, if the object is of any of those types:</p>
<pre><code>&gt;&gt;&gt; isinstance([], (tuple, list, set))
True
</code></pre>
"
How do I count the occurrences of a list item?,https://stackoverflow.com/questions/2600191/how-do-i-count-the-occurrences-of-a-list-item,2218,python;list;count,"<p>If you only want a single item's count, use the <code>count</code> method:</p>
<pre><code>&gt;&gt;&gt; [1, 2, 3, 4, 1, 4, 1].count(1)
3
</code></pre>
<hr />
<h4><strong>Important: this is very slow if you are counting <em>multiple</em> different items</strong></h4>
<p>Each <code>count</code> call goes over the entire list of <code>n</code> elements. Calling <code>count</code> in a loop <code>n</code> times means <code>n * n</code> total checks, which can be catastrophic for performance.</p>
<p>If you want to count multiple items, use <a href=""https://stackoverflow.com/a/5829377/365102""><code>Counter</code></a>, which only does <code>n</code> total checks.</p>
"
How to check if the string is empty in Python?,https://stackoverflow.com/questions/9573244/how-to-check-if-the-string-is-empty-in-python,2213,python;string;boolean;is-empty;comparison-operators,"<p>Empty strings are &quot;falsy&quot; (<a href=""http://docs.python.org/2/library/stdtypes.html#truth-value-testing"" rel=""noreferrer"">python 2</a> or <a href=""https://docs.python.org/3/library/stdtypes.html#truth-value-testing"" rel=""noreferrer"">python 3</a> reference), which means they are considered false in a Boolean context, so you can just do this:</p>
<pre><code>if not myString:
</code></pre>
<p>This is the preferred way if you know that your variable is a string.  If your variable could also be some other type then you should use:</p>
<pre><code>if myString == &quot;&quot;:
</code></pre>
<p>See the documentation on <a href=""http://docs.python.org/library/stdtypes.html#truth-value-testing"" rel=""noreferrer"">Truth Value Testing</a> for other values that are false in Boolean contexts.</p>
"
Why is reading lines from stdin much slower in C++ than Python?,https://stackoverflow.com/questions/9371238/why-is-reading-lines-from-stdin-much-slower-in-c-than-python,2199,python;c++;benchmarking;iostream;getline,"<h3>tl;dr: Because of different default settings in C++ requiring more system calls.</h3>
<p>By default, <code>cin</code> is synchronized with stdio, which causes it to avoid any input buffering.  If you add this to the top of your main, you should see much better performance:</p>
<pre><code>std::ios_base::sync_with_stdio(false);
</code></pre>
<p>Normally, when an input stream is buffered, instead of reading one character at a time, the stream will be read in larger chunks.  This reduces the number of system calls, which are typically relatively expensive.  However, since the <code>FILE*</code> based <code>stdio</code> and <code>iostreams</code> often have separate implementations and therefore separate buffers, this could lead to a problem if both were used together.  For example:</p>
<pre><code>int myvalue1;
cin &gt;&gt; myvalue1;
int myvalue2;
scanf(&quot;%d&quot;,&amp;myvalue2);
</code></pre>
<p>If more input was read by <code>cin</code> than it actually needed, then the second integer value wouldn't be available for the <code>scanf</code> function, which has its own independent buffer.  This would lead to unexpected results.</p>
<p>To avoid this, by default, streams are synchronized with <code>stdio</code>.  One common way to achieve this is to have <code>cin</code> read each character one at a time as needed using <code>stdio</code> functions.  Unfortunately, this introduces a lot of overhead.  For small amounts of input, this isn't a big problem, but when you are reading millions of lines, the performance penalty is significant.</p>
<p>Fortunately, the library designers decided that you should also be able to disable this feature to get improved performance if you knew what you were doing, so they provided the <a href=""http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio"" rel=""noreferrer""><code>sync_with_stdio</code></a> method. From this link (emphasis added):</p>
<blockquote>
<p>If the synchronization is turned off, the C++ standard streams are allowed to buffer their I/O independently, <strong>which may be considerably faster in some cases</strong>.</p>
</blockquote>
"
Why is it string.join(list) instead of list.join(string)?,https://stackoverflow.com/questions/493819/why-is-it-string-joinlist-instead-of-list-joinstring,2151,python;string;list,"<p>It's because any iterable can be joined (e.g, list, tuple, dict, set), but its contents and the &quot;joiner&quot; <em>must be</em> strings.</p>
<p>For example:</p>
<pre><code>'_'.join(['welcome', 'to', 'stack', 'overflow'])
'_'.join(('welcome', 'to', 'stack', 'overflow'))
</code></pre>
<pre><code>'welcome_to_stack_overflow'
</code></pre>
<p>Using something other than strings will raise the following error:</p>
<blockquote>
<p>TypeError: sequence item 0: expected str instance, int found</p>
</blockquote>
"
How do I append to a file?,https://stackoverflow.com/questions/4706499/how-do-i-append-to-a-file,2134,python;file;append,"<p>Set the mode in <a href=""https://docs.python.org/3/library/functions.html#open"" rel=""noreferrer""><code>open()</code></a> to <code>&quot;a&quot;</code> (append) instead of <code>&quot;w&quot;</code> (write):</p>
<pre class=""lang-py prettyprint-override""><code>with open(&quot;test.txt&quot;, &quot;a&quot;) as myfile:
    myfile.write(&quot;appended text&quot;)
</code></pre>
<p>The <a href=""https://docs.python.org/3/library/functions.html#open"" rel=""noreferrer"">documentation</a> lists all the available modes.</p>
"
Is there a way to run Python on Android?,https://stackoverflow.com/questions/101754/is-there-a-way-to-run-python-on-android,2083,android;python;jython;ase;android-scripting,"<p>One way is to use <a href=""http://kivy.org/"" rel=""noreferrer"">Kivy</a>:</p>

<blockquote>
  <p>Open source Python library for rapid development of applications
  that make use of innovative user interfaces, such as multi-touch apps.</p>
</blockquote>

<p></p>

<blockquote>
  <p>Kivy runs on Linux, Windows, OS X, Android and iOS. You can run the same [python] code on all supported platforms.</p>
</blockquote>

<p><a href=""https://play.google.com/store/apps/details?id=org.kivy.showcase"" rel=""noreferrer"">Kivy Showcase app</a>  </p>
"
Static methods in Python?,https://stackoverflow.com/questions/735975/static-methods-in-python,2062,python;static-methods,"<p>Yep, using the <a href=""https://docs.python.org/3/library/functions.html#staticmethod"" rel=""noreferrer"" title=""staticmethod""><code>staticmethod</code></a> decorator:</p>
<pre><code>class MyClass(object):
    @staticmethod
    def the_static_method(x):
        print(x)

MyClass.the_static_method(2)  # outputs 2
</code></pre>
<p>Note that some code might use the old method of defining a static method, using <code>staticmethod</code> as a function rather than a decorator. This should only be used if you have to support ancient versions of Python (2.2 and 2.3):</p>
<pre><code>class MyClass(object):
    def the_static_method(x):
        print(x)
    the_static_method = staticmethod(the_static_method)

MyClass.the_static_method(2)  # outputs 2
</code></pre>
<p>This is entirely identical to the first example (using <code>@staticmethod</code>), just not using the nice decorator syntax.</p>
<p>Finally, use <a href=""https://docs.python.org/3/library/functions.html#staticmethod"" rel=""noreferrer"" title=""staticmethod""><code>staticmethod</code></a> sparingly! There are very few situations where static-methods are necessary in Python, and I've seen them used many times where a separate &quot;top-level&quot; function would have been clearer.</p>
<hr />
<p><a href=""https://docs.python.org/3/library/functions.html#staticmethod"" rel=""noreferrer"" title=""staticmethod"">The following is verbatim from the documentation:</a>:</p>
<blockquote>
<p>A static method does not receive an implicit first argument. To declare a static method, use this idiom:</p>
<pre><code>class C:
    @staticmethod
    def f(arg1, arg2, ...): ...
</code></pre>
<p>The @staticmethod form is a function <a href=""https://docs.python.org/3/glossary.html#term-decorator"" rel=""noreferrer"" title=""term-decorator""><em>decorator</em></a> – see the description of function definitions in <a href=""https://docs.python.org/3/reference/compound_stmts.html#function"" rel=""noreferrer"" title=""Function definitions""><em>Function definitions</em></a> for details.</p>
<p>It can be called either on the class (such as <code>C.f()</code>) or on an instance (such as <code>C().f()</code>). The instance is ignored except for its class.</p>
<p>Static methods in Python are similar to those found in Java or C++. For a more advanced concept, see <a href=""https://docs.python.org/3/library/functions.html#classmethod"" rel=""noreferrer"" title=""classmethod""><code>classmethod()</code></a>.</p>
<p>For more information on static methods, consult the documentation on the standard type hierarchy in <a href=""https://docs.python.org/3/reference/datamodel.html#types"" rel=""noreferrer"" title=""types""><em>The standard type hierarchy</em></a>.</p>
<p>New in version 2.2.</p>
<p>Changed in version 2.4: Function decorator syntax added.</p>
</blockquote>
"
Installing specific package version with pip,https://stackoverflow.com/questions/5226311/installing-specific-package-version-with-pip,2060,python;mysql;pip;pypi;mysql-python,"<p><strong>TL;DR</strong>:</p>
<p><strong>Update as of 2022-12-28</strong>:</p>
<p><code>pip install --force-reinstall -v</code></p>
<p>For example: <code>pip install --force-reinstall -v &quot;MySQL_python==1.2.2&quot;</code></p>
<p>What these options mean:</p>
<ul>
<li><code>--force-reinstall</code> is an option to reinstall all packages even if they are already up-to-date.</li>
<li><code>-v</code> is for verbose. You can combine for even more verbosity (i.e. <code>-vv</code>) up to 3 times (e.g. <code>--force-reinstall -vvv</code>).</li>
</ul>
<p>Thanks to <a href=""https://stackoverflow.com/users/968132/peter"">@Peter</a> for highlighting this (and it seems that the context of the question has broadened given the time when the question was first asked!), <a href=""https://pip.pypa.io/en/stable/cli/pip_install/#cmdoption-I"" rel=""noreferrer"">the documentation for Python</a> discusses a caveat with using <code>-I</code>, in that it can break your installation if it was installed with a different package manager or if if your package is/was a different version.</p>
<hr />
<p>Original answer:</p>
<ul>
<li><code>pip install -Iv</code> (i.e. <code>pip install -Iv MySQL_python==1.2.2</code>)</li>
</ul>
<hr />
<p>What these options mean:</p>
<ul>
<li><code>-I</code> stands for <code>--ignore-installed</code> which will ignore the installed packages, overwriting them.</li>
<li><code>-v</code> is for verbose. You can combine for even more verbosity (i.e. <code>-vv</code>) up to 3 times (e.g. <code>-Ivvv</code>).</li>
</ul>
<p>For more information, see <code>pip install --help</code></p>
<p>First, I see two issues with what you're trying to do. Since you already have an installed version, you should either uninstall the current existing driver or use <code>pip install -I MySQL_python==1.2.2</code></p>
<p>However, you'll soon find out that this doesn't work. If you look at pip's installation log, or if you do a <code>pip install -Iv MySQL_python==1.2.2</code> you'll find that the PyPI URL link does not work for MySQL_python v1.2.2. You can verify this here: <a href=""http://pypi.python.org/pypi/MySQL-python/1.2.2"" rel=""noreferrer"">http://pypi.python.org/pypi/MySQL-python/1.2.2</a></p>
<p>The download link 404s and the fallback URL links are re-directing infinitely due to sourceforge.net's recent upgrade and PyPI's stale URL.</p>
<p>So to properly install the driver, you can follow these steps:</p>
<pre><code>pip uninstall MySQL_python
pip install -Iv http://sourceforge.net/projects/mysql-python/files/mysql-python/1.2.2/MySQL-python-1.2.2.tar.gz/download
</code></pre>
"
How do I split the definition of a long string over multiple lines?,https://stackoverflow.com/questions/10660435/how-do-i-split-the-definition-of-a-long-string-over-multiple-lines,2053,python;string;multiline;multilinestring,"<p>Are you talking about multi-line strings? Easy, use triple quotes to start and end them.</p>

<pre><code>s = """""" this is a very
        long string if I had the
        energy to type more and more ...""""""
</code></pre>

<p>You can use single quotes too (3 of them of course at start and end) and treat the resulting string <code>s</code> just like any other string.</p>

<p><strong>NOTE</strong>: Just as with any string, anything between the starting and ending quotes becomes part of the string, so this example has a leading blank (as pointed out by @root45). This string will also contain both blanks and newlines.</p>

<p>I.e.,:</p>

<pre><code>' this is a very\n        long string if I had the\n        energy to type more and more ...'
</code></pre>

<p>Finally, one can also construct long lines in Python like this:</p>

<pre><code> s = (""this is a very""
      ""long string too""
      ""for sure ...""
     )
</code></pre>

<p>which will <strong>not</strong> include any extra blanks or newlines (this is a deliberate example showing what the effect of skipping blanks will result in):</p>

<pre><code>'this is a verylong string toofor sure ...'
</code></pre>

<p>No commas required, simply place the strings to be joined together into a pair of parenthesis and be sure to account for any needed blanks and newlines.</p>
"
How to prettyprint a JSON file?,https://stackoverflow.com/questions/12943819/how-to-prettyprint-a-json-file,2038,python;json;formatting;pretty-print,"<p>Use the <code>indent=</code> parameter of <a href=""https://docs.python.org/3/library/json.html#json.dump"" rel=""noreferrer""><code>json.dump()</code></a> or <a href=""https://docs.python.org/3/library/json.html#json.dumps"" rel=""noreferrer""><code>json.dumps()</code></a> to specify how many spaces to indent by:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; your_json = '[&quot;foo&quot;, {&quot;bar&quot;: [&quot;baz&quot;, null, 1.0, 2]}]'
&gt;&gt;&gt; parsed = json.loads(your_json)
&gt;&gt;&gt; print(json.dumps(parsed, indent=4))
[
    &quot;foo&quot;,
    {
        &quot;bar&quot;: [
            &quot;baz&quot;,
            null,
            1.0,
            2
        ]
    }
]
</code></pre>
<p>To parse a file, use <a href=""https://docs.python.org/3/library/json.html#json.load"" rel=""noreferrer""><code>json.load()</code></a>:</p>
<pre><code>with open('filename.txt', 'r') as handle:
    parsed = json.load(handle)
</code></pre>
"
Getting the class name of an instance,https://stackoverflow.com/questions/510972/getting-the-class-name-of-an-instance,2025,python;introspection;instanceof;python-datamodel,"<p>Have you tried the <a href=""https://docs.python.org/library/stdtypes.html#definition.__name__"" rel=""noreferrer""><code>__name__</code> attribute</a> of the class? ie <code>type(x).__name__</code> will give you the name of the class, which I think is what you want.</p>

<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; x = itertools.count(0)
&gt;&gt;&gt; type(x).__name__
'count'
</code></pre>

<p>If you're still using Python 2, note that the above method works with <a href=""https://wiki.python.org/moin/NewClassVsClassicClass"" rel=""noreferrer"">new-style classes</a> only (in Python 3+ all classes are ""new-style"" classes). Your code might use some old-style classes. The following works for both:</p>

<pre><code>x.__class__.__name__
</code></pre>
"
How do I get the row count of a Pandas DataFrame?,https://stackoverflow.com/questions/15943769/how-do-i-get-the-row-count-of-a-pandas-dataframe,2016,python;pandas;dataframe,"<p>For a dataframe <code>df</code>, one can use any of the following:</p>
<ul>
<li><code>len(df.index)</code></li>
<li><code>df.shape[0]</code></li>
<li><code>df[df.columns[0]].count()</code> (== <a href=""https://pandas.pydata.org/docs/reference/api/pandas.Series.count.html"" rel=""noreferrer"">number of non-NaN values</a> in first column)</li>
</ul>
<p><a href=""https://i.sstatic.net/wEzue.png"" rel=""noreferrer""><img src=""https://i.sstatic.net/wEzue.png"" alt=""Performance plot"" /></a></p>
<hr />
<p>Code to reproduce the plot:</p>
<pre class=""lang-py prettyprint-override""><code>import numpy as np
import pandas as pd
import perfplot

perfplot.save(
    &quot;out.png&quot;,
    setup=lambda n: pd.DataFrame(np.arange(n * 3).reshape(n, 3)),
    n_range=[2**k for k in range(25)],
    kernels=[
        lambda df: len(df.index),
        lambda df: df.shape[0],
        lambda df: df[df.columns[0]].count(),
    ],
    labels=[&quot;len(df.index)&quot;, &quot;df.shape[0]&quot;, &quot;df[df.columns[0]].count()&quot;],
    xlabel=&quot;Number of rows&quot;,
)
</code></pre>
"
How do I check if a string represents a number (float or int)?,https://stackoverflow.com/questions/354038/how-do-i-check-if-a-string-represents-a-number-float-or-int,2015,python;casting;floating-point;type-conversion;integer,"<blockquote>
  <p>Which, not only is ugly and slow</p>
</blockquote>

<p>I'd dispute both.</p>

<p>A regex or other string parsing method would be uglier and slower.  </p>

<p>I'm not sure that anything much could be faster than the above.  It calls the function and returns.  Try/Catch doesn't introduce much overhead because the most common exception is caught without an extensive search of stack frames.</p>

<p>The issue is that any numeric conversion function has two kinds of results</p>

<ul>
<li>A number, if the number is valid</li>
<li>A status code (e.g., via errno) or exception to show that no valid number could be parsed.</li>
</ul>

<p>C (as an example) hacks around this a number of ways.  Python lays it out clearly and explicitly.</p>

<p>I think your code for doing this is perfect.</p>
"
Meaning of @classmethod and @staticmethod for beginner,https://stackoverflow.com/questions/12179271/meaning-of-classmethod-and-staticmethod-for-beginner,1995,python;oop;static-methods;class-method,"<p>Though <code>classmethod</code> and <code>staticmethod</code> are quite similar, there's a slight difference in usage for both entities: <code>classmethod</code> must have a reference to a class object as the first parameter, whereas <code>staticmethod</code> can have no parameters at all.</p>
<h2>Example</h2>
<pre><code>class Date(object):
    
    def __init__(self, day=0, month=0, year=0):
        self.day = day
        self.month = month
        self.year = year

    @classmethod
    def from_string(cls, date_as_string):
        day, month, year = map(int, date_as_string.split('-'))
        date1 = cls(day, month, year)
        return date1

    @staticmethod
    def is_date_valid(date_as_string):
        day, month, year = map(int, date_as_string.split('-'))
        return day &lt;= 31 and month &lt;= 12 and year &lt;= 3999

date2 = Date.from_string('11-09-2012')
is_date = Date.is_date_valid('11-09-2012')
</code></pre>
<h2>Explanation</h2>
<p>Let's assume an example of a class, dealing with date information (this will be our boilerplate):</p>
<pre><code>class Date(object):
    
    def __init__(self, day=0, month=0, year=0):
        self.day = day
        self.month = month
        self.year = year
</code></pre>
<p>This class obviously could be used to store information about certain dates (without timezone information; let's assume all dates are presented in UTC).</p>
<p>Here we have <code>__init__</code>, a typical initializer of Python class instances, which receives arguments as a typical instance method, having the first non-optional argument (<code>self</code>) that holds a reference to a newly created instance.</p>
<p><strong>Class Method</strong></p>
<p>We have some tasks that can be nicely done using <code>classmethod</code>s.</p>
<p><em>Let's assume that we want to create a lot of <code>Date</code> class instances having date information coming from an outer source encoded as a string with format 'dd-mm-yyyy'. Suppose we have to do this in different places in the source code of our project.</em></p>
<p>So what we must do here is:</p>
<ol>
<li>Parse a string to receive day, month and year as three integer variables or a 3-item tuple consisting of that variable.</li>
<li>Instantiate <code>Date</code> by passing those values to the initialization call.</li>
</ol>
<p>This will look like:</p>
<pre><code>day, month, year = map(int, string_date.split('-'))
date1 = Date(day, month, year)
</code></pre>
<p>For this purpose, C++ can implement such a feature with overloading, but Python lacks this overloading. Instead, we can use <code>classmethod</code>. Let's create another <em>constructor</em>.</p>
<pre><code>    @classmethod
    def from_string(cls, date_as_string):
        day, month, year = map(int, date_as_string.split('-'))
        date1 = cls(day, month, year)
        return date1

date2 = Date.from_string('11-09-2012')
</code></pre>
<p>Let's look more carefully at the above implementation, and review what advantages we have here:</p>
<ol>
<li>We've implemented date string parsing in one place and it's reusable now.</li>
<li>Encapsulation works fine here (if you think that you could implement string parsing as a single function elsewhere, this solution fits the OOP paradigm far better).</li>
<li><code>cls</code> is the <strong>class itself</strong>, not an instance of the class. It's pretty cool because if we inherit our <code>Date</code> class, all children will have <code>from_string</code> defined also.</li>
</ol>
<p><strong>Static method</strong></p>
<p>What about <code>staticmethod</code>? It's pretty similar to <code>classmethod</code> but doesn't take any obligatory parameters (like a class method or instance method does).</p>
<p>Let's look at the next use case.</p>
<p><em>We have a date string that we want to validate somehow. This task is also logically bound to the <code>Date</code> class we've used so far, but doesn't require instantiation of it.</em></p>
<p>Here is where <code>staticmethod</code> can be useful. Let's look at the next piece of code:</p>
<pre><code>    @staticmethod
    def is_date_valid(date_as_string):
        day, month, year = map(int, date_as_string.split('-'))
        return day &lt;= 31 and month &lt;= 12 and year &lt;= 3999

# usage:
is_date = Date.is_date_valid('11-09-2012')
</code></pre>
<p>So, as we can see from usage of <code>staticmethod</code>, we don't have any access to what the class is---it's basically just a function,  called syntactically like a method, but without access to the object and its internals (fields and other methods), which <code>classmethod</code> does have.</p>
"
What&#39;s the canonical way to check for type in Python?,https://stackoverflow.com/questions/152580/whats-the-canonical-way-to-check-for-type-in-python,1994,python;types,"<p>Use <a href=""https://docs.python.org/library/functions.html#isinstance"" rel=""noreferrer""><code>isinstance</code></a> to check if <code>o</code> is an instance of <code>str</code> or any subclass of <code>str</code>:</p>
<pre><code>if isinstance(o, str):
</code></pre>
<p>To check if the type of <code>o</code> is exactly <code>str</code>, <em>excluding subclasses of <code>str</code></em>:</p>
<pre><code>if type(o) is str:
</code></pre>
<p>See <a href=""http://docs.python.org/library/functions.html"" rel=""noreferrer"">Built-in Functions</a> in the Python Library Reference for relevant information.</p>
<hr />
<h4>Checking for strings in Python 2</h4>
<p>For Python 2, this is a better way to check if <code>o</code> is a string:</p>
<pre><code>if isinstance(o, basestring):
</code></pre>
<p>because this will also catch Unicode strings. <a href=""https://docs.python.org/2/library/functions.html#unicode"" rel=""noreferrer""><code>unicode</code></a> is not a subclass of <code>str</code>; both <code>str</code> and <code>unicode</code> are subclasses of <a href=""https://docs.python.org/2/library/functions.html#basestring"" rel=""noreferrer""><code>basestring</code></a>. In Python 3, <code>basestring</code> no longer exists since there's <a href=""https://docs.python.org/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit"" rel=""noreferrer"">a strict separation</a> of strings (<a href=""https://docs.python.org/3/library/functions.html#func-str"" rel=""noreferrer""><code>str</code></a>) and binary data (<a href=""https://docs.python.org/3/library/functions.html#func-bytes"" rel=""noreferrer""><code>bytes</code></a>).</p>
<p>Alternatively, <code>isinstance</code> accepts a tuple of classes. This will return <code>True</code> if <code>o</code> is an instance of any subclass of any of <code>(str, unicode)</code>:</p>
<pre><code>if isinstance(o, (str, unicode)):
</code></pre>
"
How can I install packages using pip according to the requirements.txt file from a local directory?,https://stackoverflow.com/questions/7225900/how-can-i-install-packages-using-pip-according-to-the-requirements-txt-file-from,1969,python;virtualenv;pip,"<p>This works for me:</p>
<pre><code>$ pip install -r requirements.txt --no-index --find-links file:///tmp/packages
</code></pre>
<p><code>--no-index</code> - Ignore package index (only look at <code>--find-links</code> URLs instead).</p>
<p><code>-f, --find-links &lt;URL&gt;</code> - If <code>&lt;URL&gt;</code> is a URL or a path to an HTML file, then parse for links to archives. If <code>&lt;URL&gt;</code> is a local path or a <code>file://</code> URL that's a directory, then look for archives in the directory listing.</p>
"
How do I declare custom exceptions in modern Python?,https://stackoverflow.com/questions/1319615/how-do-i-declare-custom-exceptions-in-modern-python,1954,python;python-3.x;exception;python-dataclasses;pep352,"<p>Maybe I missed the question, but why not:</p>
<pre class=""lang-py prettyprint-override""><code>class MyException(Exception):
    pass
</code></pre>
<p>To override something (or pass extra args), do this:</p>
<pre class=""lang-py prettyprint-override""><code>class ValidationError(Exception):
    def __init__(self, message, errors):            
        # Call the base class constructor with the parameters it needs
        super().__init__(message)
            
        # Now for your custom code...
        self.errors = errors
</code></pre>
<p>That way you could pass dict of error messages to the second param, and get to it later with <code>e.errors</code>.</p>
<p>In Python 2, you have to use this slightly more complex form of <code>super()</code>:</p>
<pre class=""lang-py prettyprint-override""><code>super(ValidationError, self).__init__(message)
</code></pre>
"
fatal error: Python.h: No such file or directory,https://stackoverflow.com/questions/21530577/fatal-error-python-h-no-such-file-or-directory,1929,python;gcc;python-c-api,"<p>I managed to solve this issue and generate the .so file in one command </p>

<pre><code>gcc -shared -o UtilcS.so
-fPIC -I/usr/include/python2.7 -lpython2.7  utilsmodule.c
</code></pre>
"
Generate random integers between 0 and 9,https://stackoverflow.com/questions/3996904/generate-random-integers-between-0-and-9,1929,python;random;integer,"<p>Try <a href=""https://docs.python.org/3/library/random.html#random.randrange"" rel=""noreferrer""><code>random.randrange</code></a>:</p>
<pre><code>from random import randrange
print(randrange(10))
</code></pre>
"
What is the meaning of single and double underscore before an object name?,https://stackoverflow.com/questions/1301346/what-is-the-meaning-of-single-and-double-underscore-before-an-object-name,1909,python;oop;naming-conventions;identifier,"<h2>Single Underscore</h2>
<p>In a class, names with a leading underscore indicate to other programmers that the attribute or method is intended to be be used inside that class. However, privacy is not <em>enforced</em> in any way.
Using leading underscores for functions in a module indicates it should not be imported from somewhere else.</p>
<p>From the <a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""noreferrer"">PEP-8</a> style guide:</p>
<blockquote>
<p><code>_single_leading_underscore</code>: weak &quot;internal use&quot; indicator. E.g. <code>from M import *</code> does not import objects whose name starts with an underscore.</p>
</blockquote>
<h2>Double Underscore (Name Mangling)</h2>
<p>From <a href=""https://docs.python.org/3/tutorial/classes.html#private-variables"" rel=""noreferrer"">the Python docs</a>:</p>
<blockquote>
<p>Any identifier of the form <code>__spam</code> (at least two leading underscores, at most one trailing underscore) is textually replaced with <code>_classname__spam</code>, where <code>classname</code> is the current class name with leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identifier, so it can be used to define class-private instance and class variables, methods, variables stored in globals, and even variables stored in instances. private to this class on instances of other classes.</p>
</blockquote>
<p>And a warning from the same page:</p>
<blockquote>
<p>Name mangling is intended to give classes an easy way to define “private” instance variables and methods, without having to worry about instance variables defined by derived classes, or mucking with instance variables by code outside the class. Note that the mangling rules are designed mostly to avoid accidents; <em>it still is possible for a determined soul to access or modify a variable that is considered private.</em></p>
</blockquote>
<h2>Example</h2>
<pre><code>&gt;&gt;&gt; class MyClass():
...     def __init__(self):
...             self.__superprivate = &quot;Hello&quot;
...             self._semiprivate = &quot;, world!&quot;
...
&gt;&gt;&gt; mc = MyClass()
&gt;&gt;&gt; print mc.__superprivate
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
AttributeError: myClass instance has no attribute '__superprivate'
&gt;&gt;&gt; print mc._semiprivate
, world!
&gt;&gt;&gt; print mc.__dict__
{'_MyClass__superprivate': 'Hello', '_semiprivate': ', world!'}
</code></pre>
"
Relative imports for the billionth time,https://stackoverflow.com/questions/14132789/relative-imports-for-the-billionth-time,1881,python;python-import;relative-path;python-packaging;relative-import,"<p><strong>Script vs. Module</strong></p>
<p>Here's an explanation.  The short version is that there is a big difference between directly running a Python file, and importing that file from somewhere else.  <strong>Just knowing what directory a file is in does not determine what package Python thinks it is in.</strong>  That depends, additionally, on how you load the file into Python (by running or by importing).</p>
<p>There are two ways to load a Python file: as the top-level script, or as a
module.  A file is loaded as the top-level script if you execute it directly, for instance by typing <code>python myfile.py</code> on the command line.  It is loaded as a module when an <code>import</code> statement is encountered inside some other file.  There can only be one top-level script at a time; the top-level script is the Python file you ran to start things off.</p>
<p><strong>Naming</strong></p>
<p>When a file is loaded, it is given a name (which is stored in its <code>__name__</code> attribute).  If it was loaded as the top-level script, its name is <code>__main__</code>.  If it was loaded as a module, its name is the filename, preceded by the names of any packages/subpackages of which it is a part, separated by dots.</p>
<p>So for instance in your example:</p>
<pre><code>package/
    __init__.py
    subpackage1/
        __init__.py
        moduleX.py
    moduleA.py
</code></pre>
<p>if you imported <code>moduleX</code> (note: <em>imported</em>, not directly executed), its name would be <code>package.subpackage1.moduleX</code>.  If you imported <code>moduleA</code>, its name would be <code>package.moduleA</code>.  However, if you <em>directly run</em> <code>moduleX</code> from the command line, its name will instead be <code>__main__</code>, and if you directly run <code>moduleA</code> from the command line, its name will be <code>__main__</code>.  When a module is run as the top-level script, it loses its normal name and its name is instead <code>__main__</code>.</p>
<p><strong>Accessing a module NOT through its containing package</strong></p>
<p>There is an additional wrinkle: the module's name depends on whether it was imported &quot;directly&quot; from the directory it is in or imported via a package.  This only makes a difference if you run Python in a directory, and try to import a file in that same directory (or a subdirectory of it).  For instance, if you start the Python interpreter in the directory <code>package/subpackage1</code> and then do <code>import moduleX</code>, the name of <code>moduleX</code> will just be <code>moduleX</code>, and not <code>package.subpackage1.moduleX</code>.  This is because Python adds the current directory to its search path when the interpreter is entered interactively; if it finds the to-be-imported module in the current directory, it will not know that that directory is part of a package, and the package information will not become part of the module's name.</p>
<p>A special case is if you run the interpreter interactively (e.g., just type <code>python</code> and start entering Python code on the fly).  In this case, the name of that interactive session is <code>__main__</code>.</p>
<p>Now here is the crucial thing for your error message: <strong>if a module's name has no dots, it is not considered to be part of a package</strong>.  It doesn't matter where the file actually is on disk.  All that matters is what its name is, and its name depends on how you loaded it.</p>
<p>Now look at the quote you included in your question:</p>
<blockquote>
<p>Relative imports use a module's name attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to 'main') then relative imports are resolved as if the module were a top-level module, regardless of where the module is actually located on the file system.</p>
</blockquote>
<p><strong>Relative imports...</strong></p>
<p>Relative imports use the module's <em>name</em> to determine where it is in a package.  When you use a relative import like <code>from .. import foo</code>, the dots indicate to step up some number of levels in the package hierarchy.  For instance, if your current module's name is <code>package.subpackage1.moduleX</code>, then <code>..moduleA</code> would mean <code>package.moduleA</code>.  For a <code>from .. import</code> to work, the module's name must have at least as many dots as there are in the <code>import</code> statement.</p>
<p><strong>... are only relative in a package</strong></p>
<p>However, if your module's name is <code>__main__</code>, it is not considered to be in a package.  Its name has no dots, and therefore you cannot use <code>from .. import</code> statements inside it.  If you try to do so, you will get the &quot;relative-import in non-package&quot; error.</p>
<p><strong>Scripts can't import relative</strong></p>
<p>What you probably did is you tried to run <code>moduleX</code> or the like from the command line.  When you did this, its name was set to <code>__main__</code>, which means that relative imports within it will fail, because its name does not reveal that it is in a package. Note that this will also happen if you run Python from the same directory where a module is, and then try to import that module, because, as described above, Python will find the module in the current directory &quot;too early&quot; without realizing it is part of a package.</p>
<p>Also remember that when you run the interactive interpreter, the &quot;name&quot; of that interactive session is always <code>__main__</code>.  Thus <strong>you cannot do relative imports directly from an interactive session</strong>.  Relative imports are only for use within module files.</p>
<p><strong>Two solutions:</strong></p>
<ol>
<li><p>If you really do want to run <code>moduleX</code> directly, but you still want it to be considered part of a package, you can do <code>python -m package.subpackage1.moduleX</code>.  The <code>-m</code> tells Python to load it as a module, not as the top-level script.</p>
</li>
<li><p>Or perhaps you don't actually want to <em>run</em> <code>moduleX</code>, you just want to run some other script, say <code>myfile.py</code>, that <em>uses</em> functions inside <code>moduleX</code>.  If that is the case, put <code>myfile.py</code> <em>somewhere else</em> – <em>not</em> inside the <code>package</code> directory – and run it.  If inside <code>myfile.py</code> you do things like <code>from package.moduleA import spam</code>, it will work fine.</p>
</li>
</ol>
<p><strong>Notes</strong></p>
<ul>
<li><p>For either of these solutions, the package directory (<code>package</code> in your example) must be accessible from the Python module search path (<code>sys.path</code>).  If it is not, you will not be able to use anything in the package reliably at all.</p>
</li>
<li><p>Since Python 2.6, the module's &quot;name&quot; for package-resolution purposes is determined not just by its <code>__name__</code> attributes but also by the <code>__package__</code> attribute.  That's why I'm avoiding using the explicit symbol <code>__name__</code> to refer to the module's &quot;name&quot;.  Since Python 2.6 a module's &quot;name&quot; is effectively <code>__package__ + '.' + __name__</code>, or just <code>__name__</code> if <code>__package__</code> is <code>None</code>.)</p>
</li>
</ul>
"
Extracting extension from filename,https://stackoverflow.com/questions/541390/extracting-extension-from-filename,1866,python;filenames;file-extension,"<p>Use <a href=""https://docs.python.org/3/library/os.path.html#os.path.splitext"" rel=""noreferrer""><code>os.path.splitext</code></a>:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; filename, file_extension = os.path.splitext('/path/to/somefile.ext')
&gt;&gt;&gt; filename
'/path/to/somefile'
&gt;&gt;&gt; file_extension
'.ext'
</code></pre>
<p>Unlike most manual string-splitting attempts, <code>os.path.splitext</code> will correctly treat <code>/a/b.c/d</code> as having no extension instead of having extension <code>.c/d</code>, and it will treat <code>.bashrc</code> as having no extension instead of having extension <code>.bashrc</code>:</p>
<pre><code>&gt;&gt;&gt; os.path.splitext('/a/b.c/d')
('/a/b.c/d', '')
&gt;&gt;&gt; os.path.splitext('.bashrc')
('.bashrc', '')
</code></pre>
"
How do I write JSON data to a file?,https://stackoverflow.com/questions/12309269/how-do-i-write-json-data-to-a-file,1865,python;json,"<p><code>data</code> is a Python dictionary. It needs to be encoded as JSON before writing.</p>
<p>Use this for maximum compatibility (Python 2 and 3):</p>
<pre><code>import json
with open('data.json', 'w') as f:
    json.dump(data, f)
</code></pre>
<p>On a modern system (i.e. Python 3 and UTF-8 support), you can write a nicer file using:</p>
<pre><code>import json
with open('data.json', 'w', encoding='utf-8') as f:
    json.dump(data, f, ensure_ascii=False, indent=4)
</code></pre>
<p>See <a href=""https://docs.python.org/3/library/json.html"" rel=""noreferrer""><code>json</code></a> documentation.</p>
"
Relative imports in Python 3,https://stackoverflow.com/questions/16981921/relative-imports-in-python-3,1864,python;python-3.x;python-import,"<blockquote>
<p>unfortunately, this module needs to be inside the package, and it also
needs to be runnable as a script, sometimes. Any idea how I could
achieve that?</p>
</blockquote>
<p>It's quite common to have a layout like this...</p>
<pre><code>main.py
mypackage/
    __init__.py
    mymodule.py
    myothermodule.py
</code></pre>
<p>...with a <code>mymodule.py</code> like this...</p>
<pre><code>#!/usr/bin/env python3

# Exported function
def as_int(a):
    return int(a)

# Test function for module  
def _test():
    assert as_int('1') == 1

if __name__ == '__main__':
    _test()
</code></pre>
<p>...a <code>myothermodule.py</code> like this...</p>
<pre><code>#!/usr/bin/env python3

from .mymodule import as_int

# Exported function
def add(a, b):
    return as_int(a) + as_int(b)

# Test function for module  
def _test():
    assert add('1', '1') == 2

if __name__ == '__main__':
    _test()
</code></pre>
<p>...and a <code>main.py</code> like this...</p>
<pre><code>#!/usr/bin/env python3

from mypackage.myothermodule import add

def main():
    print(add('1', '1'))

if __name__ == '__main__':
    main()
</code></pre>
<p>...which works fine when you run <code>main.py</code> or <code>mypackage/mymodule.py</code>, but fails with <code>mypackage/myothermodule.py</code>, due to the relative import...</p>
<pre><code>from .mymodule import as_int
</code></pre>
<p>The way you're supposed to run it is...</p>
<pre><code>python3 -m mypackage.myothermodule
</code></pre>
<p>...but it's somewhat verbose, and doesn't mix well with a shebang line like <code>#!/usr/bin/env python3</code>.</p>
<p>The simplest fix for this case, assuming the name <code>mymodule</code> is globally unique, would be to avoid using relative imports, and just use...</p>
<pre><code>from mymodule import as_int
</code></pre>
<p>...although, if it's not unique, or your package structure is more complex, you'll need to include the directory containing your package directory in <code>PYTHONPATH</code>, and do it like this...</p>
<pre><code>from mypackage.mymodule import as_int
</code></pre>
<p>...or if you want it to work &quot;out of the box&quot;, you can frob the <code>PYTHONPATH</code> in code first with this...</p>
<pre><code>import sys
import os

SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.dirname(SCRIPT_DIR))

from mypackage.mymodule import as_int
</code></pre>
<p>It's kind of a pain, but there's a clue as to why in <a href=""http://mail.python.org/pipermail/python-3000/2007-April/006793.html"" rel=""noreferrer"">an email</a> written by a certain Guido van Rossum...</p>
<blockquote>
<p>I'm -1 on this and on any other proposed twiddlings of the <code>__main__</code>
machinery. The only use case seems to be running scripts that happen
to be living inside a module's directory, which I've always seen as an
antipattern. To make me change my mind you'd have to convince me that
it isn't.</p>
</blockquote>
<p>Whether running scripts inside a package is an antipattern or not is subjective, but personally I find it really useful in a package I have which contains some custom wxPython widgets, so I can run the script for any of the source files to display a <code>wx.Frame</code> containing only that widget for testing purposes.</p>
"
How can I import a module dynamically given the full path?,https://stackoverflow.com/questions/67631/how-can-i-import-a-module-dynamically-given-the-full-path,1861,python;python-import;python-module,"<p>Let's have <code>MyClass</code> in <code>module.name</code> module defined at <code>/path/to/file.py</code>. Below is how we import <code>MyClass</code> from this module</p>
<p>For Python 3.5+ use (<a href=""https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly"" rel=""noreferrer"">docs</a>):</p>
<pre><code>import importlib.util
import sys
spec = importlib.util.spec_from_file_location(&quot;module.name&quot;, &quot;/path/to/file.py&quot;)
foo = importlib.util.module_from_spec(spec)
sys.modules[&quot;module.name&quot;] = foo
spec.loader.exec_module(foo)
foo.MyClass()
</code></pre>
<p>For Python 3.3 and 3.4 use:</p>
<pre><code>from importlib.machinery import SourceFileLoader

foo = SourceFileLoader(&quot;module.name&quot;, &quot;/path/to/file.py&quot;).load_module()
foo.MyClass()
</code></pre>
<p>(Although this has been deprecated in Python 3.4.)</p>
<p>For Python 2 use:</p>
<pre><code>import imp

foo = imp.load_source('module.name', '/path/to/file.py')
foo.MyClass()
</code></pre>
<p>There are equivalent convenience functions for compiled Python files and DLLs.</p>
<p>See also <a href=""http://bugs.python.org/issue21436"" rel=""noreferrer"">http://bugs.python.org/issue21436</a>.</p>
"
Use different Python version with virtualenv,https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv,1859,python;virtualenv;virtualenvwrapper,"<p><strong>NOTE:</strong> For <strong>Python 3.3+</strong>, see The Aelfinn's <a href=""https://stackoverflow.com/a/39713544/1450294"">answer</a> below.</p>
<hr />
<p>Use the <code>--python</code> (or short <code>-p</code>) option when creating a virtualenv instance to specify the Python executable you want to use, e.g.:</p>
<pre><code>virtualenv --python=&quot;/usr/bin/python2.6&quot; &quot;/path/to/new/virtualenv/&quot;
</code></pre>
"
How do I get time of a Python program&#39;s execution?,https://stackoverflow.com/questions/1557571/how-do-i-get-time-of-a-python-programs-execution,1821,python;time;execution-time,"<p>The simplest way in Python:</p>

<pre><code>import time
start_time = time.time()
main()
print(""--- %s seconds ---"" % (time.time() - start_time))
</code></pre>

<p>This assumes that your program takes at least a tenth of second to run.</p>

<p>Prints:</p>

<pre><code>--- 0.764891862869 seconds ---
</code></pre>
"
Random string generation with upper case letters and digits,https://stackoverflow.com/questions/2257441/random-string-generation-with-upper-case-letters-and-digits,1806,python;string;random,"<p><strong>Answer in one line:</strong></p>
<pre><code>''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
</code></pre>
<p>or even shorter starting with Python 3.6 using <a href=""https://docs.python.org/3/library/random.html#random.choices"" rel=""noreferrer""><code>random.choices()</code></a>:</p>
<pre><code>''.join(random.choices(string.ascii_uppercase + string.digits, k=N))
</code></pre>
<p><strong>A cryptographically more secure version:</strong> <a href=""https://stackoverflow.com/a/23728630/2213647"">see this post</a></p>
<pre><code>''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
</code></pre>
<p><strong>In details, with a clean function for further reuse:</strong></p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; import random
&gt;&gt;&gt; def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
&gt;&gt;&gt; id_generator()
'G5G74W'
&gt;&gt;&gt; id_generator(3, &quot;6793YUIO&quot;)
'Y3U'
</code></pre>
<p><strong>How does it work ?</strong></p>
<p>We import <code>string</code>, a module that contains sequences of common ASCII characters, and <code>random</code>, a module that deals with random generation.</p>
<p><code>string.ascii_uppercase + string.digits</code> just concatenates the list of characters representing uppercase ASCII chars and digits:</p>
<pre><code>&gt;&gt;&gt; string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
&gt;&gt;&gt; string.digits
'0123456789'
&gt;&gt;&gt; string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
</code></pre>
<p>Then we use a list comprehension to create a list of 'n' elements:</p>
<pre><code>&gt;&gt;&gt; range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
&gt;&gt;&gt; ['elem' for _ in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']
</code></pre>
<p>In the example above, we use <code>[</code> to create the list, but we don't in the <code>id_generator</code> function so Python doesn't create the list in memory, but generates the elements on the fly, one by one (more about this <a href=""https://stackoverflow.com/questions/231767/the-python-yield-keyword-explained/231855#231855"">here</a>).</p>
<p>Instead of asking to create 'n' times the string <code>elem</code>, we will ask Python to create 'n' times a random character, picked from a sequence of characters:</p>
<pre><code>&gt;&gt;&gt; random.choice(&quot;abcde&quot;)
'a'
&gt;&gt;&gt; random.choice(&quot;abcde&quot;)
'd'
&gt;&gt;&gt; random.choice(&quot;abcde&quot;)
'b'
</code></pre>
<p>Therefore <code>random.choice(chars) for _ in range(size)</code> really is creating a sequence of <code>size</code> characters. Characters that are randomly picked from <code>chars</code>:</p>
<pre><code>&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]
['a', 'b', 'b']
&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]
['e', 'b', 'e']
&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]
['d', 'a', 'c']
</code></pre>
<p>Then we just join them with an empty string so the sequence becomes a string:</p>
<pre><code>&gt;&gt;&gt; ''.join(['a', 'b', 'b'])
'abb'
&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]
['d', 'c', 'b']
&gt;&gt;&gt; ''.join(random.choice('abcde') for _ in range(3))
'dac'
</code></pre>
"
How do I print to stderr in Python?,https://stackoverflow.com/questions/5574702/how-do-i-print-to-stderr-in-python,1805,python;printing;stderr,"<p>I found this to be the only one short, flexible, portable and readable:</p>
<pre><code>import sys

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)
</code></pre>
<p>The optional function <code>eprint</code> saves some repetition. It can be used in the same way as the standard <code>print</code> function:</p>
<pre><code>&gt;&gt;&gt; print(&quot;Test&quot;)
Test
&gt;&gt;&gt; eprint(&quot;Test&quot;)
Test
&gt;&gt;&gt; eprint(&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;, sep=&quot;---&quot;)
foo---bar---baz
</code></pre>
"
Save plot to image file instead of displaying it,https://stackoverflow.com/questions/9622163/save-plot-to-image-file-instead-of-displaying-it,1798,python;matplotlib;savefig,"<p>When using <a href=""https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.savefig.html"" rel=""noreferrer""><code>matplotlib.pyplot.savefig</code></a>, the file format can be specified by the extension:</p>
<pre><code>from matplotlib import pyplot as plt

plt.savefig('foo.png')
plt.savefig('foo.pdf')
</code></pre>
<p>That gives a rasterized or vectorized output respectively.
In addition, there is sometimes undesirable whitespace around the image, which can be removed with:</p>
<pre><code>plt.savefig('foo.png', bbox_inches='tight')
</code></pre>
<p>Note that if showing the plot, <code>plt.show()</code> should follow <code>plt.savefig()</code>; otherwise, the file image will be blank.</p>
"
Selecting multiple columns in a Pandas dataframe,https://stackoverflow.com/questions/11285613/selecting-multiple-columns-in-a-pandas-dataframe,1791,python;pandas;dataframe;select;indexing,"<p>The column names (which are strings) cannot be sliced in the manner you tried.</p>
<p>Here you have a couple of options. If you know from context which variables you want to slice out, you can just return a view of only those columns by passing a list into the <a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#basics"" rel=""noreferrer""><code>__getitem__</code> syntax</a> (the []'s).</p>
<pre><code>df1 = df[['a', 'b']]
</code></pre>
<p>Alternatively, if it matters to index them numerically and not by their name (say your code should automatically do this without knowing the names of the first two columns) then you can do this instead:</p>
<pre><code>df1 = df.iloc[:, 0:2] # Remember that Python does not slice inclusive of the ending index.
</code></pre>
<p>Additionally, you should familiarize yourself with the idea of a view into a Pandas object vs. a copy of that object. The first of the above methods will return a new copy in memory of the desired sub-object (the desired slices).</p>
<p>Sometimes, however, there are indexing conventions in Pandas that don't do this and instead give you a new variable that just refers to the same chunk of memory as the sub-object or slice in the original object. This will happen with the second way of indexing, so you can modify it with the <code>.copy()</code> method to get a regular copy. When this happens, changing what you think is the sliced object can sometimes alter the original object. Always good to be on the look out for this.</p>
<pre><code>df1 = df.iloc[0, 0:2].copy() # To avoid the case where changing df1 also changes df
</code></pre>
<p>To use <code>iloc</code>, you need to know the column positions (or indices). As the column positions may change, instead of hard-coding indices, you can use <code>iloc</code> along with <code>get_loc</code> function of <code>columns</code> method of dataframe object to obtain column indices.</p>
<pre><code>{df.columns.get_loc(c): c for idx, c in enumerate(df.columns)}
</code></pre>
<p>Now you can use this dictionary to access columns through names and using <code>iloc</code>.</p>
"
Make a dictionary (dict) from separate lists of keys and values,https://stackoverflow.com/questions/209840/make-a-dictionary-dict-from-separate-lists-of-keys-and-values,1787,python;list;dictionary;key,"<p>Like this:</p>
<pre><code>keys = ['a', 'b', 'c']
values = [1, 2, 3]
dictionary = dict(zip(keys, values))
print(dictionary) # {'a': 1, 'b': 2, 'c': 3}
</code></pre>
<p>Voila :-)  The pairwise <a href=""https://docs.python.org/3/library/functions.html#func-dict"" rel=""noreferrer""><code>dict</code></a> constructor and <a href=""https://docs.python.org/3/library/functions.html#zip"" rel=""noreferrer""><code>zip</code></a> function are awesomely useful.</p>
"
What is the best way of implementing a singleton in Python?,https://stackoverflow.com/questions/6760685/what-is-the-best-way-of-implementing-a-singleton-in-python,1787,python;singleton;decorator;base-class;metaclass,"<p>You just need a decorator, different depending on the python version.</p>
<p>Notice how <code>foo</code> gets printed only once.</p>
<hr>
<h3>Python 3.2+</h3>
<p><strong>Implementation</strong>:</p>
<pre class=""lang-py prettyprint-override""><code>from functools import lru_cache

@lru_cache(maxsize=None)
class CustomClass(object):

    def __init__(self, arg):
        print(f&quot;CustomClass initialised with {arg}&quot;)
        self.arg = arg
</code></pre>
<p><strong>Usage</strong></p>
<pre><code>c1 = CustomClass(&quot;foo&quot;)
c2 = CustomClass(&quot;foo&quot;)
c3 = CustomClass(&quot;bar&quot;)

print(c1 == c2)
print(c1 == c3)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>&gt;&gt;&gt; CustomClass initialised with foo
&gt;&gt;&gt; CustomClass initialised with bar
&gt;&gt;&gt; True
&gt;&gt;&gt; False
</code></pre>
<hr>
<h3>Python 3.9+</h3>
<p><strong>Implementation</strong>:</p>
<pre class=""lang-py prettyprint-override""><code>from functools import cache

@cache
class CustomClass(object):
    ...
</code></pre>
"
What does __all__ mean in Python?,https://stackoverflow.com/questions/44834/what-does-all-mean-in-python,1786,python;syntax;namespaces;python-import,"<p>It's a list of public objects of that module, as interpreted by <code>import *</code>. It overrides the default of hiding everything that begins with an underscore.</p>
"
How do I get the filename without the extension from a path in Python?,https://stackoverflow.com/questions/678236/how-do-i-get-the-filename-without-the-extension-from-a-path-in-python,1776,python;string;path,"<h3>Python 3.4+</h3>
<p>Use <a href=""https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.stem"" rel=""noreferrer""><code>pathlib.Path.stem</code></a></p>
<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; Path(&quot;/path/to/file.txt&quot;).stem
'file'
&gt;&gt;&gt; Path(&quot;/path/to/file.tar.gz&quot;).stem
'file.tar'
</code></pre>
<h3>Python &lt; 3.4</h3>
<p>Use <a href=""https://docs.python.org/3/library/os.path.html#os.path.splitext"" rel=""noreferrer""><code>os.path.splitext</code></a> in combination with <a href=""https://docs.python.org/3/library/os.path.html#os.path.basename"" rel=""noreferrer""><code>os.path.basename</code></a>:</p>
<pre><code>&gt;&gt;&gt; os.path.splitext(os.path.basename(&quot;/path/to/file.txt&quot;))[0]
'file'
&gt;&gt;&gt; os.path.splitext(os.path.basename(&quot;/path/to/file.tar.gz&quot;))[0]
'file.tar'
</code></pre>
"
How do I profile a Python script?,https://stackoverflow.com/questions/582336/how-do-i-profile-a-python-script,1745,python;performance;optimization;time-complexity;profiling,"<p><strong>Python includes a profiler called <a href=""https://docs.python.org/3/library/profile.html#module-cProfile"" rel=""noreferrer""><code>cProfile</code></a>.</strong> It not only gives the total running time, but also times each function separately, and tells you how many times each function was called, making it easy to determine where you should make optimizations.</p>
<p>You can call it from within your code, or from the interpreter, like this:</p>
<pre><code>import cProfile
cProfile.run('foo()')
</code></pre>
<p>Even more usefully, you can invoke cProfile when running a script:</p>
<pre><code>python -m cProfile myscript.py
</code></pre>
<p>Or when running a module:</p>
<pre><code>python -m cProfile -m mymodule
</code></pre>
<p>To make it even easier, I made a little batch file called 'profile.bat':</p>
<pre><code>python -m cProfile %1
</code></pre>
<p>So all I have to do is run:</p>
<pre><code>profile euler048.py
</code></pre>
<p>And I get this:</p>
<pre class=""lang-none prettyprint-override""><code>1007 function calls in 0.061 CPU seconds

Ordered by: standard name
ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    1    0.000    0.000    0.061    0.061 &lt;string&gt;:1(&lt;module&gt;)
 1000    0.051    0.000    0.051    0.000 euler048.py:2(&lt;lambda&gt;)
    1    0.005    0.005    0.061    0.061 euler048.py:2(&lt;module&gt;)
    1    0.000    0.000    0.061    0.061 {execfile}
    1    0.002    0.002    0.053    0.053 {map}
    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler objects}
    1    0.000    0.000    0.000    0.000 {range}
    1    0.003    0.003    0.003    0.003 {sum}
</code></pre>
<p>For more information, check out this tutorial from PyCon 2013 titled
<a href=""https://web.archive.org/web/20170318204046/http://lanyrd.com/2013/pycon/scdywg/"" rel=""noreferrer""><strong><em>Python Profiling</em></strong></a><br />
<a href=""https://www.youtube.com/watch?v=QJwVYlDzAXs"" rel=""noreferrer"">Also via YouTube</a>.</p>
"
if/else in a list comprehension,https://stackoverflow.com/questions/4260280/if-else-in-a-list-comprehension,1734,python;list;if-statement;list-comprehension,"<p>You can totally do that. It's just an ordering issue:</p>
<pre><code>[f(x) if x is not None else '' for x in xs]
</code></pre>
<p>In general,</p>
<pre><code>[f(x) if condition else g(x) for x in sequence]
</code></pre>
<p>And, for list comprehensions with <code>if</code> conditions only,</p>
<pre><code>[f(x) for x in sequence if condition]
</code></pre>
<p>Note that this actually uses a different language construct, a <a href=""https://docs.python.org/3/reference/expressions.html#conditional-expressions"" rel=""noreferrer"">conditional expression</a>, which itself is not part of the <a href=""https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries"" rel=""noreferrer"">comprehension syntax</a>, while the <code>if</code> after the <code>for…in</code> is part of list comprehensions and used to <em>filter</em> elements from the source iterable.</p>
<hr />
<p>Conditional expressions can be used in all kinds of situations where you want to choose between two expression values based on some condition. This does the same as the <a href=""https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator"" rel=""noreferrer"">ternary operator <code>?:</code> that exists in other languages</a>. For example:</p>
<pre><code>value = 123
print(value, 'is', 'even' if value % 2 == 0 else 'odd')
</code></pre>
"
How to put the legend outside the plot,https://stackoverflow.com/questions/4700614/how-to-put-the-legend-outside-the-plot,1717,python;matplotlib;seaborn;legend,"<ul>
<li>You can make the legend text smaller by specifying <code>set_size</code> of <code>FontProperties</code>.</li>
<li>Resources:
<ul>
<li><a href=""https://matplotlib.org/tutorials/intermediate/legend_guide.html#legend-guide"" rel=""noreferrer"">Legend guide</a></li>
<li><a href=""https://matplotlib.org/api/legend_api.html"" rel=""noreferrer""><code>matplotlib.legend</code></a></li>
<li><a href=""https://matplotlib.org/api/_as_gen/matplotlib.pyplot.legend.html#matplotlib.pyplot.legend"" rel=""noreferrer""><code>matplotlib.pyplot.legend</code></a></li>
<li><a href=""https://matplotlib.org/3.3.1/api/font_manager_api.html"" rel=""noreferrer""><code>matplotlib.font_manager</code></a>
<ul>
<li><a href=""https://matplotlib.org/3.3.1/api/font_manager_api.html#matplotlib.font_manager.FontProperties.set_size"" rel=""noreferrer""><code>set_size(self, size)</code></a></li>
<li>Valid font size are <em>xx-small</em>, <em>x-small</em>, <em>small</em>, <em>medium</em>, <em>large</em>, <em>x-large</em>, <em>xx-large</em>, <em>larger</em>, <em>smaller</em>, and <em>None</em>.</li>
</ul>
</li>
<li><a href=""https://realpython.com/python-matplotlib-guide/"" rel=""noreferrer"">Real Python: Python Plotting With Matplotlib (Guide)</a></li>
</ul>
</li>
</ul>
<pre class=""lang-py prettyprint-override""><code>import matplotlib.pyplot as plt
from matplotlib.font_manager import FontProperties

fontP = FontProperties()
fontP.set_size('xx-small')

p1, = plt.plot([1, 2, 3], label='Line 1')
p2, = plt.plot([3, 2, 1], label='Line 2')
plt.legend(handles=[p1, p2], title='title', bbox_to_anchor=(1.05, 1), loc='upper left', prop=fontP)
</code></pre>
<p><a href=""https://i.sstatic.net/OMgiC.png"" rel=""noreferrer""><img src=""https://i.sstatic.net/OMgiC.png"" alt=""Enter image description here"" /></a></p>
<ul>
<li><code>fontsize='xx-small'</code> also works, without importing <code>FontProperties</code>.</li>
</ul>
<pre class=""lang-py prettyprint-override""><code>plt.legend(handles=[p1, p2], title='title', bbox_to_anchor=(1.05, 1), loc='upper left', fontsize='xx-small')
</code></pre>
"
How to check for NaN values,https://stackoverflow.com/questions/944700/how-to-check-for-nan-values,1717,python;math;nan,"<p>Use <a href=""http://docs.python.org/library/math.html#math.isnan"" rel=""noreferrer""><code>math.isnan</code></a>:</p>
<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; x = float('nan')
&gt;&gt;&gt; math.isnan(x)
True
</code></pre>
"
Replacements for switch statement in Python?,https://stackoverflow.com/questions/60208/replacements-for-switch-statement-in-python,1716,python;switch-statement,"<p>Python 3.10 (2021) introduced the <code>match</code>-<code>case</code> statement, which provides a first-class implementation of a &quot;switch&quot; for Python. For example:</p>
<pre><code>def f(x):
    match x:
        case 'a':
            return 1
        case 'b':
            return 2
        case _:
            return 0   # 0 is the default case if x is not found
</code></pre>
<p>The <code>match</code>-<code>case</code> statement is considerably more powerful than this simple example.</p>
<p>Documentation:</p>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/controlflow.html#match-statements"" rel=""noreferrer""><code>match</code> statements</a> (under the &quot;More Control Flow Tools&quot; page)</li>
<li><a href=""https://docs.python.org/3/reference/compound_stmts.html#match"" rel=""noreferrer"">The <code>match</code> statement</a> (under &quot;Compound statements&quot; page)</li>
<li><a href=""https://peps.python.org/pep-0634/"" rel=""noreferrer"">PEP 634 – Structural Pattern Matching: Specification</a></li>
<li><a href=""https://peps.python.org/pep-0636/"" rel=""noreferrer"">PEP 636 – Structural Pattern Matching: Tutorial</a></li>
</ul>
<hr />
<p>If you need to support Python ≤ 3.9, use a dictionary instead:</p>
<pre><code>def f(x):
    return {
        'a': 1,
        'b': 2,
    }.get(x, 0)  # default case
</code></pre>
"
Why do Python classes inherit object?,https://stackoverflow.com/questions/4015417/why-do-python-classes-inherit-object,1711,python;class;oop;object;inheritance,"<blockquote>
  <h3>Is there any reason for a class declaration to inherit from <code>object</code>?</h3>
</blockquote>

<p>In Python 3, apart from compatibility between Python 2 and 3, <em>no reason</em>. In Python 2, <em>many reasons</em>. </p>

<hr>

<h3>Python 2.x story:</h3>

<p>In Python 2.x (from 2.2 onwards) there's two styles of classes depending on the presence or absence of <code>object</code> as a base-class:</p>

<ol>
<li><p><strong>""classic"" style</strong> classes: they don't have <code>object</code> as a base class:</p>

<pre><code>&gt;&gt;&gt; class ClassicSpam:      # no base class
...     pass
&gt;&gt;&gt; ClassicSpam.__bases__
()
</code></pre></li>
<li><p><strong>""new"" style</strong> classes: they have, directly <em>or indirectly</em> (e.g inherit from a <a href=""https://docs.python.org/3/library/stdtypes.html"" rel=""noreferrer"">built-in type</a>), <code>object</code> as a base class:</p>

<pre><code>&gt;&gt;&gt; class NewSpam(object):           # directly inherit from object
...    pass
&gt;&gt;&gt; NewSpam.__bases__
(&lt;type 'object'&gt;,)
&gt;&gt;&gt; class IntSpam(int):              # indirectly inherit from object...
...    pass
&gt;&gt;&gt; IntSpam.__bases__
(&lt;type 'int'&gt;,) 
&gt;&gt;&gt; IntSpam.__bases__[0].__bases__   # ... because int inherits from object  
(&lt;type 'object'&gt;,)
</code></pre></li>
</ol>

<p>Without a doubt, when writing a class you'll <em>always</em> want to go for new-style classes. The perks of doing so are numerous, to list some of them:</p>

<ul>
<li><p><a href=""https://docs.python.org/3/howto/descriptor.html"" rel=""noreferrer"">Support for descriptors</a>. Specifically, the following constructs are made possible with descriptors: </p>

<ol>
<li><a href=""https://docs.python.org/3/library/functions.html#classmethod"" rel=""noreferrer""><code>classmethod</code></a>: A method that receives the class as an implicit argument instead of the instance.</li>
<li><a href=""https://docs.python.org/3/library/functions.html#staticmethod"" rel=""noreferrer""><code>staticmethod</code></a>: A method that does not receive the implicit argument <code>self</code> as a first argument.</li>
<li>properties with <a href=""https://docs.python.org/3/library/functions.html#property"" rel=""noreferrer""><code>property</code></a>: Create functions for managing the getting, setting and deleting of an attribute. </li>
<li><a href=""https://docs.python.org/3/reference/datamodel.html#slots"" rel=""noreferrer""><code>__slots__</code></a>: Saves memory consumptions of a class and also results in faster attribute access. Of course, it does <a href=""https://docs.python.org/3/reference/datamodel.html#notes-on-using-slots"" rel=""noreferrer"">impose limitations</a>.</li>
</ol></li>
<li><p>The <a href=""https://docs.python.org/3/reference/datamodel.html#object.__new__"" rel=""noreferrer""><code>__new__</code></a> static method: lets you customize how new class instances are created. </p></li>
<li><p><a href=""https://www.python.org/download/releases/2.3/mro/"" rel=""noreferrer"">Method resolution order (MRO)</a>: in what order the base classes of a class will be searched when trying to resolve which method to call. </p></li>
<li><p>Related to MRO, <a href=""https://docs.python.org/3/library/functions.html#super"" rel=""noreferrer""><code>super</code> calls</a>. Also see, <a href=""https://rhettinger.wordpress.com/2011/05/26/super-considered-super/"" rel=""noreferrer""><code>super()</code> considered super.</a></p></li>
</ul>

<p>If you don't inherit from <code>object</code>, forget these. A more exhaustive description of the previous bullet points along with other perks of ""new"" style classes can be found <a href=""https://www.python.org/download/releases/2.2.3/descrintro/"" rel=""noreferrer"">here</a>.</p>

<p>One of the downsides of new-style classes is that the class itself is more memory demanding. Unless you're creating many class objects, though, I doubt this would be an issue and it's a negative sinking in a sea of positives.</p>

<hr>

<h3>Python 3.x story:</h3>

<p>In Python 3, things are simplified. Only new-style classes exist (referred to plainly as classes) so, the only difference in adding <code>object</code> is requiring you to type in 8 more characters. This:</p>

<pre><code>class ClassicSpam:
    pass
</code></pre>

<p>is completely equivalent (apart from their name :-) to this:</p>

<pre><code>class NewSpam(object):
     pass
</code></pre>

<p>and to this:</p>

<pre><code>class Spam():
    pass
</code></pre>

<p>All have <code>object</code> in their <code>__bases__</code>.</p>

<pre><code>&gt;&gt;&gt; [object in cls.__bases__ for cls in {Spam, NewSpam, ClassicSpam}]
[True, True, True]
</code></pre>

<hr>

<h2>So, what should you do?</h2>

<p><strong>In Python 2:</strong> <em>always inherit from <code>object</code> explicitly</em>. Get the perks.</p>

<p><strong>In Python 3:</strong> inherit from <code>object</code> if you are writing code that tries to be Python agnostic, that is, it needs to work both in Python 2 and in Python 3. Otherwise don't, it really makes no difference since Python inserts it for you behind the scenes.</p>
"
How do I reverse a string in Python?,https://stackoverflow.com/questions/931092/how-do-i-reverse-a-string-in-python,1704,python;string,"<p>Using <a href=""https://stackoverflow.com/questions/509211/understanding-slicing"">slicing</a>:</p>
<pre><code>&gt;&gt;&gt; 'hello world'[::-1]
'dlrow olleh'
</code></pre>
<hr />
<p>Slice notation takes the form <code>[start:stop:step]</code>. In this case, we omit the <code>start</code> and <code>stop</code> positions since we want the whole string. We also use <code>step = -1</code>, which means, &quot;repeatedly step from right to left by 1 character&quot;.</p>
"
How do I check if a directory exists in Python?,https://stackoverflow.com/questions/8933237/how-do-i-check-if-a-directory-exists-in-python,1666,python;directory,"<p>Use <a href=""http://docs.python.org/dev/library/os.path.html#os.path.isdir"" rel=""noreferrer""><strong><code>os.path.isdir</code></strong></a> for directories only:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.isdir('new_folder')
True
</code></pre>
<p>Use <a href=""http://docs.python.org/dev/library/os.path.html#os.path.exists"" rel=""noreferrer""><strong><code>os.path.exists</code></strong></a> for both files and directories:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.exists(os.path.join(os.getcwd(), 'new_folder', 'file.txt'))
False
</code></pre>
<p>Alternatively, you can use <a href=""https://docs.python.org/dev/library/pathlib.html"" rel=""noreferrer""><strong><code>pathlib</code></strong></a>:</p>
<pre><code> &gt;&gt;&gt; from pathlib import Path
 &gt;&gt;&gt; Path('new_folder').is_dir()
 True
 &gt;&gt;&gt; (Path.cwd() / 'new_folder' / 'file.txt').exists()
 False
</code></pre>
"
What is the Python 3 equivalent of &quot;python -m SimpleHTTPServer&quot;,https://stackoverflow.com/questions/7943751/what-is-the-python-3-equivalent-of-python-m-simplehttpserver,1651,python;python-3.x;httpserver;simplehttpserver,"<p>From <a href=""https://docs.python.org/2/library/simplehttpserver.html"" rel=""noreferrer"">the docs</a>:</p>

<blockquote>
  <p>The <code>SimpleHTTPServer</code> module has been merged into <code>http.server</code> in Python 3.0. The 2to3 tool will automatically adapt imports when converting your sources to 3.0.</p>
</blockquote>

<p>So, your command is <code>python -m http.server</code>, or depending on your installation, it can be:</p>

<pre><code>python3 -m http.server
</code></pre>
"
What is setup.py?,https://stackoverflow.com/questions/1471994/what-is-setup-py,1647,python;pypi;setup.py;python-packaging,"<p><code>setup.py</code> is a Python file, the presence of which is an indication that the module/package you are about to install has likely been packaged and distributed with <a href=""https://docs.python.org/3.9/library/distutils.html"" rel=""noreferrer"">Distutils</a>, which is the standard for distributing Python Modules.</p>
<p>This allows you to easily <a href=""https://docs.python.org/3/installing/index.html#installing-index"" rel=""noreferrer"">install Python packages</a>. Often it's enough to write:</p>
<pre><code>$ pip install . 
</code></pre>
<p><code>pip</code> will use <code>setup.py</code> to install your module. Avoid calling <code>setup.py</code> directly.</p>
"
How can I flush the output of the print function?,https://stackoverflow.com/questions/230751/how-can-i-flush-the-output-of-the-print-function,1634,python;printing;flush;output-buffering,"<p>In Python 3, <a href=""https://docs.python.org/library/functions.html#print"" rel=""noreferrer""><code>print</code></a> can take an optional <code>flush</code> argument:</p>
<pre><code>print(&quot;Hello, World!&quot;, flush=True)
</code></pre>
<p>In Python 2, after calling <code>print</code>, do:</p>
<pre><code>import sys
sys.stdout.flush()
</code></pre>
<p>By default, <a href=""https://docs.python.org/2/reference/simple_stmts.html#the-print-statement"" rel=""noreferrer""><code>print</code></a> prints to <a href=""https://docs.python.org/2/library/sys.html#sys.stdout"" rel=""noreferrer""><code>sys.stdout</code></a> (see the documentation for more about <a href=""https://docs.python.org/2/library/stdtypes.html#file-objects"" rel=""noreferrer"">file objects</a>).</p>
"
Create a dictionary with comprehension,https://stackoverflow.com/questions/1747817/create-a-dictionary-with-comprehension,1608,python;dictionary;list-comprehension;dictionary-comprehension,"<p>Use a <a href=""http://www.python.org/dev/peps/pep-0274/"" rel=""noreferrer"">dict comprehension</a> (Python 2.7 and later):</p>
<pre><code>{key: value for key, value in zip(keys, values)}
</code></pre>
<hr />
<p>Alternatively, use the <a href=""https://docs.python.org/3/library/stdtypes.html#typesmapping"" rel=""noreferrer""><code>dict</code></a> constructor:</p>
<pre class=""lang-py prettyprint-override""><code>pairs = [('a', 1), ('b', 2)]
dict(pairs)                          # → {'a': 1, 'b': 2}
dict((k, v + 10) for k, v in pairs)  # → {'a': 11, 'b': 12}
</code></pre>
<p>Given separate lists of keys and values, use the <code>dict</code> constructor with <a href=""https://docs.python.org/3/library/functions.html#zip"" rel=""noreferrer""><code>zip</code></a>:</p>
<pre class=""lang-py prettyprint-override""><code>keys = ['a', 'b']
values = [1, 2]
dict(zip(keys, values))              # → {'a': 1, 'b': 2}
</code></pre>
"
Convert integer to string in Python,https://stackoverflow.com/questions/961632/convert-integer-to-string-in-python,1595,python;string;integer,"<pre><code>&gt;&gt;&gt; str(42)
'42'

&gt;&gt;&gt; int('42')
42
</code></pre>
<p>Links to the documentation:</p>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#int"" rel=""noreferrer""><code>int()</code></a></li>
<li><a href=""https://docs.python.org/3/library/functions.html#func-str"" rel=""noreferrer""><code>str()</code></a></li>
</ul>
<p><code>str(x)</code> converts any object <code>x</code> to a string by calling <code>x.<a href=""https://docs.python.org/3/reference/datamodel.html#object.__str__"" rel=""noreferrer"">__str__()</a></code>, or <a href=""https://docs.python.org/3/library/functions.html#repr"" rel=""noreferrer""><code>repr(x)</code></a> if <code>x</code> doesn't have a <code>__str__()</code> method.</p>
"
Catch and print full Python exception traceback without halting/exiting the program,https://stackoverflow.com/questions/3702675/catch-and-print-full-python-exception-traceback-without-halting-exiting-the-prog,1592,python;exception;try-catch;traceback,"<p>Some other answer have already pointed out the <a href=""http://docs.python.org/3/library/traceback.html"">traceback</a> module.</p>

<p>Please notice that with <code>print_exc</code>, in some corner cases, you will not obtain what you would expect. In Python 2.x:</p>

<pre><code>import traceback

try:
    raise TypeError(""Oups!"")
except Exception, err:
    try:
        raise TypeError(""Again !?!"")
    except:
        pass

    traceback.print_exc()
</code></pre>

<p>...will display the traceback of the <em>last</em> exception:</p>

<pre class=""lang-none prettyprint-override""><code>Traceback (most recent call last):
  File ""e.py"", line 7, in &lt;module&gt;
    raise TypeError(""Again !?!"")
TypeError: Again !?!
</code></pre>

<p><strong>If you really need to access the original <em>traceback</em></strong> one solution is to cache the <em>exception infos</em> as returned from <a href=""https://docs.python.org/2/library/sys.html#sys.exc_info""><code>exc_info</code></a> in a local variable and display it using <a href=""https://docs.python.org/2/library/traceback.html#traceback.print_exception""><code>print_exception</code></a>:</p>

<pre><code>import traceback
import sys

try:
    raise TypeError(""Oups!"")
except Exception, err:
    try:
        exc_info = sys.exc_info()

        # do you usefull stuff here
        # (potentially raising an exception)
        try:
            raise TypeError(""Again !?!"")
        except:
            pass
        # end of useful stuff


    finally:
        # Display the *original* exception
        traceback.print_exception(*exc_info)
        del exc_info
</code></pre>

<p>Producing:</p>

<pre class=""lang-none prettyprint-override""><code>Traceback (most recent call last):
  File ""t.py"", line 6, in &lt;module&gt;
    raise TypeError(""Oups!"")
TypeError: Oups!
</code></pre>

<p>Few pitfalls with this though:</p>

<ul>
<li><p>From the doc of <a href=""https://docs.python.org/2/library/sys.html#sys.exc_info""><code>sys_info</code></a>:</p>

<blockquote>
  <p>Assigning the traceback return value to a local variable in a function that is handling an exception will cause a <strong>circular reference</strong>. This will prevent anything referenced by a local variable in the same function or by the traceback from being garbage collected. [...] <strong>If you do need the traceback, make sure to delete it after use</strong> (best done with a try ... finally statement)</p>
</blockquote></li>
<li><p>but, from the same doc:</p>

<blockquote>
  <p><strong>Beginning with Python 2.2, such cycles are automatically reclaimed</strong> when garbage collection is enabled and they become unreachable, but it remains more efficient to avoid creating cycles.</p>
</blockquote></li>
</ul>

<hr>

<p>On the other hand, by allowing you to access the traceback <em>associated with</em> an exception, Python 3 produce a less surprising result:</p>

<pre><code>import traceback

try:
    raise TypeError(""Oups!"")
except Exception as err:
    try:
        raise TypeError(""Again !?!"")
    except:
        pass

    traceback.print_tb(err.__traceback__)
</code></pre>

<p>... will display:</p>

<pre class=""lang-none prettyprint-override""><code>  File ""e3.py"", line 4, in &lt;module&gt;
    raise TypeError(""Oups!"")
</code></pre>
"
Use of *args and **kwargs,https://stackoverflow.com/questions/3394835/use-of-args-and-kwargs,1582,python;args;keyword-argument,"<p><a href=""http://docs.python.org/tutorial/controlflow.html#arbitrary-argument-lists"" rel=""noreferrer"">The syntax is the <code>*</code> and <code>**</code></a>.  The names <code>*args</code> and <code>**kwargs</code> are only by convention but there's no hard requirement to use them.</p>

<p>You would use <code>*args</code> when you're not sure how many arguments might be passed to your function, i.e. it allows you pass an arbitrary number of arguments to your function.  For example:</p>

<pre><code>&gt;&gt;&gt; def print_everything(*args):
        for count, thing in enumerate(args):
...         print( '{0}. {1}'.format(count, thing))
...
&gt;&gt;&gt; print_everything('apple', 'banana', 'cabbage')
0. apple
1. banana
2. cabbage
</code></pre>

<p>Similarly, <code>**kwargs</code> allows you to handle named arguments that you have not defined in advance:</p>

<pre><code>&gt;&gt;&gt; def table_things(**kwargs):
...     for name, value in kwargs.items():
...         print( '{0} = {1}'.format(name, value))
...
&gt;&gt;&gt; table_things(apple = 'fruit', cabbage = 'vegetable')
cabbage = vegetable
apple = fruit
</code></pre>

<p>You can use these along with named arguments too.  The explicit arguments get values first and then everything else is passed to <code>*args</code> and <code>**kwargs</code>.  The named arguments come first in the list.  For example:</p>

<pre><code>def table_things(titlestring, **kwargs)
</code></pre>

<p>You can also use both in the same function definition but <code>*args</code> must occur before <code>**kwargs</code>.</p>

<p>You can also use the <code>*</code> and <code>**</code> syntax when calling a function.  For example:</p>

<pre><code>&gt;&gt;&gt; def print_three_things(a, b, c):
...     print( 'a = {0}, b = {1}, c = {2}'.format(a,b,c))
...
&gt;&gt;&gt; mylist = ['aardvark', 'baboon', 'cat']
&gt;&gt;&gt; print_three_things(*mylist)
a = aardvark, b = baboon, c = cat
</code></pre>

<p>As you can see in this case it takes the list (or tuple) of items and unpacks it. By this it matches them to the arguments in the function.  Of course, you could have a <code>*</code> both in the function definition and in the function call.</p>
"
How do I sort a dictionary by key?,https://stackoverflow.com/questions/9001509/how-do-i-sort-a-dictionary-by-key,1576,python;sorting;dictionary,"<blockquote>
<p><strong>Note:</strong> for Python 3.7+, see <a href=""https://stackoverflow.com/a/47017849"">this answer</a></p>
</blockquote>
<p>Standard Python dictionaries are unordered (until Python 3.7). Even if you sorted the (key,value) pairs, you wouldn't be able to store them in a <code>dict</code> in a way that would preserve the ordering.</p>
<p>The easiest way is to use <a href=""http://docs.python.org/library/collections.html#collections.OrderedDict"" rel=""noreferrer""><code>OrderedDict</code></a>, which remembers the order in which the elements have been inserted:</p>
<pre><code>In [1]: import collections

In [2]: d = {2:3, 1:89, 4:5, 3:0}

In [3]: od = collections.OrderedDict(sorted(d.items()))

In [4]: od
Out[4]: OrderedDict([(1, 89), (2, 3), (3, 0), (4, 5)])
</code></pre>
<p>Never mind the way <code>od</code> is printed out; it'll work as expected:</p>
<pre><code>In [11]: od[1]
Out[11]: 89

In [12]: od[3]
Out[12]: 0

In [13]: for k, v in od.iteritems(): print k, v
   ....: 
1 89
2 3
3 0
4 5
</code></pre>
<h2>Python 3</h2>
<p>For Python 3 users, one needs to use the <code>.items()</code> instead of <code>.iteritems()</code>:</p>
<pre><code>In [13]: for k, v in od.items(): print(k, v)
   ....: 
1 89
2 3
3 0
4 5
</code></pre>
"
Change column type in pandas,https://stackoverflow.com/questions/15891038/change-column-type-in-pandas,1575,python;pandas;dataframe;types;type-conversion,"<p>You have four main options for converting types in pandas:</p>
<ol>
<li><p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>to_numeric()</code></a> - provides functionality to safely convert non-numeric types (e.g. strings) to a suitable numeric type. (See also <a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html"" rel=""noreferrer""><code>to_datetime()</code></a> and <a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_timedelta.html"" rel=""noreferrer""><code>to_timedelta()</code></a>.)</p>
</li>
<li><p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html"" rel=""noreferrer""><code>astype()</code></a> - convert (almost) any type to (almost) any other type (even if it's not necessarily sensible to do so). Also allows you to convert to <a href=""https://pandas.pydata.org/docs/user_guide/categorical.html"" rel=""noreferrer"">categorial</a> types (very useful).</p>
</li>
<li><p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.infer_objects.html"" rel=""noreferrer""><code>infer_objects()</code></a> - a utility method to convert object columns holding Python objects to a pandas type if possible.</p>
</li>
<li><p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.convert_dtypes.html"" rel=""noreferrer""><code>convert_dtypes()</code></a> - convert DataFrame columns to the &quot;best possible&quot;  dtype that supports <code>pd.NA</code> (pandas' object to indicate a missing value).</p>
</li>
</ol>
<p>Read on for more detailed explanations and usage of each of these methods.</p>
<hr />
<h1>1. <code>to_numeric()</code></h1>
<p>The best way to convert one or more columns of a DataFrame to numeric values is to use <a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>pandas.to_numeric()</code></a>.</p>
<p>This function will try to change non-numeric objects (such as strings) into integers or floating-point numbers as appropriate.</p>
<h2>Basic usage</h2>
<p>The input to <a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>to_numeric()</code></a> is a Series or a single column of a DataFrame.</p>
<pre><code>&gt;&gt;&gt; s = pd.Series([&quot;8&quot;, 6, &quot;7.5&quot;, 3, &quot;0.9&quot;]) # mixed string and numeric values
&gt;&gt;&gt; s
0      8
1      6
2    7.5
3      3
4    0.9
dtype: object

&gt;&gt;&gt; pd.to_numeric(s) # convert everything to float values
0    8.0
1    6.0
2    7.5
3    3.0
4    0.9
dtype: float64
</code></pre>
<p>As you can see, a new Series is returned. Remember to assign this output to a variable or column name to continue using it:</p>
<pre><code># convert Series
my_series = pd.to_numeric(my_series)

# convert column &quot;a&quot; of a DataFrame
df[&quot;a&quot;] = pd.to_numeric(df[&quot;a&quot;])
</code></pre>
<p>You can also use it to convert multiple columns of a DataFrame via the <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html"" rel=""noreferrer""><code>apply()</code></a> method:</p>
<pre><code># convert all columns of DataFrame
df = df.apply(pd.to_numeric) # convert all columns of DataFrame

# convert just columns &quot;a&quot; and &quot;b&quot;
df[[&quot;a&quot;, &quot;b&quot;]] = df[[&quot;a&quot;, &quot;b&quot;]].apply(pd.to_numeric)
</code></pre>
<p>As long as your values can all be converted, that's probably all you need.</p>
<h2>Error handling</h2>
<p>But what if some values can't be converted to a numeric type?</p>
<p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>to_numeric()</code></a> also takes an <code>errors</code> keyword argument that allows you to force non-numeric values to be <code>NaN</code>, or simply ignore columns containing these values.</p>
<p>Here's an example using a Series of strings <code>s</code> which has the object dtype:</p>
<pre><code>&gt;&gt;&gt; s = pd.Series(['1', '2', '4.7', 'pandas', '10'])
&gt;&gt;&gt; s
0         1
1         2
2       4.7
3    pandas
4        10
dtype: object
</code></pre>
<p>The default behaviour is to raise if it can't convert a value. In this case, it can't cope with the string 'pandas':</p>
<pre><code>&gt;&gt;&gt; pd.to_numeric(s) # or pd.to_numeric(s, errors='raise')
ValueError: Unable to parse string
</code></pre>
<p>Rather than fail, we might want 'pandas' to be considered a missing/bad numeric value. We can coerce invalid values to <code>NaN</code> as follows using the <code>errors</code> keyword argument:</p>
<pre><code>&gt;&gt;&gt; pd.to_numeric(s, errors='coerce')
0     1.0
1     2.0
2     4.7
3     NaN
4    10.0
dtype: float64
</code></pre>
<p>The third option for <code>errors</code> is just to ignore the operation if an invalid value is encountered:</p>
<pre><code>&gt;&gt;&gt; pd.to_numeric(s, errors='ignore')
# the original Series is returned untouched
</code></pre>
<p>This last option is particularly useful for converting your entire DataFrame, but don't know which of our columns can be converted reliably to a numeric type. In that case, just write:</p>
<pre><code>df.apply(pd.to_numeric, errors='ignore')
</code></pre>
<p>The function will be applied to each column of the DataFrame. Columns that can be converted to a numeric type will be converted, while columns that cannot (e.g. they contain non-digit strings or dates) will be left alone.</p>
<h2>Downcasting</h2>
<p>By default, conversion with <a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>to_numeric()</code></a> will give you either an <code>int64</code> or <code>float64</code> dtype (or whatever integer width is native to your platform).</p>
<p>That's usually what you want, but what if you wanted to save some memory and use a more compact dtype, like <code>float32</code>, or <code>int8</code>?</p>
<p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>to_numeric()</code></a> gives you the option to downcast to either <code>'integer'</code>, <code>'signed'</code>, <code>'unsigned'</code>, <code>'float'</code>. Here's an example for a simple series <code>s</code> of integer type:</p>
<pre><code>&gt;&gt;&gt; s = pd.Series([1, 2, -7])
&gt;&gt;&gt; s
0    1
1    2
2   -7
dtype: int64
</code></pre>
<p>Downcasting to <code>'integer'</code> uses the smallest possible integer that can hold the values:</p>
<pre><code>&gt;&gt;&gt; pd.to_numeric(s, downcast='integer')
0    1
1    2
2   -7
dtype: int8
</code></pre>
<p>Downcasting to <code>'float'</code> similarly picks a smaller than normal floating type:</p>
<pre><code>&gt;&gt;&gt; pd.to_numeric(s, downcast='float')
0    1.0
1    2.0
2   -7.0
dtype: float32
</code></pre>
<hr />
<h1>2. <code>astype()</code></h1>
<p>The <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html"" rel=""noreferrer""><code>astype()</code></a> method enables you to be explicit about the dtype you want your DataFrame or Series to have. It's very versatile in that you can try and go from one type to any other.</p>
<h2>Basic usage</h2>
<p>Just pick a type: you can use a NumPy dtype (e.g. <code>np.int16</code>), some Python types (e.g. bool), or pandas-specific types (like the categorical dtype).</p>
<p>Call the method on the object you want to convert and <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html"" rel=""noreferrer""><code>astype()</code></a> will try and convert it for you:</p>
<pre><code># convert all DataFrame columns to the int64 dtype
df = df.astype(int)

# convert column &quot;a&quot; to int64 dtype and &quot;b&quot; to complex type
df = df.astype({&quot;a&quot;: int, &quot;b&quot;: complex})

# convert Series to float16 type
s = s.astype(np.float16)

# convert Series to Python strings
s = s.astype(str)

# convert Series to categorical type - see docs for more details
s = s.astype('category')
</code></pre>
<p>Notice I said &quot;try&quot; - if <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html"" rel=""noreferrer""><code>astype()</code></a> does not know how to convert a value in the Series or DataFrame, it will raise an error. For example, if you have a <code>NaN</code> or <code>inf</code> value you'll get an error trying to convert it to an integer.</p>
<p>As of pandas 0.20.0, this error can be suppressed by passing <code>errors='ignore'</code>. Your original object will be returned untouched.</p>
<h2>Be careful</h2>
<p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html"" rel=""noreferrer""><code>astype()</code></a> is powerful, but it will sometimes convert values &quot;incorrectly&quot;. For example:</p>
<pre><code>&gt;&gt;&gt; s = pd.Series([1, 2, -7])
&gt;&gt;&gt; s
0    1
1    2
2   -7
dtype: int64
</code></pre>
<p>These are small integers, so how about converting to an unsigned 8-bit type to save memory?</p>
<pre><code>&gt;&gt;&gt; s.astype(np.uint8)
0      1
1      2
2    249
dtype: uint8
</code></pre>
<p>The conversion worked, but the -7 was wrapped round to become 249 (i.e. 2<sup>8</sup> - 7)!</p>
<p>Trying to downcast using <code>pd.to_numeric(s, downcast='unsigned')</code> instead could help prevent this error.</p>
<hr />
<h1>3. <code>infer_objects()</code></h1>
<p>Version 0.21.0 of pandas introduced the method <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.infer_objects.html"" rel=""noreferrer""><code>infer_objects()</code></a> for converting columns of a DataFrame that have an object datatype to a more specific type (soft conversions).</p>
<p>For example, here's a DataFrame with two columns of object type. One holds actual integers and the other holds strings representing integers:</p>
<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'a': [7, 1, 5], 'b': ['3','2','1']}, dtype='object')
&gt;&gt;&gt; df.dtypes
a    object
b    object
dtype: object
</code></pre>
<p>Using <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.infer_objects.html"" rel=""noreferrer""><code>infer_objects()</code></a>, you can change the type of column 'a' to int64:</p>
<pre><code>&gt;&gt;&gt; df = df.infer_objects()
&gt;&gt;&gt; df.dtypes
a     int64
b    object
dtype: object
</code></pre>
<p>Column 'b' has been left alone since its values were strings, not integers. If you wanted to force both columns to an integer type, you could use <code>df.astype(int)</code> instead.</p>
<hr />
<h1>4. <code>convert_dtypes()</code></h1>
<p>Version 1.0 and above includes a method <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.convert_dtypes.html"" rel=""noreferrer""><code>convert_dtypes()</code></a> to convert Series and DataFrame columns to the best possible dtype that supports the <code>pd.NA</code> missing value.</p>
<p>Here &quot;best possible&quot; means the type most suited to hold the values. For example, this a pandas integer type, if all of the values are integers (or missing values): an object column of Python integer objects are converted to <code>Int64</code>, a column of NumPy <code>int32</code> values, will become the pandas dtype <code>Int32</code>.</p>
<p>With our <code>object</code> DataFrame <code>df</code>, we get the following result:</p>
<pre><code>&gt;&gt;&gt; df.convert_dtypes().dtypes                                             
a     Int64
b    string
dtype: object
</code></pre>
<p>Since column 'a' held integer values, it was converted to the <code>Int64</code> type (which is capable of holding missing values, unlike <code>int64</code>).</p>
<p>Column 'b' contained string objects, so was changed to pandas' <code>string</code> dtype.</p>
<p>By default, this method will infer the type from object values in each column. We can change this by passing <code>infer_objects=False</code>:</p>
<pre><code>&gt;&gt;&gt; df.convert_dtypes(infer_objects=False).dtypes                          
a    object
b    string
dtype: object
</code></pre>
<p>Now column 'a' remained an object column: pandas knows it can be described as an 'integer' column (internally it ran <a href=""https://github.com/pandas-dev/pandas/blob/6b2d0260c818e62052eaf535767f3a8c4b446c69/pandas/_libs/lib.pyx#L1188-L1434"" rel=""noreferrer""><code>infer_dtype</code></a>) but didn't infer exactly what dtype of integer it should have so did not convert it. Column 'b' was again converted to 'string' dtype as it was recognised as holding 'string' values.</p>
"
What are the differences between type() and isinstance()?,https://stackoverflow.com/questions/1549801/what-are-the-differences-between-type-and-isinstance,1573,python;oop;inheritance;types,"<p>To summarize the contents of other (already good!) answers, <code>isinstance</code> caters for inheritance (an instance of a derived class <em>is an</em> instance of a base class, too), while checking for equality of <code>type</code> does not (it demands identity of types and rejects instances of subtypes, AKA subclasses).</p>

<p>Normally, in Python, you want your code to support inheritance, of course (since inheritance is so handy, it would be bad to stop code using yours from using it!), so <code>isinstance</code> is less bad than checking identity of <code>type</code>s because it seamlessly supports inheritance.</p>

<p>It's not that <code>isinstance</code> is <em>good</em>, mind you—it's just <em>less bad</em> than checking equality of types.  The normal, Pythonic, preferred solution is almost invariably ""duck typing"": try using the argument <em>as if</em> it was of a certain desired type, do it in a <code>try</code>/<code>except</code> statement catching all exceptions that could arise if the argument was not in fact of that type (or any other type nicely duck-mimicking it;-), and in the <code>except</code> clause, try something else (using the argument ""as if"" it was of some other type).</p>

<p><code>basestring</code> <strong>is</strong>, however, quite a special case—a builtin type that exists <strong>only</strong> to let you use <code>isinstance</code> (both <code>str</code> and <code>unicode</code> subclass <code>basestring</code>). Strings are sequences (you could loop over them, index them, slice them, ...), but you generally want to treat them as ""scalar"" types—it's somewhat incovenient (but a reasonably frequent use case) to treat all kinds of strings (and maybe other scalar types, i.e., ones you can't loop on) one way, all containers (lists, sets, dicts, ...) in another way, and <code>basestring</code> plus <code>isinstance</code> helps you do that—the overall structure of this idiom is something like:</p>

<pre><code>if isinstance(x, basestring)
  return treatasscalar(x)
try:
  return treatasiter(iter(x))
except TypeError:
  return treatasscalar(x)
</code></pre>

<p>You could say that <code>basestring</code> is an <em>Abstract Base Class</em> (""ABC"")—it offers no concrete functionality to subclasses, but rather exists as a ""marker"", mainly for use with <code>isinstance</code>. The concept is obviously a growing one in Python, since <a href=""http://www.python.org/dev/peps/pep-3119/"" rel=""noreferrer"">PEP 3119</a>, which introduces a generalization of it, was accepted and has been implemented starting with Python 2.6 and 3.0.</p>

<p>The PEP makes it clear that, while ABCs can often substitute for duck typing, there is generally no big pressure to do that (see <a href=""http://www.python.org/dev/peps/pep-3119/#abcs-vs-duck-typing"" rel=""noreferrer"">here</a>). ABCs as implemented in recent Python versions do however offer extra goodies: <code>isinstance</code> (and <code>issubclass</code>) can now mean more than just ""[an instance of] a derived class"" (in particular, any class can be ""registered"" with an ABC so that it will show as a subclass, and its instances as instances of the ABC); and ABCs can also offer extra convenience to actual subclasses in a very natural way via Template Method design pattern applications (see <a href=""http://en.wikipedia.org/wiki/Template_method_pattern"" rel=""noreferrer"">here</a> and <a href=""http://www.catonmat.net/blog/learning-python-design-patterns-through-video-lectures/"" rel=""noreferrer"">here</a> [[part II]] for more on the TM DP, in general and specifically in Python, independent of ABCs).</p>

<p>For the underlying mechanics of ABC support as offered in Python 2.6, see <a href=""http://docs.python.org/library/abc.html"" rel=""noreferrer"">here</a>; for their 3.1 version, very similar, see <a href=""http://docs.python.org/3.1/library/abc.html"" rel=""noreferrer"">here</a>.  In both versions, standard library module <a href=""http://docs.python.org/3.1/library/collections.html#module-collections"" rel=""noreferrer"">collections</a> (that's the 3.1 version—for the very similar 2.6 version, see <a href=""http://docs.python.org/library/collections.html#module-collections"" rel=""noreferrer"">here</a>) offers several useful ABCs.</p>

<p>For the purpose of this answer, the key thing to retain about ABCs (beyond an arguably more natural placement for TM DP functionality, compared to the classic Python alternative of mixin classes such as <a href=""http://docs.python.org/library/userdict.html?highlight=userdict#UserDict.DictMixin"" rel=""noreferrer"">UserDict.DictMixin</a>) is that they make <code>isinstance</code> (and <code>issubclass</code>) much more attractive and pervasive (in Python 2.6 and going forward) than they used to be (in 2.5 and before), and therefore, by contrast, make checking type equality an even worse practice in recent Python versions than it already used to be.</p>
"
Is there a built-in function to print all the current properties and values of an object?,https://stackoverflow.com/questions/192109/is-there-a-built-in-function-to-print-all-the-current-properties-and-values-of-a,1531,python;debugging;introspection;pretty-print;python-datamodel,"<p>You are really mixing together two different things.</p>

<p>Use <a href=""https://docs.python.org/3/library/functions.html#dir"" rel=""noreferrer""><code>dir()</code></a>, <a href=""https://docs.python.org/3/library/functions.html#vars"" rel=""noreferrer""><code>vars()</code></a> or the <a href=""https://docs.python.org/3/library/inspect.html"" rel=""noreferrer""><code>inspect</code></a> module to get what you are interested in (I use <code>__builtins__</code> as an example; you can use any object instead).</p>

<pre><code>&gt;&gt;&gt; l = dir(__builtins__)
&gt;&gt;&gt; d = __builtins__.__dict__
</code></pre>

<p>Print that dictionary however fancy you like:</p>

<pre><code>&gt;&gt;&gt; print l
['ArithmeticError', 'AssertionError', 'AttributeError',...
</code></pre>

<p>or</p>

<pre><code>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(l)
['ArithmeticError',
 'AssertionError',
 'AttributeError',
 'BaseException',
 'DeprecationWarning',
...

&gt;&gt;&gt; pprint(d, indent=2)
{ 'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;,
  'AssertionError': &lt;type 'exceptions.AssertionError'&gt;,
  'AttributeError': &lt;type 'exceptions.AttributeError'&gt;,
...
  '_': [ 'ArithmeticError',
         'AssertionError',
         'AttributeError',
         'BaseException',
         'DeprecationWarning',
...
</code></pre>

<p>Pretty printing is also available in the interactive debugger as a command:</p>

<pre><code>(Pdb) pp vars()
{'__builtins__': {'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;,
                  'AssertionError': &lt;type 'exceptions.AssertionError'&gt;,
                  'AttributeError': &lt;type 'exceptions.AttributeError'&gt;,
                  'BaseException': &lt;type 'exceptions.BaseException'&gt;,
                  'BufferError': &lt;type 'exceptions.BufferError'&gt;,
                  ...
                  'zip': &lt;built-in function zip&gt;},
 '__file__': 'pass.py',
 '__name__': '__main__'}
</code></pre>
"
How to convert string to bytes in Python 3,https://stackoverflow.com/questions/7585435/how-to-convert-string-to-bytes-in-python-3,1527,python;string;character-encoding;python-3.x,"<p>If you look at the docs for <code>bytes</code>, it points you to <a href=""https://docs.python.org/3/library/functions.html#func-bytearray"" rel=""noreferrer""><code>bytearray</code></a>:</p>
<blockquote>
<p>bytearray([source[, encoding[, errors]]])</p>
<p>Return a new array of bytes. The bytearray type is a mutable sequence of integers in the range 0 &lt;= x &lt; 256. It has most of the usual methods of mutable sequences, described in Mutable Sequence Types, as well as most methods that the bytes type has, see Bytes and Byte Array Methods.</p>
<p>The optional source parameter can be used to initialize the array in a few different ways:</p>
<p><strong>If it is a string, you must also give the encoding (and optionally, errors) parameters; bytearray() then converts the string to bytes using str.encode().</strong></p>
<p><strong>If it is an integer, the array will have that size and will be initialized with null bytes.</strong></p>
<p><strong>If it is an object conforming to the buffer interface, a read-only buffer of the object will be used to initialize the bytes array.</strong></p>
<p><strong>If it is an iterable, it must be an iterable of integers in the range 0 &lt;= x &lt; 256, which are used as the initial contents of the array.</strong></p>
<p><strong>Without an argument, an array of size 0 is created.</strong></p>
</blockquote>
<p>So <code>bytes</code> can do much more than just encode a string. It's Pythonic that it would allow you to call the constructor with any type of source parameter that makes sense.</p>
<p>For  encoding a string, I think that <code>some_string.encode(encoding)</code> is more Pythonic than using the constructor, because it is the most self documenting -- &quot;take this string and encode it with this encoding&quot; is clearer than <code>bytes(some_string, encoding)</code> -- there is no explicit verb when you use the constructor.</p>
<p>I checked the Python source. If you pass a unicode string to <code>bytes</code> using CPython, it calls <a href=""http://hg.python.org/cpython/file/5a12416890c0/Objects/unicodeobject.c#l2328"" rel=""noreferrer"">PyUnicode_AsEncodedString</a>, which is the implementation of <code>encode</code>; so you're just skipping a level of indirection if you call <code>encode</code> yourself.</p>
<p>Also, see Serdalis' comment -- <code>unicode_string.encode(encoding)</code> is also more Pythonic because its inverse is <code>byte_string.decode(encoding)</code> and symmetry is nice.</p>
"
How do I move a file in Python?,https://stackoverflow.com/questions/8858008/how-do-i-move-a-file-in-python,1517,python;file;file-handling;python-os,"<p><a href=""http://docs.python.org/library/os.html#os.rename"" rel=""noreferrer""><code>os.rename()</code></a>, <a href=""https://docs.python.org/library/os.html#os.replace"" rel=""noreferrer""><code>os.replace()</code></a>, or <a href=""http://docs.python.org/library/shutil.html#shutil.move"" rel=""noreferrer""><code>shutil.move()</code></a></p>
<p>All employ the same syntax:</p>
<pre><code>import os
import shutil

os.rename(&quot;path/to/current/file.foo&quot;, &quot;path/to/new/destination/for/file.foo&quot;)
os.replace(&quot;path/to/current/file.foo&quot;, &quot;path/to/new/destination/for/file.foo&quot;)
shutil.move(&quot;path/to/current/file.foo&quot;, &quot;path/to/new/destination/for/file.foo&quot;)
</code></pre>
<ul>
<li>The filename (<code>&quot;file.foo&quot;</code>) must be included in both the source and destination arguments. If it differs between the two, the file will be renamed as well as moved.</li>
<li>The directory within which the new file is being created must already exist.</li>
<li>On Windows, a file with that name must not exist or an exception will be raised, but <code>os.replace()</code> will silently replace a file even in that occurrence.</li>
<li><code>shutil.move</code> simply calls <code>os.rename</code> in most cases. However, if the destination is on a different disk than the source, it will instead copy and then delete the source file.</li>
</ul>
"
UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode character u&#39;\xa0&#39; in position 20: ordinal not in range(128),https://stackoverflow.com/questions/9942594/unicodeencodeerror-ascii-codec-cant-encode-character-u-xa0-in-position-20,1516,python;unicode;beautifulsoup;python-2.x;python-unicode,"<p>Read the Python <a href=""https://docs.python.org/2.7/howto/unicode.html"" rel=""noreferrer"">Unicode HOWTO</a>. This error is the <a href=""https://docs.python.org/2.7/howto/unicode.html#the-unicode-type"" rel=""noreferrer"">very first example</a>.</p>
<p>Do not use <code>str()</code> to convert from unicode to encoded text / bytes.</p>
<p>Instead, use <a href=""http://docs.python.org/library/stdtypes.html#str.encode"" rel=""noreferrer""><code>.encode()</code></a> to encode the string:</p>
<pre><code>p.agent_info = u' '.join((agent_contact, agent_telno)).encode('utf-8').strip()
</code></pre>
<p>or work entirely in unicode.</p>
"
Removing duplicates in lists,https://stackoverflow.com/questions/7961363/removing-duplicates-in-lists,1512,python;algorithm;list;duplicates;intersection,"<p>The common approach to get a unique collection of items is to use a <a href=""http://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset"" rel=""noreferrer""><code>set</code></a>. Sets are <em>unordered</em> collections of <em>distinct</em> objects. To create a set from any iterable, you can simply pass it to the built-in <a href=""http://docs.python.org/3/library/functions.html#func-set"" rel=""noreferrer""><code>set()</code></a> function. If you later need a real list again, you can similarly pass the set to the <a href=""http://docs.python.org/3/library/functions.html#func-list"" rel=""noreferrer""><code>list()</code></a> function.</p>
<p>The following example should cover whatever you are trying to do:</p>
<pre><code>&gt;&gt;&gt; t = [1, 2, 3, 1, 2, 3, 5, 6, 7, 8]
&gt;&gt;&gt; list(set(t))
[1, 2, 3, 5, 6, 7, 8]
&gt;&gt;&gt; s = [1, 2, 3]
&gt;&gt;&gt; list(set(t) - set(s))
[8, 5, 6, 7]
</code></pre>
<p>As you can see from the example result, <em>the original order is not maintained</em>. As mentioned above, sets themselves are unordered collections, so the order is lost. When converting a set back to a list, an arbitrary order is created.</p>
<h3>Maintaining order</h3>
<p>If order is important to you, then you will have to use a different mechanism. A very common solution for this is to rely on <a href=""https://docs.python.org/3/library/collections.html#collections.OrderedDict"" rel=""noreferrer""><code>OrderedDict</code></a> to keep the order of keys during insertion:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; list(OrderedDict.fromkeys(t))
[1, 2, 3, 5, 6, 7, 8]
</code></pre>
<p><a href=""https://mail.python.org/pipermail/python-dev/2017-December/151283.html"" rel=""noreferrer"">Starting with Python 3.7</a>, the built-in dictionary is guaranteed to maintain the insertion order as well, so you can also use that directly if you are on Python 3.7 or later (or CPython 3.6):</p>
<pre><code>&gt;&gt;&gt; list(dict.fromkeys(t))
[1, 2, 3, 5, 6, 7, 8]
</code></pre>
<p>Note that this may have some overhead of creating a dictionary first, and then creating a list from it. If you don’t actually need to preserve the order, you’re often better off using a set, especially because it gives you a lot more operations to work with. Check out <a href=""https://stackoverflow.com/q/480214/216074"">this question</a> for more details and alternative ways to preserve the order when removing duplicates.</p>
<hr />
<p>Finally note that both the <code>set</code> as well as the <code>OrderedDict</code>/<code>dict</code> solutions require your items to be <em>hashable</em>. This usually means that they have to be immutable. If you have to deal with items that are not hashable (e.g. list objects), then you will have to use a slow approach in which you will basically have to compare every item with every other item in a nested loop.</p>
"
What is the use of &quot;assert&quot; in Python?,https://stackoverflow.com/questions/5142418/what-is-the-use-of-assert-in-python,1511,python;exception;assert;assertion,"<p>The <code>assert</code> statement exists in almost every programming language. It has two main uses:</p>
<ol>
<li><p>It helps detect problems early in your program, where the cause is clear, rather than later when some other operation fails. A type error in Python, for example, can go through several layers of code before actually raising an <code>Exception</code> if not caught early on.</p>
</li>
<li><p>It works as documentation for other developers reading the code, who see the <code>assert</code> and can confidently say that its condition holds from now on.</p>
</li>
</ol>
<p>When you do...</p>
<pre><code>assert condition
</code></pre>
<p>... you're telling the program to test that condition, and immediately trigger an error if the condition is false.</p>
<p>In Python, it's roughly equivalent to this:</p>
<pre><code>if not condition:
    raise AssertionError()
</code></pre>
<p>Try it in the Python shell:</p>
<pre><code>&gt;&gt;&gt; assert True # nothing happens
&gt;&gt;&gt; assert False
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
AssertionError
</code></pre>
<p>Assertions can include an optional message, and you can disable them when running the interpreter.</p>
<p>To print a message if the assertion fails:</p>
<pre><code>assert False, &quot;Oh no! This assertion failed!&quot;
</code></pre>
<p>Do <strong>not</strong> use parenthesis to call <code>assert</code> like a function. It is a statement. If you do <code>assert(condition, message)</code> you'll be running the <code>assert</code> with a <code>(condition, message)</code> tuple as first parameter.</p>
<p>As for disabling them, when running <code>python</code> in optimized mode, where <code>__debug__</code> is <code>False</code>, assert statements will be ignored. Just pass the <code>-O</code> flag:</p>
<pre><code>python -O script.py
</code></pre>
<p>See <a href=""http://docs.python.org/reference/simple_stmts.html#assert"" rel=""noreferrer"">here</a> for the relevant documentation.</p>
"
How do I get the full path of the current file&#39;s directory?,https://stackoverflow.com/questions/3430372/how-do-i-get-the-full-path-of-the-current-files-directory,1510,python;directory,"<p>The special variable <a href=""https://stackoverflow.com/questions/9271464/what-does-the-file-variable-mean-do""><code>__file__</code></a> contains the path to the current file. From that we can get the directory using either <a href=""https://docs.python.org/3/library/pathlib.html"" rel=""noreferrer""><code>pathlib</code></a> or the <a href=""https://docs.python.org/3.8/library/os.path.html"" rel=""noreferrer""><code>os.path</code></a> module.</p>
<h2>Python 3</h2>
<p>For the directory of the script being run:</p>
<pre><code>import pathlib
pathlib.Path(__file__).parent.resolve()
</code></pre>
<p>For the current working directory:</p>
<pre><code>import pathlib
pathlib.Path().resolve()
</code></pre>
<h2>Python 2 and 3</h2>
<p>For the directory of the script being run:</p>
<pre><code>import os
os.path.dirname(os.path.abspath(__file__))
</code></pre>
<p>If you mean the current working directory:</p>
<pre><code>import os
os.path.abspath(os.getcwd())
</code></pre>
<p>Note that before and after <code>file</code> is two underscores, not just one.</p>
<p>Also note that if you are running interactively or have loaded code from something other than a file (eg: a database or online resource), <code>__file__</code> may not be set since there is no notion of &quot;current file&quot;. The above answer assumes the most common scenario of running a python script that is in a file.</p>
<h2>References</h2>
<ol>
<li><a href=""https://docs.python.org/3/library/pathlib.html"" rel=""noreferrer"">pathlib</a> in the python documentation.</li>
<li><a href=""https://docs.python.org/2.7/library/os.path.html"" rel=""noreferrer"">os.path - Python 2.7</a>, <a href=""https://docs.python.org/3/library/os.path.html"" rel=""noreferrer"">os.path - Python 3</a></li>
<li><a href=""https://docs.python.org/2.7/library/os.html#os.getcwd"" rel=""noreferrer"">os.getcwd - Python 2.7</a>, <a href=""https://docs.python.org/3/library/os.html#os.getcwd"" rel=""noreferrer"">os.getcwd - Python 3</a></li>
<li><a href=""https://stackoverflow.com/questions/9271464/what-does-the-file-variable-mean-do"">what does the __file__ variable mean/do?</a></li>
</ol>
"
How do I print an exception in Python?,https://stackoverflow.com/questions/1483429/how-do-i-print-an-exception-in-python,1508,python;exception;error-handling,"<p>For Python 2.6 and later and Python 3.x:</p>

<pre><code>except Exception as e: print(e)
</code></pre>

<p>For Python 2.5 and earlier, use:</p>

<pre><code>except Exception,e: print str(e)
</code></pre>
"
Null object in Python,https://stackoverflow.com/questions/3289601/null-object-in-python,1508,python;object;null,"<p>In Python, the 'null' object is the singleton <code>None</code>.</p>
<p>To check if something is <code>None</code>, use the <a href=""https://docs.python.org/3/reference/expressions.html#is"" rel=""noreferrer""><code>is</code></a> identity operator:</p>
<pre><code>if foo is None:
    ...
</code></pre>
"
Why can&#39;t Python parse this JSON data?,https://stackoverflow.com/questions/2835559/why-cant-python-parse-this-json-data,1503,python;json;parsing,"<p>Your data is not valid <a href=""https://www.json.org/"" rel=""nofollow noreferrer"">JSON</a> format. You have <code>[]</code> when you should have <code>{}</code> for the <code>&quot;masks&quot;</code> and <code>&quot;parameters&quot;</code> elements:</p>
<ul>
<li><code>[]</code> are for JSON arrays, which are called <code>list</code> in Python</li>
<li><code>{}</code> are for JSON objects, which are called <code>dict</code> in Python</li>
</ul>
<p>Here's how your JSON file should look:</p>
<pre class=""lang-json prettyprint-override""><code>{
    &quot;maps&quot;: [
        {
            &quot;id&quot;: &quot;blabla&quot;,
            &quot;iscategorical&quot;: &quot;0&quot;
        },
        {
            &quot;id&quot;: &quot;blabla&quot;,
            &quot;iscategorical&quot;: &quot;0&quot;
        }
    ],
    &quot;masks&quot;: {
        &quot;id&quot;: &quot;valore&quot;
    },
    &quot;om_points&quot;: &quot;value&quot;,
    &quot;parameters&quot;: {
        &quot;id&quot;: &quot;valore&quot;
    }
}
</code></pre>
<p>Then you can use your code:</p>
<pre class=""lang-py prettyprint-override""><code>import json
from pprint import pprint

with open('data.json') as f:
    data = json.load(f)

pprint(data)
</code></pre>
<p>With data, you can now also find values like so:</p>
<pre class=""lang-py prettyprint-override""><code>data[&quot;maps&quot;][0][&quot;id&quot;]
data[&quot;masks&quot;][&quot;id&quot;]
data[&quot;om_points&quot;]
</code></pre>
<p>Try those out and see if it starts to make sense.</p>
"
How do I check which version of Python is running my script?,https://stackoverflow.com/questions/1093322/how-do-i-check-which-version-of-python-is-running-my-script,1499,python;version,"<p>This information is available in the <a href=""http://docs.python.org/library/sys.html#sys.version"" rel=""noreferrer""><code>sys.version</code></a> string in the <a href=""http://docs.python.org/library/sys.html"" rel=""noreferrer""><code>sys</code></a> module:</p>
<pre><code>&gt;&gt;&gt; import sys
</code></pre>
<p>Human readable:</p>
<pre><code>&gt;&gt;&gt; print(sys.version)  # parentheses necessary in python 3.       
2.5.2 (r252:60911, Jul 31 2008, 17:28:52) 
[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)]
</code></pre>
<p>For further processing, use <a href=""http://docs.python.org/library/sys.html#sys.version_info"" rel=""noreferrer""><code>sys.version_info</code></a> or <a href=""http://docs.python.org/library/sys.html#sys.hexversion"" rel=""noreferrer""><code>sys.hexversion</code></a>:</p>
<pre><code>&gt;&gt;&gt; sys.version_info
(2, 5, 2, 'final', 0)
# or
&gt;&gt;&gt; sys.hexversion
34014192
</code></pre>
<p>To ensure a script runs with a minimal version requirement of the Python interpreter add this to your code:</p>
<pre><code>assert sys.version_info &gt;= (2, 5)
</code></pre>
<p>This compares major and minor version information. Add micro (=<code>0</code>, <code>1</code>, etc) and even releaselevel (=<code>'alpha'</code>,<code>'final'</code>, etc) to the tuple as you like. Note however, that it is almost always better to &quot;duck&quot; check if a certain feature is there, and if not, workaround (or bail out). Sometimes features go away in newer releases, being replaced by others.</p>
"
How to make a class JSON serializable,https://stackoverflow.com/questions/3768895/how-to-make-a-class-json-serializable,1495,python;json;serialization,"<p>Do you have an idea about the expected output? For example, will this do?</p>
<pre><code>&gt;&gt;&gt; f  = FileItem(&quot;/foo/bar&quot;)
&gt;&gt;&gt; magic(f)
'{&quot;fname&quot;: &quot;/foo/bar&quot;}'
</code></pre>
<p>In that case you can merely call <code>json.dumps(f.__dict__)</code>.</p>
<p>If you want more customized output then you will have to subclass <a href=""https://docs.python.org/library/json.html#json.JSONEncoder"" rel=""nofollow noreferrer""><code>JSONEncoder</code></a> and implement your own custom serialization.</p>
<p>For a trivial example, see below.</p>
<pre><code>&gt;&gt;&gt; from json import JSONEncoder
&gt;&gt;&gt; class MyEncoder(JSONEncoder):
        def default(self, o):
            return o.__dict__
    
&gt;&gt;&gt; MyEncoder().encode(f)
'{&quot;fname&quot;: &quot;/foo/bar&quot;}'
</code></pre>
<p>Then you pass this class into the <a href=""https://docs.python.org/library/json.html#json.dumps"" rel=""nofollow noreferrer""><code>json.dumps()</code></a> method as <code>cls</code> kwarg:</p>
<pre><code>json.dumps(cls=MyEncoder)
</code></pre>
<p>If you also want to decode then you'll have to supply a custom <code>object_hook</code> to the <a href=""https://docs.python.org/library/json.html#json.JSONDecoder"" rel=""nofollow noreferrer""><code>JSONDecoder</code></a> class. For example:</p>
<pre><code>&gt;&gt;&gt; def from_json(json_object):
        if 'fname' in json_object:
            return FileItem(json_object['fname'])
&gt;&gt;&gt; f = JSONDecoder(object_hook = from_json).decode('{&quot;fname&quot;: &quot;/foo/bar&quot;}')
&gt;&gt;&gt; f
&lt;__main__.FileItem object at 0x9337fac&gt;
&gt;&gt;&gt; 
</code></pre>
"
Automatically create file &#39;requirements.txt&#39;,https://stackoverflow.com/questions/31684375/automatically-create-file-requirements-txt,1489,python;dependencies;python-import;requirements.txt,"<p>Use <a href=""https://packaging.python.org/tutorials/managing-dependencies/#managing-dependencies"" rel=""noreferrer"">Pipenv or other tools</a> is recommended for improving your development flow.</p>
<pre><code>pip3 freeze &gt; requirements.txt  # Python3
pip freeze &gt; requirements.txt  # Python2
</code></pre>
<p>If you do not use a virtual environment, <a href=""https://github.com/damnever/pigar"" rel=""noreferrer"">pigar</a> will be a good choice for you.</p>
"
How to deal with SettingWithCopyWarning in Pandas,https://stackoverflow.com/questions/20625582/how-to-deal-with-settingwithcopywarning-in-pandas,1484,python;pandas;dataframe;chained-assignment;pandas-settingwithcopy-warning,"<p>The <code>SettingWithCopyWarning</code> was created to flag potentially confusing &quot;chained&quot; assignments, such as the following, which does not always work as expected, particularly when the first selection returns a <em>copy</em>.  [see <a href=""https://github.com/pydata/pandas/pull/5390"" rel=""noreferrer"">GH5390</a> and <a href=""https://github.com/pydata/pandas/issues/5597"" rel=""noreferrer"">GH5597</a> for background discussion.]</p>
<pre><code>df[df['A'] &gt; 2]['B'] = new_val  # new_val not set in df
</code></pre>
<p>The warning offers a suggestion to rewrite as follows:</p>
<pre><code>df.loc[df['A'] &gt; 2, 'B'] = new_val
</code></pre>
<p>However, this doesn't fit your usage, which is equivalent to:</p>
<pre><code>df = df[df['A'] &gt; 2]
df['B'] = new_val
</code></pre>
<p>While it's clear that you don't care about writes making it back to the original frame (since you are overwriting the reference to it), unfortunately this pattern cannot be differentiated from the first chained assignment example. Hence the (false positive) warning. The potential for false positives is addressed in the <a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy"" rel=""noreferrer"">docs on indexing</a>, if you'd like to read further.  You can safely disable this new warning with the following assignment.</p>
<pre><code>import pandas as pd
pd.options.mode.chained_assignment = None  # default='warn'
</code></pre>
<hr />
<h2>Other Resources</h2>
<ul>
<li><a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html"" rel=""noreferrer"">pandas User Guide: Indexing and selecting data</a></li>
<li><a href=""https://jakevdp.github.io/PythonDataScienceHandbook/03.02-data-indexing-and-selection.html"" rel=""noreferrer"">Python Data Science Handbook: Data Indexing and Selection</a></li>
<li><a href=""https://realpython.com/pandas-settingwithcopywarning/"" rel=""noreferrer"">Real Python: SettingWithCopyWarning in Pandas: Views vs Copies</a></li>
<li><a href=""https://www.dataquest.io/blog/settingwithcopywarning/"" rel=""noreferrer"">Dataquest: SettingwithCopyWarning: How to Fix This Warning in Pandas</a></li>
<li><a href=""https://towardsdatascience.com/explaining-the-settingwithcopywarning-in-pandas-ebc19d799d25"" rel=""noreferrer"">Towards Data Science: Explaining the SettingWithCopyWarning in pandas</a></li>
</ul>
"
Running shell command and capturing the output,https://stackoverflow.com/questions/4760215/running-shell-command-and-capturing-the-output,1479,python;shell;subprocess,"<p>In all officially maintained versions of Python, the simplest approach is to use the <a href=""https://docs.python.org/3/library/subprocess.html#subprocess.check_output"" rel=""noreferrer""><code>subprocess.check_output</code></a> function:</p>
<pre><code>&gt;&gt;&gt; subprocess.check_output(['ls', '-l'])
b'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p><code>check_output</code> runs a single program that takes only arguments as input.<sup>1</sup> It returns the result exactly as printed to <code>stdout</code>. If you need to write input to <code>stdin</code>, skip ahead to the <code>run</code> or <code>Popen</code> sections. If you want to execute complex shell commands, see the note on <code>shell=True</code> at the end of this answer.</p>
<p>The <code>check_output</code> function works in all officially maintained versions of Python. But for more recent versions, a more flexible approach is available.</p>
<h3>Modern versions of Python (3.5 or higher): <code>run</code></h3>
<p>If you're using <strong>Python 3.5+</strong>, and <strong>do not need backwards compatibility</strong>, the new <a href=""https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module"" rel=""noreferrer""><code>run</code></a> function is recommended by the official documentation for most tasks. It provides a very general, high-level API for the <a href=""https://docs.python.org/3/library/subprocess.html"" rel=""noreferrer""><code>subprocess</code></a> module. To capture the output of a program, pass the <code>subprocess.PIPE</code> flag to the <code>stdout</code> keyword argument. Then access the <code>stdout</code> attribute of the returned <a href=""https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess"" rel=""noreferrer""><code>CompletedProcess</code></a> object:</p>
<pre><code>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; result = subprocess.run(['ls', '-l'], stdout=subprocess.PIPE)
&gt;&gt;&gt; result.stdout
b'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p>The return value is a <code>bytes</code> object, so if you want a proper string, you'll need to <code>decode</code> it. Assuming the called process returns a UTF-8-encoded string:</p>
<pre><code>&gt;&gt;&gt; result.stdout.decode('utf-8')
'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p>This can all be compressed to a one-liner if desired:</p>
<pre><code>&gt;&gt;&gt; subprocess.run(['ls', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8')
'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p>If you want to pass input to the process's <code>stdin</code>, you can pass a <code>bytes</code> object to the <code>input</code> keyword argument:</p>
<pre><code>&gt;&gt;&gt; cmd = ['awk', 'length($0) &gt; 5']
&gt;&gt;&gt; ip = 'foo\nfoofoo\n'.encode('utf-8')
&gt;&gt;&gt; result = subprocess.run(cmd, stdout=subprocess.PIPE, input=ip)
&gt;&gt;&gt; result.stdout.decode('utf-8')
'foofoo\n'
</code></pre>
<p>You can capture errors by passing <code>stderr=subprocess.PIPE</code> (capture to <code>result.stderr</code>) or <code>stderr=subprocess.STDOUT</code> (capture to <code>result.stdout</code> along with regular output). If you want <code>run</code> to throw an exception when the process returns a nonzero exit code, you can pass <code>check=True</code>. (Or you can check the <code>returncode</code> attribute of <code>result</code> above.) When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described at the end of this answer.</p>
<p>Later versions of Python streamline the above further. In Python 3.7+, the above one-liner can be spelled like this:</p>
<pre><code>&gt;&gt;&gt; subprocess.run(['ls', '-l'], capture_output=True, text=True).stdout
'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p>Using <code>run</code> this way adds just a bit of complexity, compared to the old way of doing things. But now you can do almost anything you need to do with the <code>run</code> function alone.</p>
<h3>Older versions of Python (3-3.4): more about <code>check_output</code></h3>
<p>If you are using an older version of Python, or need modest backwards compatibility, you can use the <code>check_output</code> function as briefly described above. It has been available since Python 2.7.</p>
<pre><code>subprocess.check_output(*popenargs, **kwargs)  
</code></pre>
<p>It takes takes the same arguments as <code>Popen</code> (see below), and returns a string containing the program's output. The beginning of this answer has a more detailed usage example. In Python 3.5+, <code>check_output</code> is equivalent to executing <code>run</code> with <code>check=True</code> and <code>stdout=PIPE</code>, and returning just the <code>stdout</code> attribute.</p>
<p>You can pass <code>stderr=subprocess.STDOUT</code> to ensure that error messages are included in the returned output. When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described at the end of this answer.</p>
<p>If you need to pipe from <code>stderr</code> or pass input to the process, <code>check_output</code> won't be up to the task. See the <code>Popen</code> examples below in that case.</p>
<h3>Complex applications and legacy versions of Python (2.6 and below): <code>Popen</code></h3>
<p>If you need deep backwards compatibility, or if you need more sophisticated functionality than <code>check_output</code> or <code>run</code> provide, you'll have to work directly with <code>Popen</code> objects, which encapsulate the low-level API for subprocesses.</p>
<p>The <code>Popen</code> constructor accepts either <strong>a single command</strong> without arguments, or <strong>a list</strong> containing a command as its first item, followed by any number of arguments, each as a separate item in the list. <a href=""https://docs.python.org/3/library/shlex.html"" rel=""noreferrer""><code>shlex.split</code></a> can help parse strings into appropriately formatted lists. <code>Popen</code> objects also accept a <a href=""https://docs.python.org/3/library/subprocess.html#subprocess.Popen"" rel=""noreferrer"">host of different arguments</a> for process IO management and low-level configuration.</p>
<p>To send input and capture output, <code>communicate</code> is almost always the preferred method. As in:</p>
<pre><code>output = subprocess.Popen([&quot;mycmd&quot;, &quot;myarg&quot;], 
                          stdout=subprocess.PIPE).communicate()[0]
</code></pre>
<p>Or</p>
<pre><code>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; p = subprocess.Popen(['ls', '-a'], stdout=subprocess.PIPE, 
...                                    stderr=subprocess.PIPE)
&gt;&gt;&gt; out, err = p.communicate()
&gt;&gt;&gt; print out
.
..
foo
</code></pre>
<p>If you set <code>stdin=PIPE</code>, <code>communicate</code> also allows you to pass data to the process via <code>stdin</code>:</p>
<pre><code>&gt;&gt;&gt; cmd = ['awk', 'length($0) &gt; 5']
&gt;&gt;&gt; p = subprocess.Popen(cmd, stdout=subprocess.PIPE,
...                           stderr=subprocess.PIPE,
...                           stdin=subprocess.PIPE)
&gt;&gt;&gt; out, err = p.communicate('foo\nfoofoo\n')
&gt;&gt;&gt; print out
foofoo
</code></pre>
<p>Note <a href=""https://stackoverflow.com/a/21867841/577088"">Aaron Hall's answer</a>, which indicates that on some systems, you may need to set <code>stdout</code>, <code>stderr</code>, and <code>stdin</code> all to <code>PIPE</code> (or <code>DEVNULL</code>) to get <code>communicate</code> to work at all.</p>
<p>In some rare cases, you may need complex, real-time output capturing. <a href=""https://stackoverflow.com/a/4760274/577088"">Vartec</a>'s answer suggests a way forward, but methods other than <code>communicate</code> are prone to deadlocks if not used carefully.</p>
<p>As with all the above functions, when security is not a concern, you can run more complex shell commands by passing <code>shell=True</code>.</p>
<h3>Notes</h3>
<p><strong>1. Running shell commands: the <code>shell=True</code> argument</strong></p>
<p>Normally, each call to <code>run</code>, <code>check_output</code>, or the <code>Popen</code> constructor executes a <em>single program</em>. That means no fancy bash-style pipes. If you want to run complex shell commands, you can pass <code>shell=True</code>, which all three functions support. For example:</p>
<pre><code>&gt;&gt;&gt; subprocess.check_output('cat books/* | wc', shell=True, text=True)
' 1299377 17005208 101299376\n'
</code></pre>
<p>However, doing this raises <a href=""https://docs.python.org/3/library/subprocess.html#security-considerations"" rel=""noreferrer"">security concerns</a>. If you're doing anything more than light scripting, you might be better off calling each process separately, and passing the output from each as an input to the next, via</p>
<pre><code>run(cmd, [stdout=etc...], input=other_output)
</code></pre>
<p>Or</p>
<pre><code>Popen(cmd, [stdout=etc...]).communicate(other_output)
</code></pre>
<p>The temptation to directly connect pipes is strong; resist it. Otherwise, you'll likely see deadlocks or have to do hacky things like <a href=""https://stackoverflow.com/questions/6341451/piping-together-several-subprocesses"">this</a>.</p>
"
How can I overcome &quot;datetime.datetime not JSON serializable&quot;?,https://stackoverflow.com/questions/11875770/how-can-i-overcome-datetime-datetime-not-json-serializable,1477,python;json,"<h1>Updated for 2018</h1>

<p>The original answer accommodated the way MongoDB ""date"" fields were represented as:</p>

<p><code>{""$date"": 1506816000000}</code></p>

<p>If you want a generic Python solution for serializing <code>datetime</code> to json, check out <a href=""https://stackoverflow.com/a/36142844/293064"">@jjmontes' answer</a> for a quick solution which requires no dependencies.</p>

<hr>

<p>As you are using mongoengine (per comments) and pymongo is a dependency, pymongo has built-in utilities to help with json serialization:<br>
<a href=""http://api.mongodb.org/python/1.10.1/api/bson/json_util.html"" rel=""noreferrer"">http://api.mongodb.org/python/1.10.1/api/bson/json_util.html</a></p>

<p>Example usage (serialization):</p>

<pre><code>from bson import json_util
import json

json.dumps(anObject, default=json_util.default)
</code></pre>

<p>Example usage (deserialization):</p>

<pre><code>json.loads(aJsonString, object_hook=json_util.object_hook)
</code></pre>

<hr>

<h2>Django</h2>

<p>Django provides a native <code>DjangoJSONEncoder</code> serializer that deals with this kind of properly.</p>

<p>See <a href=""https://docs.djangoproject.com/en/dev/topics/serialization/#djangojsonencoder"" rel=""noreferrer"">https://docs.djangoproject.com/en/dev/topics/serialization/#djangojsonencoder</a></p>

<pre><code>from django.core.serializers.json import DjangoJSONEncoder

return json.dumps(
  item,
  sort_keys=True,
  indent=1,
  cls=DjangoJSONEncoder
)
</code></pre>

<p>One difference I've noticed between <code>DjangoJSONEncoder</code> and using a custom <code>default</code> like this:</p>

<pre><code>import datetime
import json

def default(o):
    if isinstance(o, (datetime.date, datetime.datetime)):
        return o.isoformat()

return json.dumps(
  item,
  sort_keys=True,
  indent=1,
  default=default
)
</code></pre>

<p>Is that Django strips a bit of the data:</p>

<pre><code> ""last_login"": ""2018-08-03T10:51:42.990"", # DjangoJSONEncoder 
 ""last_login"": ""2018-08-03T10:51:42.990239"", # default
</code></pre>

<p>So, you may need to be careful about that in some cases.</p>
"
How to drop rows of Pandas DataFrame whose value in a certain column is NaN,https://stackoverflow.com/questions/13413590/how-to-drop-rows-of-pandas-dataframe-whose-value-in-a-certain-column-is-nan,1475,python;pandas;dataframe;indexing;nan,"<p>Don't drop, just take the rows where EPS is not NA:</p>

<pre class=""lang-py prettyprint-override""><code>df = df[df['EPS'].notna()]
</code></pre>
"
Display number with leading zeros,https://stackoverflow.com/questions/134934/display-number-with-leading-zeros,1470,python;integer;string-formatting,"<p>In Python 2 (and Python 3) you can do:</p>
<pre><code>number = 1
print(&quot;%02d&quot; % (number,))
</code></pre>
<p>Basically <strong>%</strong> is like <code>printf</code> or <code>sprintf</code> (see <a href=""https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting"" rel=""noreferrer"">docs</a>).</p>
<hr />
<p>For Python 3.+, the same behavior can also be achieved with <a href=""https://docs.python.org/3/library/stdtypes.html#str.format"" rel=""noreferrer""><code>format</code></a>:</p>
<pre><code>number = 1
print(&quot;{:02d}&quot;.format(number))
</code></pre>
<hr />
<p>For Python 3.6+ the same behavior can be achieved with <a href=""https://docs.python.org/3/reference/lexical_analysis.html#f-strings"" rel=""noreferrer"">f-strings</a>:</p>
<pre><code>number = 1
print(f&quot;{number:02d}&quot;)
</code></pre>
"
How do I find the location of my Python site-packages directory?,https://stackoverflow.com/questions/122327/how-do-i-find-the-location-of-my-python-site-packages-directory,1468,python,"<p>There are two types of site-packages directories, <em>global</em> and <em>per user</em>.</p>
<ol>
<li><p><strong>Global</strong> site-packages (&quot;<a href=""https://stackoverflow.com/questions/9387928/whats-the-difference-between-dist-packages-and-site-packages"">dist-packages</a>&quot;) directories are listed in <code>sys.path</code> when you run:</p>
<pre><code> python -m site
</code></pre>
<p>For a more concise list run <code>getsitepackages</code> from the <a href=""https://docs.python.org/3/library/site.html#site.getsitepackages"" rel=""noreferrer"">site module</a> in Python code:</p>
<pre><code> python -c 'import site; print(site.getsitepackages())'
</code></pre>
<p><em>Caution:</em> In virtual environments <a href=""https://github.com/pypa/virtualenv/issues/228"" rel=""noreferrer"">getsitepackages is not available</a> with <a href=""https://github.com/pypa/virtualenv/pull/2379/files"" rel=""noreferrer"">older versions of <code>virtualenv</code></a>, <code>sys.path</code> from above will list the virtualenv's site-packages directory correctly, though. In Python 3, you may use the <a href=""https://docs.python.org/3/library/sysconfig.html#using-sysconfig-as-a-script"" rel=""noreferrer"">sysconfig module</a> instead:</p>
<pre><code> python3 -c 'import sysconfig; print(sysconfig.get_paths()[&quot;purelib&quot;])'
</code></pre>
</li>
<li><p>The <strong>per user</strong> site-packages directory (<a href=""https://www.python.org/dev/peps/pep-0370/"" rel=""noreferrer"">PEP 370</a>) is where Python installs your local packages:</p>
<pre><code> python -m site --user-site
</code></pre>
<p>If this points to a non-existing directory check the exit status of Python and see <code>python -m site --help</code> for explanations.</p>
<p><em>Hint:</em> Running <code>pip list --user</code> or <code>pip freeze --user</code> gives you a list of all installed <em>per user</em> site-packages.</p>
</li>
</ol>
<hr />
<h2>Practical Tips</h2>
<ul>
<li><p><code>&lt;package&gt;.__path__</code> lets you identify the location(s) of a specific package: (<a href=""https://stackoverflow.com/questions/2699287/what-is-path-useful-for"">details</a>)</p>
<pre><code>  $ python -c &quot;import setuptools as _; print(_.__path__)&quot;
  ['/usr/lib/python2.7/dist-packages/setuptools']
</code></pre>
</li>
<li><p><code>&lt;module&gt;.__file__</code> lets you identify the location of a specific module: (<a href=""https://softwareengineering.stackexchange.com/questions/111871/module-vs-package"">difference</a>)</p>
<pre><code>  $ python3 -c &quot;import os as _; print(_.__file__)&quot;
  /usr/lib/python3.6/os.py
</code></pre>
</li>
<li><p>Run <code>pip show &lt;package&gt;</code> to show Debian-style package information:</p>
<pre><code>  $ pip show pytest
  Name: pytest
  Version: 3.8.2
  Summary: pytest: simple powerful testing with Python
  Home-page: https://docs.pytest.org/en/latest/
  Author: Holger Krekel, Bruno Oliveira, Ronny Pfannschmidt, Floris Bruynooghe, Brianna Laugher, Florian Bruhin and others
  Author-email: None
  License: MIT license
  Location: /home/peter/.local/lib/python3.4/site-packages
  Requires: more-itertools, atomicwrites, setuptools, attrs, pathlib2, six, py, pluggy
</code></pre>
</li>
</ul>
"
How do I create multiline comments in Python?,https://stackoverflow.com/questions/7696924/how-do-i-create-multiline-comments-in-python,1468,python;comments;documentation,"<p>You can use triple-quoted strings. When they're not a docstring (the first thing in a class/function/module), they are ignored.</p>
<pre><code>'''
This is a multiline
comment.
'''
</code></pre>
<p>(Make sure to indent the leading <code>'''</code> appropriately to avoid an <code>IndentationError</code>.)</p>
<p><a href=""https://en.wikipedia.org/wiki/Guido_van_Rossum"" rel=""noreferrer"">Guido van Rossum</a> (creator of Python) <a href=""https://twitter.com/gvanrossum/status/112670605505077248"" rel=""noreferrer"">tweeted this</a> as a &quot;pro tip&quot;.</p>
<p>However, Python's style guide, PEP8, <a href=""http://www.python.org/dev/peps/pep-0008/#block-comments"" rel=""noreferrer"">favors using consecutive single-line comments</a>, like this:</p>
<pre><code># This is a multiline
# comment.
</code></pre>
<p>...and this is also what you'll find in many projects. Text editors usually have a shortcut to do this easily.</p>
"
String formatting: % vs. .format vs. f-string literal,https://stackoverflow.com/questions/5082452/string-formatting-vs-format-vs-f-string-literal,1468,python;performance;string-formatting;f-string,"<p>To answer your first question... <code>.format</code> just seems more sophisticated in many ways. An annoying thing about <code>%</code> is also how it can either take a variable or a tuple. You'd think the following would always work:</p>
<pre><code>&quot;Hello %s&quot; % name
</code></pre>
<p>yet, if <code>name</code> happens to be <code>(1, 2, 3)</code>, it will throw a <code>TypeError</code>. To guarantee that it always prints, you'd need to do</p>
<pre><code>&quot;Hello %s&quot; % (name,)   # supply the single argument as a single-item tuple
</code></pre>
<p>which is just ugly. <code>.format</code> doesn't have those issues. Also in the second example you gave, the <code>.format</code> example is much cleaner looking.</p>
<p>Only use it for backwards compatibility with Python 2.5.</p>
<hr />
<p>To answer your second question, string formatting happens at the same time as any other operation - when the string formatting expression is evaluated. And Python, not being a lazy language, evaluates expressions before calling functions, so the expression <code>log.debug(&quot;some debug info: %s&quot; % some_info)</code> will first evaluate the string to, e.g. <code>&quot;some debug info: roflcopters are active&quot;</code>, then that string will be passed to <code>log.debug()</code>.</p>
"
Python: how to determine if an object is iterable?,https://stackoverflow.com/questions/1952464/python-how-to-determine-if-an-object-is-iterable,1462,python;iterable,"<ol>
<li><p>Checking for <code>__iter__</code> works on sequence types, but it would fail on e.g. strings <strong>in Python 2</strong>. I would like to know the right answer too, until then, here is one possibility (which would work on strings, too):</p>
<pre><code>try:
    some_object_iterator = iter(some_object)
except TypeError as te:
    print(some_object, 'is not iterable')
</code></pre>
<p>The <code>iter</code> built-in checks for the <code>__iter__</code> method or in the case of strings the <code>__getitem__</code> method.</p>
</li>
<li><p>Another general pythonic approach is to assume an iterable, then fail gracefully if it does not work on the given object. The Python glossary:</p>
<blockquote>
<p>Pythonic programming style that determines an object's type by inspection of its method or attribute signature rather than by explicit relationship to some type object (&quot;If it looks like a <strong>duck</strong> and quacks like a <strong>duck</strong>, it must be a <strong>duck</strong>.&quot;) By emphasizing interfaces rather than specific types, well-designed code improves its flexibility by allowing polymorphic substitution. Duck-typing avoids tests using type() or isinstance(). <strong>Instead, it typically employs the EAFP (Easier to Ask Forgiveness than Permission) style of programming.</strong></p>
<p>...</p>
<pre><code>try:
   _ = (e for e in my_object)
except TypeError:
   print(my_object, 'is not iterable')
</code></pre>
</blockquote>
</li>
<li><p>The <a href=""https://docs.python.org/3/library/collections.abc.html"" rel=""noreferrer""><code>collections</code></a> module provides some abstract base classes, which allow to ask classes or instances if they provide particular functionality, for example:</p>
<pre><code>from collections.abc import Iterable

if isinstance(e, Iterable):
    # e is iterable
</code></pre>
<p>However, this does not check for classes that are iterable through <code>__getitem__</code>.</p>
</li>
</ol>
"
Getting key with maximum value in dictionary?,https://stackoverflow.com/questions/268272/getting-key-with-maximum-value-in-dictionary,1460,python;dictionary;max,"<p>You can use <code>operator.itemgetter</code> for that:</p>
<pre><code>import operator
stats = {'a': 1000, 'b': 3000, 'c': 100}
max(stats.iteritems(), key=operator.itemgetter(1))[0]
</code></pre>
<p>And instead of building a new list in memory use <code>stats.iteritems()</code>. The <code>key</code> parameter to the <code>max()</code> function is a function that computes a key that is used to determine how to rank items.</p>
<p>Please note that if you were to have another key-value pair 'd': 3000 that this method will only return <strong>one</strong> of the <strong>two</strong> even though they both have the maximum value.</p>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; stats = {'a': 1000, 'b': 3000, 'c': 100, 'd': 3000}
&gt;&gt;&gt; max(stats.iteritems(), key=operator.itemgetter(1))[0]
'b' 
</code></pre>
<p>If using Python3:</p>
<pre><code>&gt;&gt;&gt; max(stats.items(), key=operator.itemgetter(1))[0]
'b'
</code></pre>
"
What does the &#39;b&#39; character do in front of a string literal?,https://stackoverflow.com/questions/6269765/what-does-the-b-character-do-in-front-of-a-string-literal,1458,python;string;unicode;binary,"<p>To quote <a href=""https://docs.python.org/2/reference/lexical_analysis.html#string-literals"" rel=""noreferrer"">the Python 2.x documentation</a>:</p>

<blockquote>
  <p>A prefix of 'b' or 'B' is ignored in
  Python 2; it indicates that the
  literal should become a bytes literal
  in Python 3 (e.g. when code is
  automatically converted with 2to3). A
  'u' or 'b' prefix may be followed by
  an 'r' prefix.</p>
</blockquote>

<p>The <a href=""https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals"" rel=""noreferrer"">Python 3 documentation</a> states:</p>

<blockquote>
  <p>Bytes literals are always prefixed with 'b' or 'B'; they produce an instance of the bytes type instead of the str type. They may only contain ASCII characters; bytes with a numeric value of 128 or greater must be expressed with escapes.</p>
</blockquote>
"
How do I create a constant in Python?,https://stackoverflow.com/questions/2682745/how-do-i-create-a-constant-in-python,1443,python;constants,"<p>You cannot declare a variable or value as constant in Python.</p>
<hr />
<p>To <em>indicate</em> to programmers that a variable is a constant, one usually writes it in upper case:</p>
<pre><code>CONST_NAME = &quot;Name&quot;
</code></pre>
<hr />
<p>To raise exceptions when constants are changed, see <a href=""https://web.archive.org/web/20100523132518id_/http://code.activestate.com/recipes/65207-constants-in-python/?in=user-97991"" rel=""noreferrer"">Constants in Python</a> by Alex Martelli. Note that this is not commonly used in practice.</p>
<hr />
<p>As of Python 3.8, there's a <a href=""https://docs.python.org/3/library/typing.html#typing.Final"" rel=""noreferrer""><code>typing.Final</code></a> variable annotation that will tell static type checkers (like mypy) that your variable shouldn't be reassigned. This is the closest equivalent to Java's <code>final</code>. However, it <strong>does not actually prevent reassignment</strong>:</p>
<pre><code>from typing import Final

a: Final[int] = 1

# Executes fine, but mypy will report an error if you run mypy on this:
a = 2
</code></pre>
"
How do I terminate a script?,https://stackoverflow.com/questions/73663/how-do-i-terminate-a-script,1436,python;termination,"<pre><code>import sys
sys.exit()
</code></pre>
<p>details from the <a href=""https://docs.python.org/2/library/sys.html#sys.exit"" rel=""noreferrer""><code>sys</code> module documentation</a>:</p>
<blockquote>
<p><code>sys.<strong>exit</strong>([<em>arg</em>])</code></p>
<p>Exit from Python. This is implemented by raising the
<a href=""https://docs.python.org/2/library/exceptions.html#SystemExit"" rel=""noreferrer"" title=""SystemExit""><code>SystemExit</code></a> exception, so cleanup actions specified by finally clauses
of <a href=""https://docs.python.org/2/reference/compound_stmts.html#try"" rel=""noreferrer"" title=""try""><code>try</code></a> statements are honored, and it is possible to intercept the
exit attempt at an outer level.</p>
<p>The optional argument <em>arg</em> can be an integer giving the exit status
(defaulting to zero), or another type of object. If it is an integer,
zero is considered “successful termination” and any nonzero value is
considered “abnormal termination” by shells and the like. Most systems
require it to be in the range 0-127, and produce undefined results
otherwise. Some systems have a convention for assigning specific
meanings to specific exit codes, but these are generally
underdeveloped; Unix programs generally use 2 for command line syntax
errors and 1 for all other kind of errors. If another type of object
is passed, None is equivalent to passing zero, and any other object is
printed to <a href=""https://docs.python.org/2/library/sys.html#sys.stderr"" rel=""noreferrer"" title=""sys.stderr""><code>stderr</code></a> and results in an exit code of 1. In particular,
<code>sys.exit(&quot;some error message&quot;)</code> is a quick way to exit a program when
an error occurs.</p>
<p>Since <a href=""https://docs.python.org/2/library/constants.html#exit"" rel=""noreferrer"" title=""exit""><code>exit()</code></a> ultimately “only” raises an exception, it will only exit
the process when called from the main thread, and the exception is not
intercepted.</p>
</blockquote>
<p>Note that this is the 'nice' way to exit.  @<a href=""https://stackoverflow.com/questions/73663/terminating-a-python-script#76374"">glyphtwistedmatrix</a> below points out that if you want a 'hard exit', you can use <code>os._exit(*errorcode*)</code>, though it's likely os-specific to some extent (it might not take an errorcode under windows, for example), and it definitely is less friendly since it doesn't let the interpreter do any cleanup before the process dies.  On the other hand, it <em>does</em> kill the entire process, including all running threads, while <code>sys.exit()</code> (as it says in the docs) only exits if called from the main thread, with no other threads running.</p>
"
Create a Pandas Dataframe by appending one row at a time,https://stackoverflow.com/questions/10715965/create-a-pandas-dataframe-by-appending-one-row-at-a-time,1424,python;pandas;dataframe;append,"<p>You can use <code>df.loc[i]</code>, where the row with index <code>i</code> will be what you specify it to be in the dataframe.</p>
<pre><code>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; from numpy.random import randint

&gt;&gt;&gt; df = pd.DataFrame(columns=['lib', 'qty1', 'qty2'])
&gt;&gt;&gt; for i in range(5):
&gt;&gt;&gt;     df.loc[i] = ['name' + str(i)] + list(randint(10, size=2))

&gt;&gt;&gt; df
     lib qty1 qty2
0  name0    3    3
1  name1    2    4
2  name2    2    8
3  name3    2    1
4  name4    9    6
</code></pre>
"
What is the difference between null=True and blank=True in Django?,https://stackoverflow.com/questions/8609192/what-is-the-difference-between-null-true-and-blank-true-in-django,1423,python;django;django-models;django-admin,"<p><code>null=True</code> sets <code>NULL</code> (versus <code>NOT NULL</code>) on the column in your DB. Blank values for Django field types such as <code>DateTimeField</code> or <code>ForeignKey</code> will be stored as <code>NULL</code> in the DB.</p>

<p><code>blank</code> determines whether the field will be required in forms. This includes the admin and your custom forms. If <code>blank=True</code> then the field will not be required, whereas if it's <code>False</code> the field cannot be blank.</p>

<p>The combo of the two is so frequent because typically if you're going to allow a field to be blank in your form, you're going to also need your database to allow <code>NULL</code> values for that field. The exception is <code>CharField</code>s and <code>TextField</code>s, which in Django are <em>never</em> saved as <code>NULL</code>. Blank values are stored in the DB as an empty string (<code>''</code>).</p>

<p>A few examples:</p>

<pre><code>models.DateTimeField(blank=True) # raises IntegrityError if blank

models.DateTimeField(null=True) # NULL allowed, but must be filled out in a form
</code></pre>

<p>Obviously, Those two options don't make logical sense to use (though there might be a use case for <code>null=True, blank=False</code> if you want a field to always be required in forms, optional when dealing with an object through something like the shell.)</p>

<pre><code>models.CharField(blank=True) # No problem, blank is stored as ''

models.CharField(null=True) # NULL allowed, but will never be set as NULL
</code></pre>

<p><code>CHAR</code> and <code>TEXT</code> types are never saved as <code>NULL</code> by Django, so <code>null=True</code> is unnecessary. However, you can manually set one of these fields to <code>None</code> to force set it as <code>NULL</code>. If you have a scenario where that might be necessary, you should still include <code>null=True</code>.</p>
"
How does the @property decorator work in Python?,https://stackoverflow.com/questions/17330160/how-does-the-property-decorator-work-in-python,1420,python;properties;decorator;python-decorators;python-internals,"<p>The <code>property()</code> function returns a special <a href=""https://docs.python.org/howto/descriptor.html"" rel=""noreferrer"">descriptor object</a>:</p>
<pre class=""lang-python prettyprint-override""><code>&gt;&gt;&gt; property()
&lt;property object at 0x10ff07940&gt;
</code></pre>
<p>It is this object that has <em>extra</em> methods:</p>
<pre><code>&gt;&gt;&gt; property().getter
&lt;built-in method getter of property object at 0x10ff07998&gt;
&gt;&gt;&gt; property().setter
&lt;built-in method setter of property object at 0x10ff07940&gt;
&gt;&gt;&gt; property().deleter
&lt;built-in method deleter of property object at 0x10ff07998&gt;
</code></pre>
<p>These act as decorators <em>too</em>. They return a new property object:</p>
<pre><code>&gt;&gt;&gt; property().getter(None)
&lt;property object at 0x10ff079f0&gt;
</code></pre>
<p>that is a copy of the old object, but with one of the functions replaced.</p>
<p>Remember, that the <code>@decorator</code> syntax is just syntactic sugar; the syntax:</p>
<pre><code>@property
def foo(self): return self._foo
</code></pre>
<p>really means the same thing as</p>
<pre><code>def foo(self): return self._foo
foo = property(foo)
</code></pre>
<p>so <code>foo</code> the function is replaced by <code>property(foo)</code>, which we saw above is a special object. Then when you use <code>@foo.setter()</code>, what you are doing is call that <code>property().setter</code> method I showed you above, which returns a new copy of the property, but this time with the setter function replaced with the decorated method.</p>
<p>The following sequence also creates a full-on property, by using those decorator methods.</p>
<p>First we create some functions:</p>
<pre><code>&gt;&gt;&gt; def getter(self): print('Get!')
... 
&gt;&gt;&gt; def setter(self, value): print('Set to {!r}!'.format(value))
... 
&gt;&gt;&gt; def deleter(self): print('Delete!')
... 
</code></pre>
<p>Then, we create a <code>property</code> object with only a getter:</p>
<pre><code>&gt;&gt;&gt; prop = property(getter)
&gt;&gt;&gt; prop.fget is getter
True
&gt;&gt;&gt; prop.fset is None
True
&gt;&gt;&gt; prop.fdel is None
True
</code></pre>
<p>Next we use the <code>.setter()</code> method to add a setter:</p>
<pre><code>&gt;&gt;&gt; prop = prop.setter(setter)
&gt;&gt;&gt; prop.fget is getter
True
&gt;&gt;&gt; prop.fset is setter
True
&gt;&gt;&gt; prop.fdel is None
True
</code></pre>
<p>Last we add a deleter with the <code>.deleter()</code> method:</p>
<pre><code>&gt;&gt;&gt; prop = prop.deleter(deleter)
&gt;&gt;&gt; prop.fget is getter
True
&gt;&gt;&gt; prop.fset is setter
True
&gt;&gt;&gt; prop.fdel is deleter
True
</code></pre>
<p>Last but not least, the <code>property</code> object acts as a <a href=""https://docs.python.org/reference/datamodel.html#implementing-descriptors"" rel=""noreferrer"">descriptor object</a>, so it has <a href=""https://docs.python.org/reference/datamodel.html#object.__get__"" rel=""noreferrer""><code>.__get__()</code></a>, <a href=""http://docs.python.org/reference/datamodel.html#object.__set__"" rel=""noreferrer""><code>.__set__()</code></a> and <a href=""http://docs.python.org/reference/datamodel.html#object.__delete__"" rel=""noreferrer""><code>.__delete__()</code></a> methods to hook into instance attribute getting, setting and deleting:</p>
<pre><code>&gt;&gt;&gt; class Foo: pass
... 
&gt;&gt;&gt; prop.__get__(Foo(), Foo)
Get!
&gt;&gt;&gt; prop.__set__(Foo(), 'bar')
Set to 'bar'!
&gt;&gt;&gt; prop.__delete__(Foo())
Delete!
</code></pre>
<p>The Descriptor Howto includes a <a href=""http://docs.python.org/howto/descriptor.html#properties"" rel=""noreferrer"">pure Python sample implementation</a> of the <code>property()</code> type:</p>
<blockquote>
<pre><code>class Property:
    &quot;Emulate PyProperty_Type() in Objects/descrobject.c&quot;

    def __init__(self, fget=None, fset=None, fdel=None, doc=None):
        self.fget = fget
        self.fset = fset
        self.fdel = fdel
        if doc is None and fget is not None:
            doc = fget.__doc__
        self.__doc__ = doc

    def __get__(self, obj, objtype=None):
        if obj is None:
            return self
        if self.fget is None:
            raise AttributeError(&quot;unreadable attribute&quot;)
        return self.fget(obj)

    def __set__(self, obj, value):
        if self.fset is None:
            raise AttributeError(&quot;can't set attribute&quot;)
        self.fset(obj, value)

    def __delete__(self, obj):
        if self.fdel is None:
            raise AttributeError(&quot;can't delete attribute&quot;)
        self.fdel(obj)

    def getter(self, fget):
        return type(self)(fget, self.fset, self.fdel, self.__doc__)

    def setter(self, fset):
        return type(self)(self.fget, fset, self.fdel, self.__doc__)

    def deleter(self, fdel):
        return type(self)(self.fget, self.fset, fdel, self.__doc__)
</code></pre>
</blockquote>
"
How do I check if a variable exists?,https://stackoverflow.com/questions/843277/how-do-i-check-if-a-variable-exists,1417,python;exception;variables,"<p>To check the existence of a local variable:</p>

<pre><code>if 'myVar' in locals():
  # myVar exists.
</code></pre>

<p>To check the existence of a global variable:</p>

<pre><code>if 'myVar' in globals():
  # myVar exists.
</code></pre>

<p>To check if an object has an attribute:</p>

<pre><code>if hasattr(obj, 'attr_name'):
  # obj.attr_name exists.
</code></pre>
"
How can I do a line break (line continuation) in Python (split up a long line of source code)?,https://stackoverflow.com/questions/53162/how-can-i-do-a-line-break-line-continuation-in-python-split-up-a-long-line-of,1412,python;syntax;line-breaks;long-lines,"<p>What is the line?  You can just have arguments on the next line without any problems:</p>
<pre><code>a = dostuff(blahblah1, blahblah2, blahblah3, blahblah4, blahblah5, 
            blahblah6, blahblah7)
</code></pre>
<p>Otherwise you can do something like this:</p>
<pre><code>if (a == True and
    b == False):
</code></pre>
<p>or with explicit line break:</p>
<pre><code>if a == True and \
   b == False:
</code></pre>
<p>Check the <a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""noreferrer"">style guide</a> for more information.</p>
<p>Using parentheses, your example can be written over multiple lines:</p>
<pre><code>a = ('1' + '2' + '3' +
    '4' + '5')
</code></pre>
<p>The same effect can be obtained using explicit line break:</p>
<pre><code>a = '1' + '2' + '3' + \
    '4' + '5'
</code></pre>
<p>Note that the style guide says that using the implicit continuation with parentheses is preferred, but in this particular case just adding parentheses around your expression is probably the wrong way to go.</p>
"
How do I reverse a list or loop over it backwards?,https://stackoverflow.com/questions/3940128/how-do-i-reverse-a-list-or-loop-over-it-backwards,1404,python;list;reverse,"<p>To get a <em>new</em> reversed list, apply the <a href=""https://docs.python.org/3/library/functions.html#reversed"" rel=""noreferrer""><code>reversed</code></a> function and collect the items into a <a href=""https://docs.python.org/3/library/stdtypes.html#list"" rel=""noreferrer""><code>list</code></a>:</p>
<pre><code>&gt;&gt;&gt; xs = [0, 10, 20, 40]
&gt;&gt;&gt; list(reversed(xs))
[40, 20, 10, 0]
</code></pre>
<p>To iterate backwards through a list:</p>
<pre><code>&gt;&gt;&gt; xs = [0, 10, 20, 40]
&gt;&gt;&gt; for x in reversed(xs):
...     print(x)
40
20
10
0
</code></pre>
"
How can I read a text file into a string variable and strip newlines?,https://stackoverflow.com/questions/8369219/how-can-i-read-a-text-file-into-a-string-variable-and-strip-newlines,1404,python;string,"<p>You could use:</p>
<pre><code>with open('data.txt', 'r') as file:
    data = file.read().replace('\n', '')
</code></pre>
<p>Or if the file content is guaranteed to be one line:</p>
<pre><code>with open('data.txt', 'r') as file:
    data = file.read().rstrip()
</code></pre>
"
What is a mixin and why is it useful?,https://stackoverflow.com/questions/533631/what-is-a-mixin-and-why-is-it-useful,1402,python;oop;multiple-inheritance;mixins;python-class,"<p>A mixin is a special kind of multiple inheritance.  There are two main situations where mixins are used:</p>

<ol>
<li>You want to provide a lot of optional features for a class.</li>
<li>You want to use one particular feature in a lot of different classes.</li>
</ol>

<p>For an example of number one, consider <a href=""http://werkzeug.pocoo.org/docs/wrappers/"" rel=""noreferrer"">werkzeug's request and response system</a>.  I can make a plain old request object by saying:</p>

<pre><code>from werkzeug import BaseRequest

class Request(BaseRequest):
    pass
</code></pre>

<p>If I want to add accept header support, I would make that</p>

<pre><code>from werkzeug import BaseRequest, AcceptMixin

class Request(AcceptMixin, BaseRequest):
    pass
</code></pre>

<p>If I wanted to make a request object that supports accept headers, etags, authentication, and user agent support, I could do this:</p>

<pre><code>from werkzeug import BaseRequest, AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthenticationMixin

class Request(AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthenticationMixin, BaseRequest):
    pass
</code></pre>

<p>The difference is subtle, but in the above examples, the mixin classes weren't made to stand on their own.  In more traditional multiple inheritance, the <code>AuthenticationMixin</code> (for example) would probably be something more like <code>Authenticator</code>.  That is, the class would probably be designed to stand on its own.</p>
"
Putting a simple if-then-else statement on one line,https://stackoverflow.com/questions/2802726/putting-a-simple-if-then-else-statement-on-one-line,1394,python;if-statement;syntax;conditional-operator,"<p>That's more specifically a <a href=""https://docs.python.org/3.10/reference/expressions.html?highlight=ternary#conditional-expressions"" rel=""noreferrer"">ternary operator</a> expression than an if-then, here's the python syntax</p>
<pre><code>value_when_true if condition else value_when_false
</code></pre>
<p><strong>Better Example:</strong> (thanks <a href=""https://stackoverflow.com/users/253254/joshua-burns"">Mr. Burns</a>)</p>
<pre class=""lang-py prettyprint-override""><code>'Yes' if fruit == 'Apple' else 'No'
</code></pre>
<p><strong>Now with assignment and contrast with if syntax</strong></p>
<pre><code>fruit = 'Apple'
isApple = True if fruit == 'Apple' else False
</code></pre>
<p><strong>vs</strong></p>
<pre><code>fruit = 'Apple'
isApple = False
if fruit == 'Apple' : isApple = True
</code></pre>
"
Get a list from Pandas DataFrame column headers,https://stackoverflow.com/questions/19482970/get-a-list-from-pandas-dataframe-column-headers,1388,python;pandas;dataframe;list;header,"<p>You can get the values as a list by doing:</p>
<pre><code>list(my_dataframe.columns.values)
</code></pre>
<p>Also you can simply use (as shown in <a href=""https://stackoverflow.com/a/19483602/4909087"">Ed Chum's answer</a>):</p>
<pre><code>list(my_dataframe)
</code></pre>
"
Use a list of values to select rows from a Pandas dataframe,https://stackoverflow.com/questions/12096252/use-a-list-of-values-to-select-rows-from-a-pandas-dataframe,1388,python;pandas;dataframe;indexing;filter,"<p>You can use the <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.isin.html"" rel=""noreferrer""><code>isin</code></a> method:</p>
<pre><code>In [1]: df = pd.DataFrame({'A': [5,6,3,4], 'B': [1,2,3,5]})

In [2]: df
Out[2]:
   A  B
0  5  1
1  6  2
2  3  3
3  4  5

In [3]: df[df['A'].isin([3, 6])]
Out[3]:
   A  B
1  6  2
2  3  3
</code></pre>
<p>And to get the opposite use <code>~</code>:</p>
<pre><code>In [4]: df[~df['A'].isin([3, 6])]
Out[4]:
   A  B
0  5  1
3  4  5
</code></pre>
"
Correct way to write line to file?,https://stackoverflow.com/questions/6159900/correct-way-to-write-line-to-file,1387,python;file-io,"<p>This should be as simple as:</p>
<pre><code>with open('somefile.txt', 'a') as the_file:
    the_file.write('Hello\n')
</code></pre>
<p>From The Documentation:</p>
<blockquote>
<p>Do not use <code>os.linesep</code> as a line terminator when writing files opened in text mode (the default); use a single <code>'\n'</code> instead, on all platforms.</p>
</blockquote>
<p>Some useful reading:</p>
<ul>
<li><a href=""http://docs.python.org/reference/compound_stmts.html#the-with-statement"" rel=""noreferrer"">The <code>with</code> statement</a></li>
<li><a href=""http://docs.python.org/library/functions.html?highlight=open#open"" rel=""noreferrer""><code>open()</code></a>
<ul>
<li><code>'a'</code> is for append, or use</li>
<li><code>'w'</code> to write with truncation</li>
</ul>
</li>
<li><a href=""http://docs.python.org/library/os.html"" rel=""noreferrer""><code>os</code></a> (particularly <a href=""http://docs.python.org/library/os.html?highlight=os.linesep#os.linesep"" rel=""noreferrer""><code>os.linesep</code></a>)</li>
</ul>
"
How do I remove all packages installed by pip?,https://stackoverflow.com/questions/11248073/how-do-i-remove-all-packages-installed-by-pip,1386,python;pip;virtualenv;python-packaging,"<p>I've found this snippet as an alternative solution. It's a more graceful removal of libraries than remaking the virtualenv:</p>
<pre><code>pip freeze | xargs pip uninstall -y
</code></pre>
<hr />
<p>In case you have packages installed via VCS, you need to exclude those lines and remove the packages manually (elevated from the comments below):</p>
<pre><code>pip freeze --exclude-editable | xargs pip uninstall -y
</code></pre>
<hr />
<p>If you have packages installed directly from github/gitlab, those will have <code>@</code>.
Like:</p>
<p><code>django @ git+https://github.com/django.git@&lt;sha&gt;</code></p>
<p>You can add <code>cut -d &quot;@&quot; -f1</code> to get just the package name that is required to uninstall it.</p>
<pre><code>pip freeze | cut -d &quot;@&quot; -f1 | xargs pip uninstall -y
</code></pre>
"
"Extract file name from path, no matter what the os/path format",https://stackoverflow.com/questions/8384737/extract-file-name-from-path-no-matter-what-the-os-path-format,1384,python;path,"<p>Using <code>os.path.split</code> or <code>os.path.basename</code> as others suggest won't work in all cases: if you're running the script on Linux and attempt to process a classic windows-style path, it will fail.</p>

<p>Windows paths can use either backslash or forward slash as path separator. Therefore, the <code>ntpath</code> module (which is equivalent to os.path when running on windows) will work for all<sup>(1)</sup> paths on all platforms.</p>

<pre><code>import ntpath
ntpath.basename(""a/b/c"")
</code></pre>

<p>Of course, if the file ends with a slash, the basename will be empty, so make your own function to deal with it:</p>

<pre><code>def path_leaf(path):
    head, tail = ntpath.split(path)
    return tail or ntpath.basename(head)
</code></pre>

<p>Verification:</p>

<pre><code>&gt;&gt;&gt; paths = ['a/b/c/', 'a/b/c', '\\a\\b\\c', '\\a\\b\\c\\', 'a\\b\\c', 
...     'a/b/../../a/b/c/', 'a/b/../../a/b/c']
&gt;&gt;&gt; [path_leaf(path) for path in paths]
['c', 'c', 'c', 'c', 'c', 'c', 'c']
</code></pre>

<p><br></p>

<p><sup>(1) There's one caveat: Linux filenames <em>may contain backslashes</em>. So on linux, <code>r'a/b\c'</code> always refers to the file <code>b\c</code> in the <code>a</code> folder, while on Windows, it always refers to the <code>c</code> file in the <code>b</code> subfolder of the <code>a</code> folder. So when both forward and backward slashes are used in a path, you <em>need</em> to know the associated platform to be able to interpret it correctly. In practice it's usually safe to assume it's a windows path since backslashes are seldom used in Linux filenames, but keep this in mind when you code so you don't create accidental security holes.</sup></p>
"
How does Python&#39;s super() work with multiple inheritance?,https://stackoverflow.com/questions/3277367/how-does-pythons-super-work-with-multiple-inheritance,1380,python;multiple-inheritance,"<p>This is detailed with a reasonable amount of detail by Guido himself in his blog post <a href=""http://python-history.blogspot.com/2010/06/method-resolution-order.html"" rel=""noreferrer"">Method Resolution Order</a> (including two earlier attempts).</p>
<p>In your example, <code>Third()</code> will call <code>First.__init__</code>. Python looks for each attribute in the class's parents as they are listed left to right. In this case, we are looking for <code>__init__</code>. So, if you define</p>
<pre><code>class Third(First, Second):
    ...
</code></pre>
<p>Python will start by looking at <code>First</code>, and, if <code>First</code> doesn't have the attribute, then it will look at <code>Second</code>.</p>
<p>This situation becomes more complex when inheritance starts crossing paths (for example if <code>First</code> inherited from <code>Second</code>). Read the link above for more details, but, in a nutshell, Python will try to maintain the order in which each class appears on the inheritance list, starting with the child class itself.</p>
<p>So, for instance, if you had:</p>
<pre><code>class First(object):
    def __init__(self):
        print &quot;first&quot;

class Second(First):
    def __init__(self):
        print &quot;second&quot;

class Third(First):
    def __init__(self):
        print &quot;third&quot;

class Fourth(Second, Third):
    def __init__(self):
        super(Fourth, self).__init__()
        print &quot;that's it&quot;
</code></pre>
<p>the MRO would be <code>[Fourth, Second, Third, First].</code></p>
<p>By the way: if Python cannot find a coherent method resolution order, it'll raise an exception, instead of falling back to behavior which might surprise the user.</p>
<p>Example of an ambiguous MRO:</p>
<pre><code>class First(object):
    def __init__(self):
        print &quot;first&quot;
        
class Second(First):
    def __init__(self):
        print &quot;second&quot;

class Third(First, Second):
    def __init__(self):
        print &quot;third&quot;
</code></pre>
<p>Should <code>Third</code>'s MRO be <code>[First, Second]</code> or <code>[Second, First]</code>? There's no obvious expectation, and Python will raise an error:</p>
<pre><code>TypeError: Error when calling the metaclass bases
    Cannot create a consistent method resolution order (MRO) for bases Second, First
</code></pre>
<p>Why do the examples above lack <code>super()</code> calls? The point of the examples is to show how the MRO is constructed. They are <strong>not</strong> intended to print <code>&quot;first\nsecond\third&quot;</code> or whatever. You can – and should, of course, play around with the example, add <code>super()</code> calls, see what happens, and gain a deeper understanding of Python's inheritance model. But my goal here is to keep it simple and show how the MRO is built. And it is built as I explained:</p>
<pre><code>&gt;&gt;&gt; Fourth.__mro__
(&lt;class '__main__.Fourth'&gt;,
 &lt;class '__main__.Second'&gt;, &lt;class '__main__.Third'&gt;,
 &lt;class '__main__.First'&gt;,
 &lt;type 'object'&gt;)
</code></pre>
"
How do I trim whitespace from a string?,https://stackoverflow.com/questions/761804/how-do-i-trim-whitespace-from-a-string,1379,python;string;trim,"<p>To remove all whitespace surrounding a string, use <a href=""https://docs.python.org/library/stdtypes.html#str.strip"" rel=""noreferrer""><code>.strip()</code></a>. Examples:</p>
<pre><code>&gt;&gt;&gt; ' Hello '.strip()
'Hello'
&gt;&gt;&gt; ' Hello'.strip()
'Hello'
&gt;&gt;&gt; 'Bob has a cat'.strip()
'Bob has a cat'
&gt;&gt;&gt; '   Hello   '.strip()  # ALL consecutive spaces at both ends removed
'Hello'
</code></pre>
<p>Note that <a href=""https://docs.python.org/library/stdtypes.html#str.strip"" rel=""noreferrer""><code>str.strip()</code></a> removes all whitespace characters, including tabs and newlines. To remove only spaces, specify the specific character to remove as an argument to <code>strip</code>:</p>
<pre><code>&gt;&gt;&gt; &quot;  Hello\n  &quot;.strip(&quot; &quot;)
'Hello\n'
</code></pre>
<hr />
<p>To remove only one space at most:</p>
<pre><code>def strip_one_space(s):
    if s.endswith(&quot; &quot;): s = s[:-1]
    if s.startswith(&quot; &quot;): s = s[1:]
    return s

&gt;&gt;&gt; strip_one_space(&quot;   Hello &quot;)
'  Hello'
</code></pre>
"
How do I return dictionary keys as a list in Python?,https://stackoverflow.com/questions/16819222/how-do-i-return-dictionary-keys-as-a-list-in-python,1370,python;python-3.x;list;dictionary,"<p>This will convert the <code>dict_keys</code> object to a <code>list</code>:</p>
<pre><code>list(newdict.keys())
</code></pre>
<hr />
<p>On the other hand, you should ask yourself whether or not it matters. It is Pythonic to assume <a href=""https://en.wikipedia.org/wiki/Duck_typing"" rel=""noreferrer"">duck typing</a> -- <em>if it looks like a duck and it quacks like a duck, it is a duck</em>. The <code>dict_keys</code> object can be <a href=""https://stackoverflow.com/questions/9884132/what-exactly-are-iterator-iterable-and-iteration"">iterated</a> over just like a <code>list</code>. For instance:</p>
<pre><code>for key in newdict.keys():
    print(key)
</code></pre>
<p>Note that <code>dict_keys</code> doesn't support insertion <code>newdict[k] = v</code>, though you may not need it.</p>
"
How do I type hint a method with the type of the enclosing class?,https://stackoverflow.com/questions/33533148/how-do-i-type-hint-a-method-with-the-type-of-the-enclosing-class,1364,python;pycharm;python-typing,"<p>I guess you got this exception:</p>
<pre><code>NameError: name 'Position' is not defined
</code></pre>
<p>This is because in the original implementation of annotations, <code>Position</code> must be defined before you can use it in an annotation.</p>
<h2>Python 3.14+: It'll just work</h2>
<p>Python 3.14 has a <a href=""https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-pep649"" rel=""noreferrer"">new, lazily evaluated</a> annotation implementation specified by <a href=""https://peps.python.org/pep-0749/"" rel=""noreferrer"">PEP 749</a> and <a href=""https://peps.python.org/pep-0649/"" rel=""noreferrer"">649</a>. Annotations will be compiled to special <code>__annotate__</code> functions, executed when an object's <code>__annotations__</code> dict is first accessed instead of at the point where the annotation itself occurs.</p>
<p>Thus, annotating your function as <code>def __add__(self, other: Position) -&gt; Position:</code> no longer requires <code>Position</code> to already exist:</p>
<pre><code>class Position:
    def __add__(self, other: Position) -&gt; Position:
        ...
</code></pre>
<h2>Python 3.7+, deprecated: <code>from __future__ import annotations</code></h2>
<p><code>from __future__ import annotations</code> turns on an older solution to this problem, <a href=""https://peps.python.org/pep-0563/"" rel=""noreferrer"">PEP 563</a>, where all annotations are saved as strings instead of as <code>__annotate__</code> functions or evaluated values. This was originally planned to become the default behavior, and <a href=""https://mail.python.org/archives/list/python-dev@python.org/thread/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/"" rel=""noreferrer"">almost became the default</a> in 3.10 before being reverted.</p>
<p>With the acceptance of PEP 749, <a href=""https://docs.python.org/3.14/whatsnew/3.14.html#from-future-import-annotations"" rel=""noreferrer"">this will be deprecated</a> in Python 3.14, and it will be removed in a future Python version. Still, it works for now:</p>
<pre><code>from __future__ import annotations

class Position:
    def __add__(self, other: Position) -&gt; Position:
        ...
</code></pre>
<h2>Python 3+: Use a string</h2>
<p>This is the original workaround, specified in <a href=""https://peps.python.org/pep-0484/#forward-references"" rel=""noreferrer"">PEP 484</a>. Write your annotations as string literals containing the text of whatever expression you originally wanted to use as an annotation:</p>
<pre><code>class Position:
    def __add__(self, other: 'Position') -&gt; 'Position':
        ...
</code></pre>
<p><code>from __future__ import annotations</code> effectively automates doing this for all annotations in a file.</p>
<h2><code>typing.Self</code> might sometimes be appropriate</h2>
<p><a href=""https://docs.python.org/3/whatsnew/3.11.html#pep-673-self-type"" rel=""noreferrer"">Introduced</a> in Python 3.11, <a href=""https://docs.python.org/3/library/typing.html#typing.Self"" rel=""noreferrer""><code>typing.Self</code></a> refers to the type of the current instance, even if that type is a subclass of the class the annotation appears in. So if you have the following code:</p>
<pre><code>from typing import Self

class Parent:
    def me(self) -&gt; Self:
        return self

class Child(Parent): pass

x: Child = Child().me()
</code></pre>
<p>then <code>Child().me()</code> is treated as returning <code>Child</code>, instead of <code>Parent</code>.</p>
<p>This isn't always what you want. But when it is, it's pretty convenient.</p>
<p>For Python versions &lt; 3.11, if you have <code>typing_extensions</code> installed, you can use:</p>
<pre><code>from typing_extensions import Self
</code></pre>
<h2>Sources</h2>
<p>The relevant parts of PEP 484, PEP 563, and PEP 649, to spare you the trip:</p>
<blockquote>
<h1><a href=""https://www.python.org/dev/peps/pep-0484/#forward-references"" rel=""noreferrer"">Forward references</a></h1>
<p>When a type hint contains names that have not been defined yet, that definition may be expressed as a string literal, to be resolved later.</p>
<p>A situation where this occurs commonly is the definition of a container class, where the class being defined occurs in the signature of some of the methods. For example, the following code (the start of a simple binary tree implementation) does not work:</p>
<pre><code>class Tree:
    def __init__(self, left: Tree, right: Tree):
        self.left = left
        self.right = right
</code></pre>
<p>To address this, we write:</p>
<pre><code>class Tree:
    def __init__(self, left: 'Tree', right: 'Tree'):
        self.left = left
        self.right = right
</code></pre>
<p>The string literal should contain a valid Python expression (i.e., compile(lit, '', 'eval') should be a valid code object) and it should evaluate without errors once the module has been fully loaded. The local and global namespace in which it is evaluated should be the same namespaces in which default arguments to the same function would be evaluated.</p>
</blockquote>
<p>and PEP 563, deprecated:</p>
<blockquote>
<h1><a href=""https://www.python.org/dev/peps/pep-0563/#implementation"" rel=""noreferrer"">Implementation</a></h1>
<p>In Python 3.10, function and variable annotations will no longer be evaluated at definition time. Instead, a string form will be preserved in the respective <code>__annotations__</code> dictionary. Static type checkers will see no difference in behavior, whereas tools using annotations at runtime will have to perform postponed evaluation.</p>
<p>...</p>
<h2><a href=""https://www.python.org/dev/peps/pep-0563/#enabling-the-future-behavior-in-python-3-7"" rel=""noreferrer"">Enabling the future behavior in Python 3.7</a></h2>
<p>The functionality described above can be enabled starting from Python 3.7 using the following special import:</p>
<pre><code>from __future__ import annotations
</code></pre>
</blockquote>
<p>and PEP 649:</p>
<blockquote>
<h1><a href=""https://peps.python.org/pep-0649/#overview"" rel=""noreferrer"">Overview</a></h1>
<p>This PEP adds a new dunder attribute to the objects that support annotations–functions, classes, and modules. The new attribute is called <code>__annotate__</code>, and is a reference to a function which computes and returns that object’s annotations dict.</p>
<p>At compile time, if the definition of an object includes annotations, the Python compiler will write the expressions computing the annotations into its own function. When run, the function will return the annotations dict. The Python compiler then stores a reference to this function in <code>__annotate__</code> on the object.</p>
<p>Furthermore, <code>__annotations__</code> is redefined to be a “data descriptor” which calls this annotation function once and caches the result.</p>
</blockquote>
<h2>Things that you may be tempted to do instead</h2>
<h3>A. Define a dummy <code>Position</code></h3>
<p>Before the class definition, place a dummy definition:</p>
<pre><code>class Position(object):
    pass

class Position:

    def __init__(self, x: int, y: int):
        self.x = x
        self.y = y

    def __add__(self, other: Position) -&gt; Position:
        return Position(self.x + other.x, self.y + other.y)
</code></pre>
<p>This will get rid of the <code>NameError</code> and may even look OK:</p>
<pre><code>&gt;&gt;&gt; Position.__add__.__annotations__
{'other': __main__.Position, 'return': __main__.Position}
</code></pre>
<p>But is it?</p>
<pre><code>&gt;&gt;&gt; for k, v in Position.__add__.__annotations__.items():
...     print(k, 'is Position:', v is Position)                                                                                                                                                                                                                  
return is Position: False
other is Position: False
</code></pre>
<p>And <a href=""https://mypy-play.net/?mypy=latest&amp;python=3.13&amp;gist=f8e456af0cecbffc869a76c5567b8293"" rel=""noreferrer"">mypy will report</a> a pile of errors:</p>
<pre><code>main.py:4: error: Name &quot;Position&quot; already defined on line 1  [no-redef]
main.py:11: error: Too many arguments for &quot;Position&quot;  [call-arg]
main.py:11: error: &quot;Position&quot; has no attribute &quot;x&quot;  [attr-defined]
main.py:11: error: &quot;Position&quot; has no attribute &quot;y&quot;  [attr-defined]
Found 4 errors in 1 file (checked 1 source file)
</code></pre>
<h3>B. Monkey-patch in order to add the annotations:</h3>
<p>You may want to try some Python metaprogramming magic and write a decorator
to monkey-patch the class definition in order to add annotations:</p>
<pre><code>class Position:
    ...
    def __add__(self, other):
        return self.__class__(self.x + other.x, self.y + other.y)
</code></pre>
<p>The decorator should be responsible for the equivalent of this:</p>
<pre><code>Position.__add__.__annotations__['return'] = Position
Position.__add__.__annotations__['other'] = Position
</code></pre>
<p>It'll work right at runtime:</p>
<pre><code>&gt;&gt;&gt; for k, v in Position.__add__.__annotations__.items():
...     print(k, 'is Position:', v is Position)                                                                                                                                                                                                                  
return is Position: True
other is Position: True
</code></pre>
<p>But static analyzers like mypy won't understand it, and static analysis is the biggest use case of type annotations.</p>
"
How do I get file creation and modification date/times?,https://stackoverflow.com/questions/237079/how-do-i-get-file-creation-and-modification-date-times,1363,python;file,"<p>In Python 3.4 and above, you can use the object oriented <a href=""https://docs.python.org/3/library/pathlib.html"" rel=""noreferrer"">pathlib module</a> interface which includes wrappers for much of the os module.  Here is an example of getting the file stats.</p>
<pre><code>&gt;&gt;&gt; import pathlib
&gt;&gt;&gt; fname = pathlib.Path('test.py')
&gt;&gt;&gt; assert fname.exists(), f'No such file: {fname}'  # check that the file exists
&gt;&gt;&gt; print(fname.stat())
os.stat_result(st_mode=33206, st_ino=5066549581564298, st_dev=573948050, st_nlink=1, st_uid=0, st_gid=0, st_size=413, st_atime=1523480272, st_mtime=1539787740, st_ctime=1523480272)
</code></pre>
<p>For more information about what <code>os.stat_result</code> contains, refer to <a href=""https://docs.python.org/3/library/os.html#os.stat_result"" rel=""noreferrer"">the documentation</a>. For the modification time you want <code>fname.stat().st_mtime</code>:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; mtime = datetime.datetime.fromtimestamp(fname.stat().st_mtime, tz=datetime.timezone.utc)
&gt;&gt;&gt; print(mtime)
datetime.datetime(2018, 10, 17, 10, 49, 0, 249980)
</code></pre>
<p>If you want the creation time on Windows, or the most recent metadata change on Unix, you would use <code>fname.stat().st_ctime</code>:</p>
<pre><code>&gt;&gt;&gt; ctime = datetime.datetime.fromtimestamp(fname.stat().st_ctime, tz=datetime.timezone.utc)
&gt;&gt;&gt; print(ctime)
datetime.datetime(2018, 4, 11, 16, 57, 52, 151953)
</code></pre>
<p><a href=""https://realpython.com/python-pathlib/"" rel=""noreferrer"">This article</a> has more helpful info and examples for the pathlib module.</p>
"
How to get the ASCII value of a character,https://stackoverflow.com/questions/227459/how-to-get-the-ascii-value-of-a-character,1359,python;ascii,"<p>From <a href=""http://mail.python.org/pipermail/python-win32/2005-April/003100.html"" rel=""noreferrer"">here</a>:</p>
<blockquote>
<p>The function <strong><code>ord()</code></strong> gets the int value
of the char. And in case you want to
convert back after playing with the
number, function <strong><code>chr()</code></strong> does the trick.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; ord('a')
97
&gt;&gt;&gt; chr(97)
'a'
&gt;&gt;&gt; chr(ord('a') + 3)
'd'
&gt;&gt;&gt;
</code></pre>
<p>In Python 2, there was also the <code>unichr</code> function, returning the <a href=""http://en.wikipedia.org/wiki/Unicode"" rel=""noreferrer"">Unicode</a> character whose ordinal is the <code>unichr</code> argument:</p>
<pre><code>&gt;&gt;&gt; unichr(97)
u'a'
&gt;&gt;&gt; unichr(1234)
u'\u04d2'
</code></pre>
<p>In Python 3 you can use <code>chr</code> instead of <code>unichr</code>.</p>
<hr>
<p><a href=""https://docs.python.org/3/library/functions.html#ord"" rel=""noreferrer"">ord() - Python 3.6.5rc1 documentation</a></p>
<p><a href=""https://docs.python.org/2/library/functions.html#ord"" rel=""noreferrer"">ord() - Python 2.7.14 documentation</a></p>
"
What is the purpose of the `self` parameter? Why is it needed?,https://stackoverflow.com/questions/2709821/what-is-the-purpose-of-the-self-parameter-why-is-it-needed,1358,python;class;oop;self,"<p>The reason you need to use <code>self.</code> is because Python does not use special syntax to refer to instance attributes. Python decided to do methods in a way that makes the instance to which the method belongs be <em>passed</em> automatically, but not <em>received</em> automatically: the first parameter of methods is the instance the method is called on. That makes methods entirely the same as functions, and leaves the actual name to use up to you (although <code>self</code> is the convention, and people will generally frown at you when you use something else.) <code>self</code> is not special to the code, it's just another object.</p>
<p>Python could have done something else to distinguish normal names from attributes -- special syntax like Ruby has, or requiring declarations like C++ and Java do, or perhaps something  yet more different -- but it didn't. Python's all for making things explicit, making it obvious what's what, and although it doesn't do it entirely everywhere, it does do it for instance attributes. That's why assigning to an instance attribute needs to know what instance to assign to, and that's why it needs <code>self.</code>.</p>
"
Count the number of occurrences of a character in a string,https://stackoverflow.com/questions/1155617/count-the-number-of-occurrences-of-a-character-in-a-string,1355,python;string;count,"<blockquote>
<p><a href=""https://docs.python.org/3/library/stdtypes.html#str.count"" rel=""noreferrer""><code>str.count(sub[, start[, end]])</code></a></p>
<p>Return the number of non-overlapping occurrences of substring <code>sub</code> in the range <code>[start, end]</code>. Optional arguments <code>start</code> and <code>end</code> are interpreted as in slice notation.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; sentence = 'Mary had a little lamb'
&gt;&gt;&gt; sentence.count('a')
4
</code></pre>
"
"If Python is interpreted, what are .pyc files?",https://stackoverflow.com/questions/2998215/if-python-is-interpreted-what-are-pyc-files,1352,python;compiled;interpreted-language;pyc,"<p>They contain <a href=""http://en.wikipedia.org/wiki/Bytecode"" rel=""noreferrer"">byte code</a>, which is what the Python interpreter compiles the source to. This code is then executed by Python's virtual machine.</p>
<p><a href=""https://docs.python.org/3/glossary.html#term-interpreted"" rel=""noreferrer"">Python's documentation</a> explains the definition like this:</p>
<blockquote>
<p>Python is an interpreted language, as
opposed to a compiled one, though the
distinction can be blurry because of
the presence of the bytecode compiler.
This means that source files can be
run directly without explicitly
creating an executable which is then
run.</p>
</blockquote>
"
Converting from a string to boolean in Python,https://stackoverflow.com/questions/715417/converting-from-a-string-to-boolean-in-python,1349,python;string;boolean,"<p>Really, you just compare the string to whatever you expect to accept as representing true, so you can do this:</p>
<pre><code>s == 'True'
</code></pre>
<p>Or to checks against a whole bunch of values:</p>
<pre><code>s.lower() in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']
</code></pre>
<p>Be cautious when using the following:</p>
<pre><code>&gt;&gt;&gt; bool(&quot;foo&quot;)
True
&gt;&gt;&gt; bool(&quot;False&quot;) # beware!
True
&gt;&gt;&gt; bool(&quot;&quot;)
False
</code></pre>
<p>Empty strings evaluate to <code>False</code>, but everything else evaluates to <code>True</code>. So this should not be used for any kind of parsing purposes.</p>
"
How to add a new column to an existing DataFrame,https://stackoverflow.com/questions/12555323/how-to-add-a-new-column-to-an-existing-dataframe,1341,python;pandas;dataframe;chained-assignment,"<p><strong>Edit 2017</strong></p>
<p>As indicated in the comments and by @Alexander, currently the best method to add the values of a Series as a new column of a DataFrame could be using <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.assign.html"" rel=""noreferrer""><strong><code>assign</code></strong></a>:</p>
<pre><code>df1 = df1.assign(e=pd.Series(np.random.randn(sLength)).values)
</code></pre>
<hr />
<p><strong>Edit 2015</strong><br />
Some reported getting the <code>SettingWithCopyWarning</code> with this code.<br />
However, the code still runs perfectly with the current pandas version 0.16.1.</p>
<pre><code>&gt;&gt;&gt; sLength = len(df1['a'])
&gt;&gt;&gt; df1
          a         b         c         d
6 -0.269221 -0.026476  0.997517  1.294385
8  0.917438  0.847941  0.034235 -0.448948

&gt;&gt;&gt; df1['e'] = pd.Series(np.random.randn(sLength), index=df1.index)
&gt;&gt;&gt; df1
          a         b         c         d         e
6 -0.269221 -0.026476  0.997517  1.294385  1.757167
8  0.917438  0.847941  0.034235 -0.448948  2.228131

&gt;&gt;&gt; pd.version.short_version
'0.16.1'
</code></pre>
<p>The <code>SettingWithCopyWarning</code> aims to inform of a possibly invalid assignment on a copy of the Dataframe. It doesn't necessarily say you did it wrong (it can trigger false positives) but from 0.13.0 it let you know there are more adequate methods for the same purpose. Then, if you get the warning, just follow its advise: <em>Try using .loc[row_index,col_indexer] = value instead</em></p>
<pre><code>&gt;&gt;&gt; df1.loc[:,'f'] = pd.Series(np.random.randn(sLength), index=df1.index)
&gt;&gt;&gt; df1
          a         b         c         d         e         f
6 -0.269221 -0.026476  0.997517  1.294385  1.757167 -0.050927
8  0.917438  0.847941  0.034235 -0.448948  2.228131  0.006109
&gt;&gt;&gt; 
</code></pre>
<p>In fact, this is currently the more efficient method as <a href=""http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy"" rel=""noreferrer"">described in pandas docs</a></p>
<hr />
<p>Original answer:</p>
<p>Use the original df1 indexes to create the series:</p>
<pre><code>df1['e'] = pd.Series(np.random.randn(sLength), index=df1.index)
</code></pre>
"
How to create a GUID/UUID in Python,https://stackoverflow.com/questions/534839/how-to-create-a-guid-uuid-in-python,1334,python;uuid;guid;uniqueidentifier,"<blockquote>
<p>The <a href=""https://docs.python.org/3/library/uuid.html"" rel=""noreferrer"">uuid module</a> provides immutable UUID objects (the UUID class) and the functions <a href=""https://docs.python.org/3/library/uuid.html#uuid.uuid1"" rel=""noreferrer""><code>uuid1()</code></a>, <a href=""https://docs.python.org/3/library/uuid.html#uuid.uuid3"" rel=""noreferrer""><code>uuid3()</code></a>, <a href=""https://docs.python.org/3/library/uuid.html#uuid.uuid4"" rel=""noreferrer""><code>uuid4()</code></a>, <a href=""https://docs.python.org/3/library/uuid.html#uuid.uuid5"" rel=""noreferrer""><code>uuid5()</code></a> for generating version 1, 3, 4, and 5 UUIDs as specified in <a href=""https://www.rfc-editor.org/rfc/rfc4122"" rel=""noreferrer"">RFC 4122</a>.</p>
</blockquote>
<blockquote>
<p>If all you want is a unique ID, you should probably call <code>uuid1()</code> or <code>uuid4()</code>.
<br><br><strong>Note that <code>uuid1()</code> may compromise privacy since it creates a UUID containing the computer’s network address.</strong><br><br>
<code>uuid4()</code> creates a random UUID.</p>
</blockquote>
<p>UUID versions 6, 7 and 8 - <em>new Universally Unique Identifier (UUID) formats for use in modern applications and as database keys</em> -  <a href=""https://uuid6.github.io/uuid6-ietf-draft/"" rel=""noreferrer"">(<strong>draft</strong>) rfc</a> - are available from <a href=""https://pypi.org/project/uuid6/"" rel=""noreferrer"">https://pypi.org/project/uuid6/</a></p>
<p>Docs:</p>
<ul>
<li><a href=""https://docs.python.org/2/library/uuid.html"" rel=""noreferrer"">Python 2</a></li>
<li><a href=""https://docs.python.org/3/library/uuid.html"" rel=""noreferrer"">Python 3</a></li>
</ul>
<p>Examples (for both Python 2 and 3):</p>
<pre><code>&gt;&gt;&gt; import uuid

&gt;&gt;&gt; # make a random UUID
&gt;&gt;&gt; uuid.uuid4()
UUID('bd65600d-8669-4903-8a14-af88203add38')

&gt;&gt;&gt; # Convert a UUID to a string of hex digits in standard form
&gt;&gt;&gt; str(uuid.uuid4())
'f50ec0b7-f960-400d-91f0-c42a6d44e3d0'

&gt;&gt;&gt; # Convert a UUID to a 32-character hexadecimal string
&gt;&gt;&gt; uuid.uuid4().hex
'9fe2c4e93f654fdbb24c02b15259716c'
</code></pre>
"
Why does comparing strings using either &#39;==&#39; or &#39;is&#39; sometimes produce a different result?,https://stackoverflow.com/questions/1504717/why-does-comparing-strings-using-either-or-is-sometimes-produce-a-differe,1331,python;string;comparison;identity;equality,"<p><code>is</code> is identity testing, and <code>==</code> is equality testing. What happens in your code would be emulated in the interpreter like this:</p>
<pre><code>&gt;&gt;&gt; a = 'pub'
&gt;&gt;&gt; b = ''.join(['p', 'u', 'b'])
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; a is b
False
</code></pre>
<p>So, no wonder they're not the same, right?</p>
<p>In other words: <code>a is b</code> is the equivalent of <code>id(a) == id(b)</code></p>
"
How to get the line count of a large file cheaply in Python,https://stackoverflow.com/questions/845058/how-to-get-the-line-count-of-a-large-file-cheaply-in-python,1318,python;text-files;line-count,"<p>You can't get any better than that.</p>
<p>After all, any solution will have to read the entire file, figure out how many <code>\n</code> you have, and return that result.</p>
<p>Do you have a better way of doing that without reading the entire file? Not sure... The best solution will always be I/O-bound, best you can do is make sure you don't use unnecessary memory, but it looks like you have that covered.</p>
<p><strong>[Edit May 2023]</strong></p>
<p>As commented in many other answers, in Python 3 there are better alternatives. The <code>for</code> loop is not the most efficient. For example, using <code>mmap</code> or buffers is more efficient.</p>
"
How do I import other Python files?,https://stackoverflow.com/questions/2349991/how-do-i-import-other-python-files,1308,python;import;python-import;python-module;python-packaging,"<p><a href=""https://docs.python.org/3/library/importlib.html#module-importlib"" rel=""noreferrer""><code>importlib</code></a> was added to Python 3 to programmatically import a module.</p>
<pre class=""lang-python prettyprint-override""><code>import importlib

moduleName = input('Enter module name:')
importlib.import_module(moduleName)
</code></pre>
<p>The .py extension should be removed from <code>moduleName</code>. The function also defines a <code>package</code> argument for relative imports.</p>
<p>In python 2.x:</p>
<ul>
<li>Just <code>import file</code> without the .py extension</li>
<li>A folder can be marked as a package, by adding an empty <code>__init__.py</code> file</li>
<li>You can use the <code>__import__</code> function, which takes the module name (without extension) as a string extension</li>
</ul>
<pre class=""lang-python prettyprint-override""><code>pmName = input('Enter module name:')
pm = __import__(pmName)
print(dir(pm))
</code></pre>
<p>Type <code>help(__import__)</code> for more details.</p>
"
How do I get a list of locally installed Python modules?,https://stackoverflow.com/questions/739993/how-do-i-get-a-list-of-locally-installed-python-modules,1306,python;module;pip,"<h2>Solution</h2>
<h1>Do not use with pip &gt; 10.0!</h1>
<p>My 50 cents for getting a <code>pip freeze</code>-like list from a Python script:</p>
<pre class=""lang-python prettyprint-override""><code>import pip
installed_packages = pip.get_installed_distributions()
installed_packages_list = sorted([&quot;%s==%s&quot; % (i.key, i.version)
     for i in installed_packages])
print(installed_packages_list)
</code></pre>
<p>As a (too long) one liner:</p>
<pre class=""lang-python prettyprint-override""><code>sorted([&quot;%s==%s&quot; % (i.key, i.version) for i in pip.get_installed_distributions()])
</code></pre>
<p>Giving:</p>
<pre class=""lang-none prettyprint-override""><code>['behave==1.2.4', 'enum34==1.0', 'flask==0.10.1', 'itsdangerous==0.24',
 'jinja2==2.7.2', 'jsonschema==2.3.0', 'markupsafe==0.23', 'nose==1.3.3',
 'parse-type==0.3.4', 'parse==1.6.4', 'prettytable==0.7.2', 'requests==2.3.0',
 'six==1.6.1', 'vioozer-metadata==0.1', 'vioozer-users-server==0.1',
 'werkzeug==0.9.4']
</code></pre>
<h2>Scope</h2>
<p>This solution applies to the system scope or to a virtual environment scope, and covers packages installed by <code>setuptools</code>, <code>pip</code> and (<a href=""https://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install"">god forbid</a>) <code>easy_install</code>.</p>
<h2>My use case</h2>
<p>I added the result of this call to my Flask server, so when I call it with <code>http://example.com/exampleServer/environment</code> I get the list of packages installed on the server's virtualenv. It makes debugging a whole lot easier.</p>
<h2>Caveats</h2>
<p>I have noticed a strange behaviour of this technique - when the Python interpreter is invoked in the same directory as a <code>setup.py</code> file, it does not list the package installed by <code>setup.py</code>.</p>
<h3>Steps to reproduce:</h3>
<h4>Create a virtual environment</h4>
<pre class=""lang-none prettyprint-override""><code>$ cd /tmp
$ virtualenv test_env
New python executable in test_env/bin/python
Installing setuptools, pip...done.
$ source test_env/bin/activate
(test_env) $
</code></pre>
<h4>Clone a Git repository with <code>setup.py</code></h4>
<pre class=""lang-none prettyprint-override""><code>(test_env) $ git clone https://github.com/behave/behave.git
Cloning into 'behave'...
remote: Reusing existing pack: 4350, done.
remote: Total 4350 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (4350/4350), 1.85 MiB | 418.00 KiB/s, done.
Resolving deltas: 100% (2388/2388), done.
Checking connectivity... done.
</code></pre>
<p>We have behave's <code>setup.py</code> in <code>/tmp/behave</code>:</p>
<pre class=""lang-none prettyprint-override""><code>(test_env) $ ls /tmp/behave/setup.py
    /tmp/behave/setup.py
</code></pre>
<h4>Install the Python package from the Git repository</h4>
<pre class=""lang-none prettyprint-override""><code>(test_env) $ cd /tmp/behave &amp;&amp; pip install .
running install
...
Installed /private/tmp/test_env/lib/python2.7/site-packages/enum34-1.0-py2.7.egg
Finished processing dependencies for behave==1.2.5a1
</code></pre>
<h3>If we run the aforementioned solution from <code>/tmp</code></h3>
<pre class=""lang-none prettyprint-override""><code>&gt;&gt;&gt; import pip
&gt;&gt;&gt; sorted([&quot;%s==%s&quot; % (i.key, i.version) for i in pip.get_installed_distributions()])
['behave==1.2.5a1', 'enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1']
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getcwd()
'/private/tmp'
</code></pre>
<h3>If we run the aforementioned solution from <code>/tmp/behave</code></h3>
<pre class=""lang-none prettyprint-override""><code>&gt;&gt;&gt; import pip
&gt;&gt;&gt; sorted([&quot;%s==%s&quot; % (i.key, i.version) for i in pip.get_installed_distributions()])
['enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1']
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getcwd()
'/private/tmp/behave'
</code></pre>
<p><code>behave==1.2.5a1</code> is missing from the second example, because the working directory contains <code>behave</code>'s <code>setup.py</code> file.</p>
<p>I could not find any reference to this issue in the documentation. Perhaps I shall open a bug for it.</p>
"
Get the data received in a Flask request,https://stackoverflow.com/questions/10434599/get-the-data-received-in-a-flask-request,1300,python;flask;werkzeug,"<p>The <a href=""https://flask.palletsprojects.com/api/#flask.Request"" rel=""noreferrer"">docs</a> describe the attributes available on the <code>request</code> object (<code>from flask import request</code>) during a request. In most common cases <code>request.data</code> will be empty because it's used as a fallback:</p>
<blockquote>
<p><code>request.data</code> Contains the incoming request data as string in case it came with a mimetype Flask does not handle.</p>
</blockquote>
<ul>
<li><a href=""https://flask.palletsprojects.com/api/#flask.Request.args"" rel=""noreferrer""><code>request.args</code></a>: the key/value pairs in the URL query string</li>
<li><a href=""https://flask.palletsprojects.com/api/#flask.Request.form"" rel=""noreferrer""><code>request.form</code></a>: the key/value pairs in the body, from a HTML post form, or JavaScript request that isn't JSON encoded</li>
<li><a href=""https://flask.palletsprojects.com/api/#flask.Request.files"" rel=""noreferrer""><code>request.files</code></a>: the files in the body, which Flask keeps separate from <code>form</code>. HTML forms must use <code>enctype=multipart/form-data</code> or files will not be uploaded.</li>
<li><a href=""https://flask.palletsprojects.com/api/#flask.Request.values"" rel=""noreferrer""><code>request.values</code></a>: combined <code>args</code> and <code>form</code>, preferring <code>args</code> if keys overlap</li>
<li><a href=""https://flask.palletsprojects.com/api/#flask.Request.json"" rel=""noreferrer""><code>request.json</code></a>: parsed JSON data. The request must have the <code>application/json</code> content type, or use <a href=""https://flask.palletsprojects.com/api/#flask.Request.get_json"" rel=""noreferrer""><code>request.get_json(force=True)</code></a> to ignore the content type.</li>
</ul>
<p>All of these are <a href=""https://werkzeug.palletsprojects.com/datastructures/#werkzeug.datastructures.MultiDict"" rel=""noreferrer""><code>MultiDict</code></a> instances (except for <code>json</code>). You can access values using:</p>
<ul>
<li><code>request.form['name']</code>: use indexing if you know the key exists</li>
<li><code>request.form.get('name')</code>: use <code>get</code> if the key might not exist</li>
<li><code>request.form.getlist('name')</code>: use <code>getlist</code> if the key is sent multiple times and you want a list of values. <code>get</code> only returns the first value.</li>
</ul>
"
Maximum and Minimum values for ints,https://stackoverflow.com/questions/7604966/maximum-and-minimum-values-for-ints,1300,python;integer,"<h3>Python 3</h3>
<p>In Python 3, this question doesn't apply. The plain <code>int</code> type is unbounded.</p>
<p>However, you might actually be looking for information about the current interpreter's <em><a href=""https://en.wikipedia.org/wiki/Word_(computer_architecture)#Table_of_word_sizes"" rel=""noreferrer"">word size</a></em>, which will be the same as the machine's word size in most cases. That information is still available in Python 3 as <a href=""https://docs.python.org/3/library/sys.html#sys.maxsize"" rel=""noreferrer""><code>sys.maxsize</code></a>, which is the maximum value representable by a signed word. Equivalently, it's the size of the largest possible list or in-memory sequence.</p>
<p>Generally, the maximum value representable by an unsigned word will be <code>sys.maxsize * 2 + 1</code>, and the number of bits in a word will be <code>math.log2(sys.maxsize * 2 + 2)</code>. See <a href=""https://stackoverflow.com/a/6918334/577088"">this answer</a> for more information.</p>
<h3>Python 2</h3>
<p>In Python 2, the maximum value for plain <code>int</code> values is available as <a href=""https://docs.python.org/2/library/sys.html#sys.maxint"" rel=""noreferrer""><code>sys.maxint</code></a>:</p>
<pre><code>&gt;&gt;&gt; sys.maxint  # on my system, 2**63-1
9223372036854775807
</code></pre>
<p>You can calculate the minimum value with <code>-sys.maxint - 1</code> as shown <a href=""https://docs.python.org/2/library/sys.html#sys.maxint"" rel=""noreferrer"">in the docs</a>.</p>
<p>Python seamlessly switches from plain to long integers once you exceed this value. So most of the time, you won't need to know it.</p>
"
How do I iterate through two lists in parallel?,https://stackoverflow.com/questions/1663807/how-do-i-iterate-through-two-lists-in-parallel,1298,python;list;for-loop;iterator,"<h2>Python 3</h2>
<pre><code>for f, b in zip(foo, bar):
    print(f, b)
</code></pre>
<p><code>zip</code> stops when the shorter of <code>foo</code> or <code>bar</code> stops.</p>
<p>In <strong>Python 3</strong>, <a href=""https://docs.python.org/3/library/functions.html#zip"" rel=""noreferrer""><code>zip</code></a>
returns an iterator of tuples, like <code>itertools.izip</code> in Python2.  To get a list
of tuples, use <code>list(zip(foo, bar))</code>. And to zip until both iterators are
exhausted, you would use
<a href=""https://docs.python.org/3/library/itertools.html#itertools.zip_longest"" rel=""noreferrer"">itertools.zip_longest</a>.</p>
<h2>Python 2</h2>
<p>In <strong>Python 2</strong>, <a href=""https://docs.python.org/2/library/functions.html#zip"" rel=""noreferrer""><code>zip</code></a>
returns a list of tuples. This is fine when <code>foo</code> and <code>bar</code> are not massive. If they are both massive then forming <code>zip(foo,bar)</code> is an unnecessarily massive
temporary variable, and should be replaced by <code>itertools.izip</code> or
<code>itertools.izip_longest</code>, which returns an iterator instead of a list.</p>
<pre><code>import itertools
for f,b in itertools.izip(foo,bar):
    print(f,b)
for f,b in itertools.izip_longest(foo,bar):
    print(f,b)
</code></pre>
<p><code>izip</code> stops when either <code>foo</code> or <code>bar</code> is exhausted.
<code>izip_longest</code> stops when both <code>foo</code> and <code>bar</code> are exhausted.
When the shorter iterator(s) are exhausted, <code>izip_longest</code> yields a tuple with <code>None</code> in the position corresponding to that iterator. You can also set a different <code>fillvalue</code> besides <code>None</code> if you wish. See here for the <a href=""http://docs.python.org/library/itertools.html#itertools.izip_longest"" rel=""noreferrer"">full story</a>.</p>
<hr />
<p>Note also that <code>zip</code> and its <code>zip</code>-like brethen can accept an arbitrary number of iterables as arguments. For example,</p>
<pre><code>for num, cheese, color in zip([1,2,3], ['manchego', 'stilton', 'brie'], 
                              ['red', 'blue', 'green']):
    print('{} {} {}'.format(num, color, cheese))
</code></pre>
<p>prints</p>
<pre><code>1 red manchego
2 blue stilton
3 green brie
</code></pre>
"
How to print a number using commas as thousands separators,https://stackoverflow.com/questions/1823058/how-to-print-a-number-using-commas-as-thousands-separators,1296,python;number-formatting,"<h3>Locale-agnostic: use <code>_</code> as the thousand separator</h3>
<pre><code>f'{value:_}'          # For Python ≥3.6
</code></pre>
<p>Note that this will NOT format in the user's current locale and will always use <code>_</code> as the thousand separator, so for example:</p>
<pre><code>1234567 ⟶ 1_234_567
</code></pre>
<h3>English style: use <code>,</code> as the thousand separator</h3>
<pre><code>'{:,}'.format(value)  # For Python ≥2.7
f'{value:,}'          # For Python ≥3.6
</code></pre>
<h3>Locale-aware</h3>
<pre><code>import locale
locale.setlocale(locale.LC_ALL, '')  # Use '' for auto, or force e.g. to 'en_US.UTF-8'

'{:n}'.format(value)  # For Python ≥2.7
f'{value:n}'          # For Python ≥3.6
</code></pre>
<h3>Reference</h3>
<p>Per <a href=""https://docs.python.org/library/string.html#format-specification-mini-language"" rel=""noreferrer"">Format Specification Mini-Language</a>,</p>
<blockquote>
<p>The <code>','</code> option signals the use of a comma for a thousands separator. For a locale aware separator, use the <code>'n'</code> integer presentation type instead.</p>
</blockquote>
<p>and:</p>
<blockquote>
<p>The <code>'_'</code> option signals the use of an underscore for a thousands separator for floating point presentation types and for integer presentation type <code>'d'</code>. For integer presentation types <code>'b'</code>, <code>'o'</code>, <code>'x'</code>, and <code>'X'</code>, underscores will be inserted every 4 digits.</p>
</blockquote>
"
How do I install a Python package with a .whl file?,https://stackoverflow.com/questions/27885397/how-do-i-install-a-python-package-with-a-whl-file,1296,python;pip;python-wheel,"<p>I just used the following which was quite simple. First open a console then cd to where you've downloaded your file like some-package.whl and use</p>

<pre><code>pip install some-package.whl
</code></pre>

<p>Note: if pip.exe is not recognized, you may find it in the ""Scripts"" directory from where python has been installed. If pip is not installed, this page can help:
<a href=""https://stackoverflow.com/questions/4750806/how-to-install-pip-on-windows"">How do I install pip on Windows?</a></p>

<p><em>Note: for clarification</em><br>
If you copy the <code>*.whl</code> file to your local drive (ex. <strong>C:\some-dir\some-file.whl</strong>) use the following command line parameters --  </p>

<pre><code>pip install C:/some-dir/some-file.whl
</code></pre>
"
Fastest way to check if a value exists in a list,https://stackoverflow.com/questions/7571635/fastest-way-to-check-if-a-value-exists-in-a-list,1286,python;list;performance;membership,"<pre><code>7 in a
</code></pre>

<p>Clearest and fastest way to do it.</p>

<p>You can also consider using a <code>set</code>, but constructing that set from your list may take more time than faster membership testing will save. The only way to be certain is to benchmark well. (this also depends on what operations you require)</p>
"
Usage of __slots__?,https://stackoverflow.com/questions/472000/usage-of-slots,1286,python;oop;python-internals;slots,"<blockquote>
<h1>In Python, what is the purpose of <code>__slots__</code> and what are the cases one should avoid this?</h1>
</blockquote>
<h2>TLDR:</h2>
<p>The special attribute <a href=""https://docs.python.org/3/reference/datamodel.html#slots"" rel=""noreferrer""><code>__slots__</code></a> allows you to explicitly state which instance attributes you expect your object instances to have, with the expected results:</p>
<ol>
<li><strong>faster</strong> attribute access.</li>
<li><strong>space savings</strong> in memory.</li>
</ol>
<p>The space savings is from</p>
<ol>
<li>Storing value references in slots instead of <code>__dict__</code>.</li>
<li>Denying <a href=""https://docs.python.org/3/library/stdtypes.html#object.__dict__"" rel=""noreferrer""><code>__dict__</code></a> and <a href=""https://stackoverflow.com/questions/36787603/what-exactly-is-weakref-in-python""><code>__weakref__</code></a> creation if parent classes deny them and you declare <code>__slots__</code>.</li>
</ol>
<h3>Quick Caveats</h3>
<p>Small caveat, you should only declare a particular slot one time in an inheritance tree. For example:</p>
<pre><code>class Base:
    __slots__ = 'foo', 'bar'

class Right(Base):
    __slots__ = 'baz', 

class Wrong(Base):
    __slots__ = 'foo', 'bar', 'baz'        # redundant foo and bar
</code></pre>
<p>Python doesn't object when you get this wrong (it probably should), problems might not otherwise manifest, but your objects will take up more space than they otherwise should. Python 3.8:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; from sys import getsizeof
&gt;&gt;&gt; getsizeof(Right()), getsizeof(Wrong())
(56, 72)
</code></pre>
<p>This is because the Base's slot descriptor has a slot separate from the Wrong's. This shouldn't usually come up, but it could:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; w = Wrong()
&gt;&gt;&gt; w.foo = 'foo'
&gt;&gt;&gt; Base.foo.__get__(w)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
AttributeError: foo
&gt;&gt;&gt; Wrong.foo.__get__(w)
'foo'
</code></pre>
<p>The biggest caveat is for multiple inheritance - multiple &quot;parent classes with nonempty slots&quot; cannot be combined.</p>
<p>To accommodate this restriction, follow best practices: Factor out all but one or all parents' abstraction which their concrete class respectively and your new concrete class collectively will inherit from - giving the abstraction(s) empty slots (just like abstract base classes in the standard library).</p>
<p>See section on multiple inheritance below for an example.</p>
<h3>Requirements:</h3>
<ul>
<li><p>To have attributes named in <code>__slots__</code> to actually be stored in slots instead of a <code>__dict__</code>, a class must inherit from <code>object</code> (automatic in Python 3, but must be explicit in Python 2).</p>
</li>
<li><p>To prevent the creation of a <code>__dict__</code>, you must inherit from <code>object</code> and all classes in the inheritance must declare <code>__slots__</code> and none of them can have a <code>'__dict__'</code> entry.</p>
</li>
</ul>
<p>There are a lot of details if you wish to keep reading.</p>
<h2>Why use <code>__slots__</code>: Faster attribute access.</h2>
<p>The creator of Python, Guido van Rossum, <a href=""http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html"" rel=""noreferrer"">states</a> that he actually created <code>__slots__</code> for faster attribute access.</p>
<p>It is trivial to demonstrate measurably significant faster access:</p>
<pre><code>import timeit

class Foo(object): __slots__ = 'foo',

class Bar(object): pass

slotted = Foo()
not_slotted = Bar()

def get_set_delete_fn(obj):
    def get_set_delete():
        obj.foo = 'foo'
        obj.foo
        del obj.foo
    return get_set_delete
</code></pre>
<p>and</p>
<pre><code>&gt;&gt;&gt; min(timeit.repeat(get_set_delete_fn(slotted)))
0.2846834529991611
&gt;&gt;&gt; min(timeit.repeat(get_set_delete_fn(not_slotted)))
0.3664822799983085
</code></pre>
<p>The slotted access is almost 30% faster in Python 3.5 on Ubuntu.</p>
<pre><code>&gt;&gt;&gt; 0.3664822799983085 / 0.2846834529991611
1.2873325658284342
</code></pre>
<p>In Python 2 on Windows I have measured it about 15% faster.</p>
<h2>Why use <code>__slots__</code>:  Memory Savings</h2>
<p>Another purpose of <code>__slots__</code> is to reduce the space in memory that each object instance takes up.</p>
<p><a href=""https://docs.python.org/3/reference/datamodel.html#slots"" rel=""noreferrer"">My own contribution to the documentation clearly states the reasons behind this</a>:</p>
<blockquote>
<p>The space saved over using <code>__dict__</code> can be significant.</p>
</blockquote>
<p><a href=""http://docs.sqlalchemy.org/en/rel_1_0/changelog/migration_10.html#significant-improvements-in-structural-memory-use"" rel=""noreferrer"">SQLAlchemy attributes</a> a lot of memory savings to <code>__slots__</code>.</p>
<p>To verify this, using the Anaconda distribution of Python 2.7 on Ubuntu Linux, with <code>guppy.hpy</code> (aka heapy) and <code>sys.getsizeof</code>, the size of a class instance without <code>__slots__</code> declared, and nothing else, is 64 bytes. That does <em>not</em> include the <code>__dict__</code>. Thank you Python for lazy evaluation again, the <code>__dict__</code> is apparently not called into existence until it is referenced, but classes without data are usually useless. When called into existence, the <code>__dict__</code> attribute is a minimum of 280 bytes additionally.</p>
<p>In contrast, a class instance with <code>__slots__</code> declared to be <code>()</code> (no data) is only 16 bytes, and 56 total bytes with one item in slots, 64 with two.</p>
<p>For 64 bit Python, I illustrate the memory consumption in bytes in Python 2.7 and 3.6, for <code>__slots__</code> and <code>__dict__</code> (no slots defined) for each point where the dict grows in 3.6 (except for 0, 1, and 2 attributes):</p>
<pre><code>       Python 2.7             Python 3.6
attrs  __slots__  __dict__*   __slots__  __dict__* | *(no slots defined)
none   16         56 + 272†   16         56 + 112† | †if __dict__ referenced
one    48         56 + 272    48         56 + 112
two    56         56 + 272    56         56 + 112
six    88         56 + 1040   88         56 + 152
11     128        56 + 1040   128        56 + 240
22     216        56 + 3344   216        56 + 408     
43     384        56 + 3344   384        56 + 752
</code></pre>
<p>So, in spite of smaller dicts in Python 3, we see how nicely <code>__slots__</code> scale for instances to save us memory, and that is a major reason you would want to use <code>__slots__</code>.</p>
<p>Just for completeness of my notes, note that there is a one-time cost per slot in the class's namespace of 64 bytes in Python 2, and 72 bytes in Python 3, because slots use data descriptors like properties, called &quot;members&quot;.</p>
<pre><code>&gt;&gt;&gt; Foo.foo
&lt;member 'foo' of 'Foo' objects&gt;
&gt;&gt;&gt; type(Foo.foo)
&lt;class 'member_descriptor'&gt;
&gt;&gt;&gt; getsizeof(Foo.foo)
72
</code></pre>
<h2>Demonstration of <code>__slots__</code>:</h2>
<p>To deny the creation of a <code>__dict__</code>, you must subclass <code>object</code>. Everything subclasses <code>object</code> in Python 3, but in Python 2 you had to be explicit:</p>
<pre><code>class Base(object): 
    __slots__ = ()
</code></pre>
<p>now:</p>
<pre><code>&gt;&gt;&gt; b = Base()
&gt;&gt;&gt; b.a = 'a'
Traceback (most recent call last):
  File &quot;&lt;pyshell#38&gt;&quot;, line 1, in &lt;module&gt;
    b.a = 'a'
AttributeError: 'Base' object has no attribute 'a'
</code></pre>
<p>Or subclass another class that defines <code>__slots__</code></p>
<pre><code>class Child(Base):
    __slots__ = ('a',)
</code></pre>
<p>and now:</p>
<pre><code>c = Child()
c.a = 'a'
</code></pre>
<p>but:</p>
<pre><code>&gt;&gt;&gt; c.b = 'b'
Traceback (most recent call last):
  File &quot;&lt;pyshell#42&gt;&quot;, line 1, in &lt;module&gt;
    c.b = 'b'
AttributeError: 'Child' object has no attribute 'b'
</code></pre>
<p>To allow <code>__dict__</code> creation while subclassing slotted objects, just add <code>'__dict__'</code> to the <code>__slots__</code> (note that slots are ordered, and you shouldn't repeat slots that are already in parent classes):</p>
<pre><code>class SlottedWithDict(Child): 
    __slots__ = ('__dict__', 'b')

swd = SlottedWithDict()
swd.a = 'a'
swd.b = 'b'
swd.c = 'c'
</code></pre>
<p>and</p>
<pre><code>&gt;&gt;&gt; swd.__dict__
{'c': 'c'}
</code></pre>
<p>Or you don't even need to declare <code>__slots__</code> in your subclass, and you will still use slots from the parents, but not restrict the creation of a <code>__dict__</code>:</p>
<pre><code>class NoSlots(Child): pass
ns = NoSlots()
ns.a = 'a'
ns.b = 'b'
</code></pre>
<p>And:</p>
<pre><code>&gt;&gt;&gt; ns.__dict__
{'b': 'b'}
</code></pre>
<p>However, <code>__slots__</code> may cause problems for multiple inheritance:</p>
<pre><code>class BaseA(object): 
    __slots__ = ('a',)

class BaseB(object): 
    __slots__ = ('b',)
</code></pre>
<p>Because creating a child class from parents with both non-empty slots fails:</p>
<pre><code>&gt;&gt;&gt; class Child(BaseA, BaseB): __slots__ = ()
Traceback (most recent call last):
  File &quot;&lt;pyshell#68&gt;&quot;, line 1, in &lt;module&gt;
    class Child(BaseA, BaseB): __slots__ = ()
TypeError: Error when calling the metaclass bases
    multiple bases have instance lay-out conflict
</code></pre>
<p>If you run into this problem, You <em>could</em> just remove <code>__slots__</code> from the parents, or if you have control of the parents, give them empty slots, or refactor to abstractions:</p>
<pre><code>from abc import ABC

class AbstractA(ABC):
    __slots__ = ()

class BaseA(AbstractA): 
    __slots__ = ('a',)

class AbstractB(ABC):
    __slots__ = ()

class BaseB(AbstractB): 
    __slots__ = ('b',)

class Child(AbstractA, AbstractB): 
    __slots__ = ('a', 'b')

c = Child() # no problem!
</code></pre>
<h3>Add <code>'__dict__'</code> to <code>__slots__</code> to get dynamic assignment:</h3>
<pre><code>class Foo(object):
    __slots__ = 'bar', 'baz', '__dict__'
</code></pre>
<p>and now:</p>
<pre><code>&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo.boink = 'boink'
</code></pre>
<p>So with <code>'__dict__'</code> in slots we lose some of the size benefits with the upside of having dynamic assignment and still having slots for the names we do expect.</p>
<p>When you inherit from an object that isn't slotted, you get the same sort of semantics when you use <code>__slots__</code> - names that are in <code>__slots__</code> point to  slotted values, while any other values are put in the instance's <code>__dict__</code>.</p>
<p>Avoiding <code>__slots__</code> because you want to be able to add attributes on the fly is actually not a good reason - just add <code>&quot;__dict__&quot;</code> to your <code>__slots__</code> if this is required.</p>
<p>You can similarly add <code>__weakref__</code> to <code>__slots__</code> explicitly if you need that feature.</p>
<h3>Set to empty tuple when subclassing a namedtuple:</h3>
<p>The namedtuple builtin make immutable instances that are very lightweight (essentially, the size of tuples) but to get the benefits, you need to do it yourself if you subclass them:</p>
<pre><code>from collections import namedtuple
class MyNT(namedtuple('MyNT', 'bar baz')):
    &quot;&quot;&quot;MyNT is an immutable and lightweight object&quot;&quot;&quot;
    __slots__ = ()
</code></pre>
<p>usage:</p>
<pre><code>&gt;&gt;&gt; nt = MyNT('bar', 'baz')
&gt;&gt;&gt; nt.bar
'bar'
&gt;&gt;&gt; nt.baz
'baz'
</code></pre>
<p>And trying to assign an unexpected attribute raises an <code>AttributeError</code> because we have prevented the creation of <code>__dict__</code>:</p>
<pre><code>&gt;&gt;&gt; nt.quux = 'quux'
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
AttributeError: 'MyNT' object has no attribute 'quux'
</code></pre>
<p>You <em>can</em> allow <code>__dict__</code> creation by leaving off <code>__slots__ = ()</code>, but you can't use non-empty <code>__slots__</code> with subtypes of tuple.</p>
<h2>Biggest Caveat: Multiple inheritance</h2>
<p>Even when non-empty slots are the same for multiple parents, they cannot be used together:</p>
<pre><code>class Foo(object): 
    __slots__ = 'foo', 'bar'
class Bar(object):
    __slots__ = 'foo', 'bar' # alas, would work if empty, i.e. ()

&gt;&gt;&gt; class Baz(Foo, Bar): pass
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: Error when calling the metaclass bases
    multiple bases have instance lay-out conflict
</code></pre>
<p>Using an empty <code>__slots__</code> in the parent seems to provide the most flexibility, <strong>allowing the child to choose to prevent or allow</strong> (by adding <code>'__dict__'</code> to get dynamic assignment, see section above) <strong>the creation of a <code>__dict__</code></strong>:</p>
<pre><code>class Foo(object): __slots__ = ()
class Bar(object): __slots__ = ()
class Baz(Foo, Bar): __slots__ = ('foo', 'bar')
b = Baz()
b.foo, b.bar = 'foo', 'bar'
</code></pre>
<p>You don't <em>have</em> to have slots - so if you add them, and remove them later, it shouldn't cause any problems.</p>
<p><strong>Going out on a limb here</strong>: If you're composing <a href=""https://stackoverflow.com/questions/860245/mixin-vs-inheritance/27907511#27907511"">mixins</a> or using <a href=""https://stackoverflow.com/questions/372042/difference-between-abstract-class-and-interface-in-python/31439126#31439126"">abstract base classes</a>, which aren't intended to be instantiated, an empty <code>__slots__</code> in those parents seems to be the best way to go in terms of flexibility for subclassers.</p>
<p>To demonstrate, first, let's create a class with code we'd like to use under multiple inheritance</p>
<pre><code>class AbstractBase:
    __slots__ = ()
    def __init__(self, a, b):
        self.a = a
        self.b = b
    def __repr__(self):
        return f'{type(self).__name__}({repr(self.a)}, {repr(self.b)})'
</code></pre>
<p>We could use the above directly by inheriting and declaring the expected slots:</p>
<pre><code>class Foo(AbstractBase):
    __slots__ = 'a', 'b'
</code></pre>
<p>But we don't care about that, that's trivial single inheritance, we need another class we might also inherit from, maybe with a noisy attribute:</p>
<pre><code>class AbstractBaseC:
    __slots__ = ()
    @property
    def c(self):
        print('getting c!')
        return self._c
    @c.setter
    def c(self, arg):
        print('setting c!')
        self._c = arg
</code></pre>
<p>Now if both bases had nonempty slots, we couldn't do the below. (In fact, if we wanted, we could have given <code>AbstractBase</code> nonempty slots a and b, and left them out of the below declaration - leaving them in would be wrong):</p>
<pre><code>class Concretion(AbstractBase, AbstractBaseC):
    __slots__ = 'a b _c'.split()
</code></pre>
<p>And now we have functionality from both via multiple inheritance, and can still deny <code>__dict__</code> and <code>__weakref__</code> instantiation:</p>
<pre><code>&gt;&gt;&gt; c = Concretion('a', 'b')
&gt;&gt;&gt; c.c = c
setting c!
&gt;&gt;&gt; c.c
getting c!
Concretion('a', 'b')
&gt;&gt;&gt; c.d = 'd'
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
AttributeError: 'Concretion' object has no attribute 'd'
</code></pre>
<h2>Other cases to avoid slots:</h2>
<ul>
<li>Avoid them when you want to perform <code>__class__</code> assignment with another class that doesn't have them (and you can't add them) unless the slot layouts are identical. (I am very interested in learning who is doing this and why.)</li>
<li>Avoid them if you want to subclass variable length builtins like long, tuple, or str, and you want to add attributes to them.</li>
<li>Avoid them if you insist on providing default values via class attributes for instance variables.</li>
</ul>
<p>You may be able to tease out further caveats from the rest of the <code>__slots__</code> <a href=""https://docs.python.org/3.7/reference/datamodel.html#slots"" rel=""noreferrer"">documentation (the 3.7 dev docs are the most current)</a>, which I have made significant recent contributions to.</p>
<h2>Critiques of other answers</h2>
<p>The current top answers cite outdated information and are quite hand-wavy and miss the mark in some important ways.</p>
<h3>Do not &quot;only use <code>__slots__</code> when instantiating lots of objects&quot;</h3>
<p>I quote:</p>
<blockquote>
<p>&quot;You would want to use <code>__slots__</code> if you are going to instantiate a lot (hundreds, thousands) of objects of the same class.&quot;</p>
</blockquote>
<p>Abstract Base Classes, for example, from the <code>collections</code> module, are not instantiated, yet <code>__slots__</code> are declared for them.</p>
<p>Why?</p>
<p>If a user wishes to deny <code>__dict__</code> or <code>__weakref__</code> creation, those things must not be available in the parent classes.</p>
<p><code>__slots__</code> contributes to reusability when creating interfaces or mixins.</p>
<p>It is true that many Python users aren't writing for reusability, but when you are, having the option to deny unnecessary space usage is valuable.</p>
<h3><code>__slots__</code> doesn't break pickling</h3>
<p>When pickling a slotted object, you may find it complains with a misleading <code>TypeError</code>:</p>
<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f))
TypeError: a class that defines __slots__ without defining __getstate__ cannot be pickled
</code></pre>
<p>This is actually incorrect. This message comes from the oldest protocol, which is the default. You can select the latest protocol with the <code>-1</code> argument. In Python 2.7 this would be <code>2</code> (which was introduced in 2.3), and in 3.6 it is <code>4</code>.</p>
<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f, -1))
&lt;__main__.Foo object at 0x1129C770&gt;
</code></pre>
<p>in Python 2.7:</p>
<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f, 2))
&lt;__main__.Foo object at 0x1129C770&gt;
</code></pre>
<p>in Python 3.6</p>
<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f, 4))
&lt;__main__.Foo object at 0x1129C770&gt;
</code></pre>
<p>So I would keep this in mind, as it is a solved problem.</p>
<h2>Critique of the (until Oct 2, 2016) accepted answer</h2>
<p>The first paragraph is half short explanation, half predictive. Here's the only part that actually answers the question</p>
<blockquote>
<p>The proper use of <code>__slots__</code> is to save space in objects. Instead of having a dynamic dict that allows adding attributes to objects at anytime, there is a static structure which does not allow additions after creation. This saves the overhead of one dict for every object that uses slots</p>
</blockquote>
<p>The second half is wishful thinking, and off the mark:</p>
<blockquote>
<p>While this is sometimes a useful optimization, it would be completely unnecessary if the Python interpreter was dynamic enough so that it would only require the dict when there actually were additions to the object.</p>
</blockquote>
<p>Python actually does something similar to this, only creating the <code>__dict__</code> when it is accessed, but creating lots of objects with no data is fairly ridiculous.</p>
<p>The second paragraph oversimplifies and misses actual reasons to avoid <code>__slots__</code>. The below is <em>not</em> a real reason to avoid slots (for <em>actual</em> reasons, see the rest of my answer above.):</p>
<blockquote>
<p>They change the behavior of the objects that have slots in a way that can be abused by control freaks and static typing weenies.</p>
</blockquote>
<p>It then goes on to discuss other ways of accomplishing that perverse goal with Python, not discussing anything to do with <code>__slots__</code>.</p>
<p>The third paragraph is more wishful thinking. Together it is mostly off-the-mark content that the answerer didn't even author and contributes to ammunition for critics of the site.</p>
<h1>Memory usage evidence</h1>
<p>Create some normal objects and slotted objects:</p>
<pre><code>&gt;&gt;&gt; class Foo(object): pass
&gt;&gt;&gt; class Bar(object): __slots__ = ()
</code></pre>
<p>Instantiate a million of them:</p>
<pre><code>&gt;&gt;&gt; foos = [Foo() for f in xrange(1000000)]
&gt;&gt;&gt; bars = [Bar() for b in xrange(1000000)]
</code></pre>
<p>Inspect with <code>guppy.hpy().heap()</code>:</p>
<pre><code>&gt;&gt;&gt; guppy.hpy().heap()
Partition of a set of 2028259 objects. Total size = 99763360 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0 1000000  49 64000000  64  64000000  64 __main__.Foo
     1     169   0 16281480  16  80281480  80 list
     2 1000000  49 16000000  16  96281480  97 __main__.Bar
     3   12284   1   987472   1  97268952  97 str
...
</code></pre>
<p>Access the regular objects and their <code>__dict__</code> and inspect again:</p>
<pre><code>&gt;&gt;&gt; for f in foos:
...     f.__dict__
&gt;&gt;&gt; guppy.hpy().heap()
Partition of a set of 3028258 objects. Total size = 379763480 bytes.
 Index  Count   %      Size    % Cumulative  % Kind (class / dict of class)
     0 1000000  33 280000000  74 280000000  74 dict of __main__.Foo
     1 1000000  33  64000000  17 344000000  91 __main__.Foo
     2     169   0  16281480   4 360281480  95 list
     3 1000000  33  16000000   4 376281480  99 __main__.Bar
     4   12284   0    987472   0 377268952  99 str
...
</code></pre>
<p>This is consistent with the history of Python, from <a href=""https://www.python.org/download/releases/2.2.2/descrintro/"" rel=""noreferrer"">Unifying types and classes in Python 2.2</a></p>
<blockquote>
<p>If you subclass a built-in type, extra space is automatically added to the instances to accomodate <code>__dict__</code> and <code>__weakrefs__</code>. (The <code>__dict__</code> is not initialized until you use it though, so you shouldn't worry about the space occupied by an empty dictionary for each instance you create.) If you don't need this extra space, you can add the phrase &quot;<code>__slots__ = []</code>&quot; to your class.</p>
</blockquote>
"
How do I sort a list of objects based on an attribute of the objects?,https://stackoverflow.com/questions/403421/how-do-i-sort-a-list-of-objects-based-on-an-attribute-of-the-objects,1280,python;list;sorting;reverse,"<p>To sort the list in place:</p>
<pre><code>orig_list.sort(key=lambda x: x.count, reverse=True)
</code></pre>
<p>To return a new list, use <code>sorted</code>:</p>
<pre><code>new_list = sorted(orig_list, key=lambda x: x.count, reverse=True)
</code></pre>
<p>Explanation:</p>
<ul>
<li><code>key=lambda x: x.count</code> sorts by count.</li>
<li><code>reverse=True</code> sorts in descending order.</li>
</ul>
<p>More on <a href=""http://wiki.python.org/moin/HowTo/Sorting#Sortingbykeys"" rel=""noreferrer"">sorting by keys</a>.</p>
"
"Should I put #! (shebang) in Python scripts, and what form should it take?",https://stackoverflow.com/questions/6908143/should-i-put-shebang-in-python-scripts-and-what-form-should-it-take,1280,python;shell;python-3.x;shebang,"<p>The shebang line in any script determines the script's ability to be executed like a standalone executable without typing <code>python</code> beforehand in the terminal or when double clicking it in a file manager (when configured properly). It isn't necessary but generally put there so when someone sees the file opened in an editor, they immediately know what they're looking at. However, which shebang line you use <em>is</em> important.</p>
<p><strong>Correct</strong> usage for (defaults to version 3.latest) <strong>Python 3</strong> scripts is:</p>

<pre class=""lang-none prettyprint-override""><code>#!/usr/bin/env python3
</code></pre>
<p><strong>Correct</strong> usage for (defaults to version 2.latest) <strong>Python 2</strong> scripts is:</p>

<pre class=""lang-none prettyprint-override""><code>#!/usr/bin/env python2
</code></pre>
<p>The following <strong>should <em>not</em> be used</strong> (except for the rare case that you are writing code which is compatible with both Python 2.x and 3.x):</p>
<pre class=""lang-none prettyprint-override""><code>#!/usr/bin/env python
</code></pre>
<p>The reason for these recommendations, given in <a href=""https://www.python.org/dev/peps/pep-0394/#recommendation"" rel=""noreferrer"" title=""PEP 394"">PEP 394</a>, is that <code>python</code> can refer either to <code>python2</code> or <code>python3</code> on different systems.</p>
<p><strong>Also, do not use:</strong></p>
<pre class=""lang-none prettyprint-override""><code>#!/usr/local/bin/python
</code></pre>
<blockquote>
<p>&quot;python may be installed at /usr/bin/python or /bin/python in those
cases, the above #! will fail.&quot;</p>
</blockquote>
<p>―<a href=""https://mail.python.org/pipermail/tutor/2007-June/054816.html"" rel=""noreferrer"">&quot;#!/usr/bin/env python&quot; vs &quot;#!/usr/local/bin/python&quot;</a></p>
"
Remove all whitespace in a string,https://stackoverflow.com/questions/8270092/remove-all-whitespace-in-a-string,1278,python;string;trim;removing-whitespace,"<p>If you want to remove leading and ending whitespace, use <a href=""http://docs.python.org/2/library/stdtypes.html#str.strip"" rel=""noreferrer""><code>str.strip()</code></a>:</p>
<pre><code>&gt;&gt;&gt; &quot;  hello  apple  &quot;.strip()
'hello  apple'
</code></pre>
<p>If you want to remove all space characters, use <a href=""http://docs.python.org/2/library/stdtypes.html#str.replace"" rel=""noreferrer""><code>str.replace()</code></a> <em>(NB this only removes the “normal” ASCII space character <code>' ' U+0020</code> but not <a href=""https://en.wikipedia.org/wiki/Whitespace_character#Unicode"" rel=""noreferrer"">any other whitespace</a>)</em>:</p>
<pre><code>&gt;&gt;&gt; &quot;  hello  apple  &quot;.replace(&quot; &quot;, &quot;&quot;)
'helloapple'
</code></pre>
<p>If you want to remove all whitespace and then leave a single space character between words, use <a href=""http://docs.python.org/2/library/stdtypes.html#str.split"" rel=""noreferrer""><code>str.split()</code></a> followed by <code>str.join()</code>:</p>
<pre><code>&gt;&gt;&gt; &quot; &quot;.join(&quot;  hello  apple  &quot;.split())
'hello apple'
</code></pre>
<p>If you want to remove all <a href=""https://en.wikipedia.org/wiki/Whitespace_character#Unicode"" rel=""noreferrer"">whitespace</a> then change the above leading <code>&quot; &quot;</code> to <code>&quot;&quot;</code>:</p>
<pre><code>&gt;&gt;&gt; &quot;&quot;.join(&quot;  hello  apple  &quot;.split())
'helloapple'
</code></pre>
"
Get difference between two lists with Unique Entries,https://stackoverflow.com/questions/3462143/get-difference-between-two-lists-with-unique-entries,1268,python;performance;list;set;set-difference,"<p>To get elements which are in <code>temp1</code> but not in <code>temp2</code> (<em>assuming uniqueness of the elements in each list</em>):</p>
<pre><code>In [5]: list(set(temp1) - set(temp2))
Out[5]: ['Four', 'Three']
</code></pre>
<p>Beware that it is asymmetric :</p>
<pre><code>In [5]: set([1, 2]) - set([2, 3])
Out[5]: set([1]) 
</code></pre>
<p>where you might expect/want it to equal <code>set([1, 3])</code>. If you do want <code>set([1, 3])</code> as your answer, you can use <code>set([1, 2]).symmetric_difference(set([2, 3]))</code>.</p>
"
How do you test that a Python function throws an exception?,https://stackoverflow.com/questions/129507/how-do-you-test-that-a-python-function-throws-an-exception,1267,python;unit-testing;exception,"<p>Use <a href=""http://docs.python.org/library/unittest.html#unittest.TestCase.assertRaises"" rel=""noreferrer""><code>TestCase.assertRaises</code></a> from the <code>unittest</code> module, for example:</p>
<pre><code>import mymod

class MyTestCase(unittest.TestCase):
    def test1(self):
        self.assertRaises(SomeCoolException, mymod.myfunc)
</code></pre>
"
Pretty-print an entire Pandas Series / DataFrame,https://stackoverflow.com/questions/19124601/pretty-print-an-entire-pandas-series-dataframe,1259,python;pandas;dataframe,"<p>You can also use the <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.option_context.html"" rel=""noreferrer""><code>option_context</code></a>, with one or more options:</p>

<pre><code>with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also
    print(df)
</code></pre>

<p>This will automatically return the options to their previous values.</p>

<p>If you are working on jupyter-notebook, using <code>display(df)</code> instead of <code>print(df)</code> will use jupyter rich display logic <a href=""https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.display"" rel=""noreferrer"">(like so)</a>.</p>
"
How do I trim whitespace?,https://stackoverflow.com/questions/1185524/how-do-i-trim-whitespace,1253,python;string;whitespace;trim;strip,"<p>For whitespace on both sides, use <a href=""https://docs.python.org/3/library/stdtypes.html#str.strip"" rel=""noreferrer""><code>str.strip</code></a>:</p>
<pre><code>s = &quot;  \t a string example\t  &quot;
s = s.strip()
</code></pre>
<p>For whitespace on the right side, use <a href=""https://docs.python.org/3/library/stdtypes.html#str.rstrip"" rel=""noreferrer""><code>str.rstrip</code></a>:</p>
<pre><code>s = s.rstrip()
</code></pre>
<p>For whitespace on the left side, use <a href=""https://docs.python.org/3/library/stdtypes.html#str.lstrip"" rel=""noreferrer""><code>str.lstrip</code></a>:</p>
<pre><code>s = s.lstrip()
</code></pre>
<p>You can provide an argument to strip arbitrary characters to any of these functions, like this:</p>
<pre><code>s = s.strip(' \t\n\r')
</code></pre>
<p>This will strip any space, <code>\t</code>, <code>\n</code>, or <code>\r</code> characters from both sides of the string.</p>
<p>The examples above only remove strings from the left-hand and right-hand sides of strings. If you want to also remove characters from the middle of a string, try <a href=""https://docs.python.org/3/library/re.html#re.sub"" rel=""noreferrer""><code>re.sub</code></a>:</p>
<pre><code>import re
print(re.sub('[\s+]', '', s))
</code></pre>
<p>That should print out:</p>
<pre><code>astringexample
</code></pre>
"
What is a cross-platform way to get the home directory?,https://stackoverflow.com/questions/4028904/what-is-a-cross-platform-way-to-get-the-home-directory,1252,python;cross-platform;home-directory,"<p>On <strong>Python 3.5+</strong> you can use <a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.home"" rel=""noreferrer"">pathlib.Path.home()</a>:</p>
<pre class=""lang-py prettyprint-override""><code>from pathlib import Path
home = Path.home()

# example usage:
with open(home / &quot;.ssh&quot; / &quot;known_hosts&quot;) as f:
    lines = f.readlines()
</code></pre>
<p>to get a <code>pathlib.PosixPath</code> object. Use <code>str()</code> to convert to a string if necessary.</p>
<hr />
<p>On older Python versions, you can use <a href=""http://docs.python.org/library/os.path.html?highlight=os.path#os.path.expanduser"" rel=""noreferrer"">os.path.expanduser</a>.</p>
<pre class=""lang-py prettyprint-override""><code>from os.path import expanduser
home = expanduser(&quot;~&quot;)
</code></pre>
"
How to concatenate (join) items in a list to a single string,https://stackoverflow.com/questions/12453580/how-to-concatenate-join-items-in-a-list-to-a-single-string,1251,python;string;list;concatenation,"<p>Use <a href=""https://docs.python.org/library/stdtypes.html#str.join"" rel=""noreferrer""><code>str.join</code></a>:</p>
<pre><code>&gt;&gt;&gt; words = ['this', 'is', 'a', 'sentence']
&gt;&gt;&gt; '-'.join(words)
'this-is-a-sentence'
&gt;&gt;&gt; ' '.join(words)
'this is a sentence'
</code></pre>
"
What are &quot;named tuples&quot; in Python?,https://stackoverflow.com/questions/2970608/what-are-named-tuples-in-python,1250,python;types;tuples;terminology;namedtuple,"<p>Named tuples are basically easy-to-create, lightweight object types.  Named tuple instances can be referenced using object-like variable dereferencing or the standard tuple syntax.  They can be used similarly to <code>struct</code> or other common record types, except that they are immutable.  They were added in Python 2.6 and Python 3.0, although there is a <a href=""http://code.activestate.com/recipes/500261/"" rel=""noreferrer"">recipe for implementation in Python 2.4</a>.</p>

<p>For example, it is common to represent a point as a tuple <code>(x, y)</code>.  This leads to code like the following:</p>

<pre><code>pt1 = (1.0, 5.0)
pt2 = (2.5, 1.5)

from math import sqrt
line_length = sqrt((pt1[0]-pt2[0])**2 + (pt1[1]-pt2[1])**2)
</code></pre>

<p>Using a named tuple it becomes more readable:</p>

<pre><code>from collections import namedtuple
Point = namedtuple('Point', 'x y')
pt1 = Point(1.0, 5.0)
pt2 = Point(2.5, 1.5)

from math import sqrt
line_length = sqrt((pt1.x-pt2.x)**2 + (pt1.y-pt2.y)**2)
</code></pre>

<p>However, named tuples are still backwards compatible with normal tuples, so the following will still work:</p>

<pre><code>Point = namedtuple('Point', 'x y')
pt1 = Point(1.0, 5.0)
pt2 = Point(2.5, 1.5)

from math import sqrt
# use index referencing
line_length = sqrt((pt1[0]-pt2[0])**2 + (pt1[1]-pt2[1])**2)
 # use tuple unpacking
x1, y1 = pt1
</code></pre>

<p>Thus, <strong>you should use named tuples instead of tuples anywhere you think object notation will make your code more pythonic and more easily readable</strong>.  I personally have started using them to represent very simple value types, particularly when passing them as parameters to functions.  It makes the functions more readable, without seeing the context of the tuple packing.</p>

<p>Furthermore, <strong>you can also replace ordinary <em>immutable</em> classes that have no functions</strong>, only fields with them.  You can even use your named tuple types as base classes:</p>

<pre><code>class Point(namedtuple('Point', 'x y')):
    [...]
</code></pre>

<p>However, as with tuples, attributes in named tuples are immutable:</p>

<pre><code>&gt;&gt;&gt; Point = namedtuple('Point', 'x y')
&gt;&gt;&gt; pt1 = Point(1.0, 5.0)
&gt;&gt;&gt; pt1.x = 2.0
AttributeError: can't set attribute
</code></pre>

<p>If you want to be able change the values, you need another type.  There is a handy recipe for <a href=""http://code.activestate.com/recipes/576555/"" rel=""noreferrer"">mutable recordtypes</a> which allow you to set new values to attributes.</p>

<pre><code>&gt;&gt;&gt; from rcdtype import *
&gt;&gt;&gt; Point = recordtype('Point', 'x y')
&gt;&gt;&gt; pt1 = Point(1.0, 5.0)
&gt;&gt;&gt; pt1 = Point(1.0, 5.0)
&gt;&gt;&gt; pt1.x = 2.0
&gt;&gt;&gt; print(pt1[0])
    2.0
</code></pre>

<p>I am not aware of any form of ""named list"" that lets you add new fields, however.  You may just want to use a dictionary in this situation. Named tuples can be converted to dictionaries using <code>pt1._asdict()</code> which returns <code>{'x': 1.0, 'y': 5.0}</code> and can be operated upon with all the usual dictionary functions.  </p>

<p>As already noted, you should <a href=""http://docs.python.org/py3k/library/collections.html?highlight=namedtuple#collections.namedtuple"" rel=""noreferrer"">check the documentation</a> for more information from which these examples were constructed.</p>
"
Find which version of package is installed with pip,https://stackoverflow.com/questions/10214827/find-which-version-of-package-is-installed-with-pip,1231,python;pip,"<p>As of <a href=""https://github.com/pypa/pip/blob/1.3/CHANGES.txt#L54"" rel=""noreferrer"">pip 1.3</a>, there is a <code>pip show</code> command.</p>

<pre><code>$ pip show Jinja2
---
Name: Jinja2
Version: 2.7.3
Location: /path/to/virtualenv/lib/python2.7/site-packages
Requires: markupsafe
</code></pre>

<p>In older versions, <code>pip freeze</code> and <code>grep</code> should do the job nicely.</p>

<pre><code>$ pip freeze | grep Jinja2
Jinja2==2.7.3
</code></pre>
"
Has Django served an excess of 100k daily visits?,https://stackoverflow.com/questions/886221/has-django-served-an-excess-of-100k-daily-visits,1223,python;django;web-applications;scalability,"<ol>
<li><p><strong>""What are the largest sites built on Django today?""</strong></p>

<p>There isn't any single place that collects information about traffic on Django built sites, so I'll have to take a stab at it using data from various locations.  First, we have a list of Django sites on the front page of <a href=""http://www.djangoproject.com/"" rel=""noreferrer"">the main Django project page</a> and then a list of Django built sites at <a href=""http://www.djangosites.org/"" rel=""noreferrer"">djangosites.org</a>.  Going through the lists and picking some that I know have decent traffic we see:</p>

<ul>
<li><p><strong><a href=""http://instagram.com"" rel=""noreferrer"">Instagram</a></strong>: <a href=""http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances"" rel=""noreferrer"">What Powers Instagram: Hundreds of Instances, Dozens of Technologies</a>.</p></li>
<li><p><strong><a href=""http://pinterest.com/"" rel=""noreferrer"">Pinterest</a></strong>: <a href=""http://www.alexa.com/siteinfo/Pinterest.com"" rel=""noreferrer"">Alexa rank 37 (21.4.2015)</a> and 70 Million users in 2013</p></li>
<li><p><strong><a href=""http://bitbucket.org/"" rel=""noreferrer"">Bitbucket</a></strong>: <a href=""https://blog.bitbucket.org/2015/02/05/bitbucket-2014-in-review/"" rel=""noreferrer"">200TB of Code and 2.500.000 Users</a></p></li>
<li><p><strong><a href=""http://disqus.com"" rel=""noreferrer"">Disqus</a></strong>: <a href=""http://pyvideo.org/video/418/pycon-2011--disqus--serving-400-million-people-wi"" rel=""noreferrer"">Serving 400 million people with Python</a>.</p></li>
<li><p><strong><a href=""http://curse.com/"" rel=""noreferrer"">curse.com</a></strong>: <a href=""http://www.quantcast.com/curse.com"" rel=""noreferrer"">600k daily visits</a>.</p></li>
<li><p><strong><a href=""http://tabblo.com/"" rel=""noreferrer"">tabblo.com</a></strong>: <a href=""http://www.quantcast.com/tabblo.com"" rel=""noreferrer"">44k daily visits</a>, see Ned Batchelder's posts <a href=""http://nedbatchelder.com/blog/200902/infrastructure_for_modern_web_sites.html"" rel=""noreferrer"">Infrastructure for modern web sites</a>.</p></li>
<li><p><strong><a href=""http://chesspark.com/"" rel=""noreferrer"">chesspark.com</a></strong>: <a href=""http://www.alexa.com/siteinfo/chesspark.com"" rel=""noreferrer"">Alexa</a> rank about 179k.</p></li>
<li><p><strong><a href=""http://pownce.com/"" rel=""noreferrer"">pownce.com</a></strong> (no longer active): <a href=""http://www.alexa.com/siteinfo/pownce.com"" rel=""noreferrer"">alexa</a> rank about 65k.
Mike Malone of Pownce, in his EuroDjangoCon presentation on <strong><a href=""http://www.slideshare.net/road76/scaling-django"" rel=""noreferrer"">Scaling Django Web Apps</a></strong> says ""hundreds of hits per second"".  This is a very good presentation on how to scale Django, and makes some good points including (current) shortcomings in Django scalability.</p></li>
<li><p>HP had a site built with Django 1.5: <a href=""http://www.eprintcenter.com"" rel=""noreferrer"">ePrint center</a>. However, as for novemer/2015 the entire website was migrated and this link is just a redirect. This website was a world-wide service attending subscription to Instant Ink and related services HP offered (*).</p></li>
</ul></li>
<li><p><strong>""Can Django deal with 100,000 users daily, each visiting the site for a couple of hours?""</strong></p>

<p>Yes, see above.</p></li>
<li><p><strong>""Could a site like Stack Overflow run on Django?""</strong></p>

<p>My gut feeling is yes but, as others answered and Mike Malone mentions in his presentation, database design is critical. Strong proof might also be found at www.cnprog.com if we can find any reliable traffic stats. Anyway, it's not just something that will happen by throwing together a bunch of Django models :)</p></li>
</ol>

<p>There are, of course, many more sites and bloggers of interest, but I have got to stop somewhere!</p>

<hr>

<p>Blog post about <a href=""http://web.archive.org/web/20130307032621/http://concentricsky.com/blog/2009/oct/michaelmoorecom"" rel=""noreferrer"">Using Django to build high-traffic site michaelmoore.com</a> described as a <a href=""http://www.alexa.com/siteinfo/http%3A%2F%2Fmichaelmoore.com"" rel=""noreferrer"">top 10,000 website</a>.  <a href=""http://www.quantcast.com/michaelmoore.com"" rel=""noreferrer"">Quantcast stats</a> and <a href=""http://siteanalytics.compete.com/michaelmoore.com/"" rel=""noreferrer"">compete.com stats</a>.</p>

<hr>

<p><sub>(*) The author of the edit, including such reference, used to work as outsourced developer in that project.</sub></p>
"
How to subtract a day from a date?,https://stackoverflow.com/questions/441147/how-to-subtract-a-day-from-a-date,1221,python;date;datetime;timedelta,"<p>You can use a <a href=""http://docs.python.org/library/datetime.html#timedelta-objects"" rel=""noreferrer""><code>timedelta</code></a> object:</p>
<pre><code>from datetime import datetime, timedelta
    
d = datetime.today() - timedelta(days=days_to_subtract)
</code></pre>
"
pip install from git repo branch,https://stackoverflow.com/questions/20101834/pip-install-from-git-repo-branch,1220,python;git;pip,"<p>Prepend the url prefix <code>git+</code> (See <a href=""https://pip.pypa.io/en/stable/topics/vcs-support/"" rel=""noreferrer"">VCS Support</a>):</p>
<pre><code>pip install git+https://github.com/tangentlabs/django-oscar-paypal.git@issue/34/oscar-0.6
</code></pre>
<p>And specify the branch name without the leading <code>/</code>.</p>
"
Is there a simple way to delete a list element by value?,https://stackoverflow.com/questions/2793324/is-there-a-simple-way-to-delete-a-list-element-by-value,1213,python;list,"<p>To remove the <em>first occurrence</em> of an element, use <a href=""https://docs.python.org/3/tutorial/datastructures.html#more-on-lists"" rel=""noreferrer""><code>list.remove</code></a>:</p>
<pre><code>&gt;&gt;&gt; xs = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; xs.remove('b')
&gt;&gt;&gt; print(xs)
['a', 'c', 'd']
</code></pre>
<p>To remove <em>all occurrences</em> of an element, use a <a href=""https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"" rel=""noreferrer"">list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; xs = ['a', 'b', 'c', 'd', 'b', 'b', 'b', 'b']
&gt;&gt;&gt; xs = [x for x in xs if x != 'b']
&gt;&gt;&gt; print(xs)
['a', 'c', 'd']
</code></pre>
"
Convert list of dictionaries to a pandas DataFrame,https://stackoverflow.com/questions/20638006/convert-list-of-dictionaries-to-a-pandas-dataframe,1212,python;dictionary;pandas;dataframe,"<p>If <code>ds</code> is a list of <code>dict</code>s:</p>
<pre><code>df = pd.DataFrame(ds)
</code></pre>
<p>Note: this does not work with nested data.</p>
"
"Difference between del, remove, and pop on lists in Python",https://stackoverflow.com/questions/11520492/difference-between-del-remove-and-pop-on-lists-in-python,1211,python;list,"<p>The effects of the three different methods to remove an element from a list:</p>
<p><code>remove</code> removes the <em>first</em> matching <em>value</em>, not a specific index:</p>
<pre><code>&gt;&gt;&gt; a = [0, 2, 3, 2]
&gt;&gt;&gt; a.remove(2)
&gt;&gt;&gt; a
[0, 3, 2]
</code></pre>
<p><code>del</code> removes the item at a specific index:</p>
<pre><code>&gt;&gt;&gt; a = [9, 8, 7, 6]
&gt;&gt;&gt; del a[1]
&gt;&gt;&gt; a
[9, 7, 6]
</code></pre>
<p>and <code>pop</code> removes the item at a specific index and returns it.</p>
<pre><code>&gt;&gt;&gt; a = [4, 3, 5]
&gt;&gt;&gt; a.pop(1)
3
&gt;&gt;&gt; a
[4, 5]
</code></pre>
<p>Their error modes are different too:</p>
<pre><code>&gt;&gt;&gt; a = [4, 5, 6]
&gt;&gt;&gt; a.remove(7)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
ValueError: list.remove(x): x not in list
&gt;&gt;&gt; del a[7]
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
IndexError: list assignment index out of range
&gt;&gt;&gt; a.pop(7)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
IndexError: pop index out of range
</code></pre>
"
Convert a String representation of a Dictionary to a dictionary,https://stackoverflow.com/questions/988228/convert-a-string-representation-of-a-dictionary-to-a-dictionary,1210,python;string;dictionary;type-conversion,"<p>You can use the built-in <a href=""https://docs.python.org/library/ast.html#ast.literal_eval"" rel=""noreferrer""><code>ast.literal_eval</code></a>:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval(&quot;{'muffin' : 'lolz', 'foo' : 'kitty'}&quot;)
{'muffin': 'lolz', 'foo': 'kitty'}
</code></pre>
<p>This is safer than using <code>eval</code>.  As its own docs say:</p>
<pre>
>>> help(ast.literal_eval)
Help on function literal_eval in module ast:

literal_eval(node_or_string)
    Safely evaluate an expression node or a string containing a Python
    expression.  The string or node provided may only consist of the following
    Python literal structures: strings, numbers, tuples, lists, dicts, booleans,
    and None.
</pre>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; eval(&quot;shutil.rmtree('mongo')&quot;)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;/opt/Python-2.6.1/lib/python2.6/shutil.py&quot;, line 208, in rmtree
    onerror(os.listdir, path, sys.exc_info())
  File &quot;/opt/Python-2.6.1/lib/python2.6/shutil.py&quot;, line 206, in rmtree
    names = os.listdir(path)
OSError: [Errno 2] No such file or directory: 'mongo'
&gt;&gt;&gt; ast.literal_eval(&quot;shutil.rmtree('mongo')&quot;)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;/opt/Python-2.6.1/lib/python2.6/ast.py&quot;, line 68, in literal_eval
    return _convert(node_or_string)
  File &quot;/opt/Python-2.6.1/lib/python2.6/ast.py&quot;, line 67, in _convert
    raise ValueError('malformed string')
ValueError: malformed string
</code></pre>
"
How can I write a `try`/`except` block that catches all exceptions?,https://stackoverflow.com/questions/4990718/how-can-i-write-a-try-except-block-that-catches-all-exceptions,1203,python;exception,"<p>You can but you probably shouldn't:</p>
<pre><code>try:
    do_something()
except:
    print(&quot;Caught it!&quot;)
</code></pre>
<p>However, this will also catch exceptions like <code>KeyboardInterrupt</code> and you usually don't want that, do you? Unless you re-raise the exception right away - see the following example <a href=""http://docs.python.org/tutorial/errors.html"" rel=""noreferrer"">from the docs</a>:</p>
<pre><code>try:
    f = open('myfile.txt')
    s = f.readline()
    i = int(s.strip())
except IOError as (errno, strerror):
    print(&quot;I/O error({0}): {1}&quot;.format(errno, strerror))
except ValueError:
    print(&quot;Could not convert data to an integer.&quot;)
except:
    print(&quot;Unexpected error:&quot;, sys.exc_info()[0])
    raise
</code></pre>
"
How do I check file size in Python?,https://stackoverflow.com/questions/2104080/how-do-i-check-file-size-in-python,1200,python;file,"<p>You need the <a href=""https://docs.python.org/library/os.html#os.stat_result.st_size"" rel=""noreferrer""><code>st_size</code></a> property of <a href=""https://docs.python.org/library/os.html#os.stat_result"" rel=""noreferrer"">the object returned by <code>os.stat</code></a>. You can get it by either using <a href=""https://docs.python.org/library/pathlib.html"" rel=""noreferrer""><code>pathlib</code></a> (Python 3.4+):</p>

<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; Path('somefile.txt').stat()
os.stat_result(st_mode=33188, st_ino=6419862, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=1564, st_atime=1584299303, st_mtime=1584299400, st_ctime=1584299400)
&gt;&gt;&gt; Path('somefile.txt').stat().st_size
1564
</code></pre>

<p>or using <a href=""https://docs.python.org/library/os.html#os.stat"" rel=""noreferrer""><code>os.stat</code></a>:</p>

<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.stat('somefile.txt')
os.stat_result(st_mode=33188, st_ino=6419862, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=1564, st_atime=1584299303, st_mtime=1584299400, st_ctime=1584299400)
&gt;&gt;&gt; os.stat('somefile.txt').st_size
1564
</code></pre>

<p>Output is in bytes.</p>
"
&quot;Large data&quot; workflows using pandas,https://stackoverflow.com/questions/14262433/large-data-workflows-using-pandas,1187,python;mongodb;pandas;hdf5;large-data,"<p>I routinely use tens of gigabytes of data in just this fashion
e.g. I have tables on disk that I read via queries, create data and append back.</p>

<p>It's worth reading <a href=""http://pandas-docs.github.io/pandas-docs-travis/io.html#hdf5-pytables"" rel=""noreferrer"">the docs</a> and <a href=""https://groups.google.com/forum/m/?fromgroups#!topic/pydata/cmw1F3OFJSc"" rel=""noreferrer"">late in this thread</a> for several suggestions for how to store your data.</p>

<p>Details which will affect how you store your data, like:<br>
<em>Give as much detail as you can; and I can help you develop a structure.</em></p>

<ol>
<li>Size of data, # of rows, columns, types of columns; are you appending
rows, or just columns? </li>
<li>What will typical operations look like. E.g. do a query on columns to select a bunch of rows and specific columns, then do an operation (in-memory), create new columns, save these.<br>
(Giving a toy example could enable us to offer more specific recommendations.)</li>
<li>After that processing, then what do you do? Is step 2 ad hoc, or repeatable?</li>
<li>Input flat files: how many, rough total size in Gb. How are these organized e.g. by records? Does each one contains different fields, or do they have some records per file with all of the fields in each file?</li>
<li>Do you ever select subsets of rows (records) based on criteria (e.g. select the rows with field A > 5)? and then do something, or do you just select fields A, B, C with all of the records (and then do something)?</li>
<li>Do you 'work on' all of your columns (in groups), or are there a good proportion that you may only use for reports (e.g. you want to keep the data around, but don't need to pull in that column explicity until final results time)?</li>
</ol>

<h2>Solution</h2>

<p><em>Ensure you have <a href=""http://pandas.pydata.org/getpandas.html"" rel=""noreferrer"">pandas at least <code>0.10.1</code></a> installed.</em></p>

<p>Read <a href=""http://pandas-docs.github.io/pandas-docs-travis/io.html#iterating-through-files-chunk-by-chunk"" rel=""noreferrer"">iterating files chunk-by-chunk</a> and <a href=""http://pandas-docs.github.io/pandas-docs-travis/io.html#multiple-table-queries"" rel=""noreferrer"">multiple table queries</a>.</p>

<p>Since pytables is optimized to operate on row-wise (which is what you query on), we will create a table for each group of fields. This way it's easy to select a small group of fields (which will work with a big table, but it's more efficient to do it this way... I think I may be able to fix this limitation in the future... this is more intuitive anyhow):<br>
(The following is pseudocode.)</p>

<pre><code>import numpy as np
import pandas as pd

# create a store
store = pd.HDFStore('mystore.h5')

# this is the key to your storage:
#    this maps your fields to a specific group, and defines 
#    what you want to have as data_columns.
#    you might want to create a nice class wrapping this
#    (as you will want to have this map and its inversion)  
group_map = dict(
    A = dict(fields = ['field_1','field_2',.....], dc = ['field_1',....,'field_5']),
    B = dict(fields = ['field_10',......        ], dc = ['field_10']),
    .....
    REPORTING_ONLY = dict(fields = ['field_1000','field_1001',...], dc = []),

)

group_map_inverted = dict()
for g, v in group_map.items():
    group_map_inverted.update(dict([ (f,g) for f in v['fields'] ]))
</code></pre>

<p>Reading in the files and creating the storage (essentially doing what <code>append_to_multiple</code> does):</p>

<pre><code>for f in files:
   # read in the file, additional options may be necessary here
   # the chunksize is not strictly necessary, you may be able to slurp each 
   # file into memory in which case just eliminate this part of the loop 
   # (you can also change chunksize if necessary)
   for chunk in pd.read_table(f, chunksize=50000):
       # we are going to append to each table by group
       # we are not going to create indexes at this time
       # but we *ARE* going to create (some) data_columns

       # figure out the field groupings
       for g, v in group_map.items():
             # create the frame for this group
             frame = chunk.reindex(columns = v['fields'], copy = False)    

             # append it
             store.append(g, frame, index=False, data_columns = v['dc'])
</code></pre>

<p>Now you have all of the tables in the file (actually you could store them in separate files if you wish, you would prob have to add the filename to the group_map, but probably this isn't necessary).</p>

<p>This is how you get columns and create new ones:</p>

<pre><code>frame = store.select(group_that_I_want)
# you can optionally specify:
# columns = a list of the columns IN THAT GROUP (if you wanted to
#     select only say 3 out of the 20 columns in this sub-table)
# and a where clause if you want a subset of the rows

# do calculations on this frame
new_frame = cool_function_on_frame(frame)

# to 'add columns', create a new group (you probably want to
# limit the columns in this new_group to be only NEW ones
# (e.g. so you don't overlap from the other tables)
# add this info to the group_map
store.append(new_group, new_frame.reindex(columns = new_columns_created, copy = False), data_columns = new_columns_created)
</code></pre>

<p>When you are ready for post_processing:</p>

<pre><code># This may be a bit tricky; and depends what you are actually doing.
# I may need to modify this function to be a bit more general:
report_data = store.select_as_multiple([groups_1,groups_2,.....], where =['field_1&gt;0', 'field_1000=foo'], selector = group_1)
</code></pre>

<p>About data_columns, you don't actually need to define <strong>ANY</strong> data_columns; they allow you to sub-select rows based on the column. E.g. something like:</p>

<pre><code>store.select(group, where = ['field_1000=foo', 'field_1001&gt;0'])
</code></pre>

<p>They may be most interesting to you in the final report generation stage (essentially a data column is segregated from other columns, which might impact efficiency somewhat if you define a lot).</p>

<p>You also might want to:</p>

<ul>
<li>create a function which takes a list of fields, looks up the groups in the groups_map, then selects these and concatenates the results so you get the resulting frame (this is essentially what select_as_multiple does). <em>This way the structure would be pretty transparent to you.</em></li>
<li>indexes on certain data columns (makes row-subsetting much faster).</li>
<li>enable compression.</li>
</ul>

<p>Let me know when you have questions!</p>
"
Checking whether a variable is an integer or not,https://stackoverflow.com/questions/3501382/checking-whether-a-variable-is-an-integer-or-not,1183,python;integer,"<p>If you need to do this, do</p>
<pre><code>isinstance(&lt;var&gt;, int)
</code></pre>
<p>unless you are in Python 2.x in which case you want</p>
<pre><code>isinstance(&lt;var&gt;, (int, long))
</code></pre>
<p>Do not use <code>type</code>. It is almost never the right answer in Python, since it blocks all the flexibility of polymorphism. For instance, if you subclass <code>int</code>, your new class should register as an <code>int</code>, which <code>type</code> will not do:</p>
<pre><code>class Spam(int): pass
x = Spam(0)
type(x) == int # False
isinstance(x, int) # True
</code></pre>
<p>This adheres to Python's strong polymorphism: you should allow any object that behaves like an <code>int</code>, instead of mandating that it be one.</p>
<h1>BUT</h1>
<p>The classical Python mentality, though, is that it's <em>easier to ask forgiveness than permission</em>. In other words, don't check whether <code>x</code> is an integer; assume that it is and catch the exception results if it isn't:</p>
<pre><code>try:
    x += 1
except TypeError:
    ...
</code></pre>
<p>This mentality is slowly being overtaken by the use of <a href=""http://docs.python.org/library/abc.html"" rel=""noreferrer"">abstract base classes</a>, which let you register exactly what properties your object should have (adding? multiplying? doubling?) by making it inherit from a specially-constructed class. That would be the best solution, since it will permit <em>exactly</em> those objects with the necessary and sufficient attributes, but you will have to read the docs on how to use it.</p>
"
How to download a file over HTTP?,https://stackoverflow.com/questions/22676/how-to-download-a-file-over-http,1178,python;http;urllib,"<p>Use <a href=""https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen"" rel=""noreferrer""><code>urllib.request.urlopen()</code></a>:</p>
<pre><code>import urllib.request
with urllib.request.urlopen('http://www.example.com/') as f:
    html = f.read().decode('utf-8')
</code></pre>
<p>This is the most basic way to use the library, minus any error handling. You can also do more complex stuff such as changing headers.</p>
<p>On Python 2, the method is in <a href=""http://docs.python.org/2/library/urllib2.html"" rel=""noreferrer""><code>urllib2</code></a>:</p>
<pre><code>import urllib2
response = urllib2.urlopen('http://www.example.com/')
html = response.read()
</code></pre>
"
Parsing boolean values with argparse,https://stackoverflow.com/questions/15008758/parsing-boolean-values-with-argparse,1168,python;boolean;argparse;command-line-arguments,"<p>Simplest &amp; most correct way is:</p>
<pre class=""lang-py prettyprint-override""><code>from distutils.util import strtobool

parser.add_argument('--feature', dest='feature', 
                    type=lambda x: bool(strtobool(x)))
</code></pre>
<p>Do note that True values are y, yes, t, true, on and 1;
false values are n, no, f, false, off and 0. Raises ValueError if val is anything else.</p>
"
How can I parse XML and get instances of a particular node attribute?,https://stackoverflow.com/questions/1912434/how-can-i-parse-xml-and-get-instances-of-a-particular-node-attribute,1167,python;xml,"<p>I suggest <a href=""http://docs.python.org/library/xml.etree.elementtree.html"" rel=""noreferrer""><code>ElementTree</code></a>.  There are other compatible implementations of the same API, such as <a href=""https://lxml.de/parsing.html"" rel=""noreferrer""><code>lxml</code></a>, and <code>cElementTree</code> in the Python standard library itself; but, in this context, what they chiefly add is even more speed -- the ease of programming part depends on the API, which <code>ElementTree</code> defines.</p>
<p>First build an Element instance <code>root</code> from the XML, e.g. with the <a href=""http://docs.python.org/library/xml.etree.elementtree.html#xml.etree.ElementTree.XML"" rel=""noreferrer"">XML</a> function, or by parsing a file with something like:</p>
<pre class=""lang-py prettyprint-override""><code>import xml.etree.ElementTree as ET
root = ET.parse('thefile.xml').getroot()
</code></pre>
<p>Or any of the many other ways shown at <a href=""http://docs.python.org/library/xml.etree.elementtree.html"" rel=""noreferrer""><code>ElementTree</code></a>. Then do something like:</p>
<pre class=""lang-py prettyprint-override""><code>for type_tag in root.findall('bar/type'):
    value = type_tag.get('foobar')
    print(value)
</code></pre>
<p>Output:</p>
<pre><code>1
2
</code></pre>
"
Why dict.get(key) instead of dict[key]?,https://stackoverflow.com/questions/11041405/why-dict-getkey-instead-of-dictkey,1165,python;dictionary;lookup,"<p>It allows you to provide a default value if the key is missing:</p>

<pre><code>dictionary.get(""bogus"", default_value)
</code></pre>

<p>returns <code>default_value</code> (whatever you choose it to be), whereas</p>

<pre><code>dictionary[""bogus""]
</code></pre>

<p>would raise a <code>KeyError</code>.  </p>

<p>If omitted, <code>default_value</code> is <code>None</code>, such that</p>

<pre><code>dictionary.get(""bogus"")  # &lt;-- No default specified -- defaults to None
</code></pre>

<p>returns <code>None</code> just like </p>

<pre><code>dictionary.get(""bogus"", None)
</code></pre>

<p>would. </p>
"
List comprehension vs. lambda + filter,https://stackoverflow.com/questions/3013449/list-comprehension-vs-lambda-filter,1164,python;list;functional-programming;filter;lambda,"<p>It is strange how much beauty varies for different people. I find the list comprehension much clearer than <code>filter</code>+<code>lambda</code>, but use whichever you find easier.</p>

<p>There are two things that may slow down your use of <code>filter</code>.</p>

<p>The first is the function call overhead: as soon as you use a Python function (whether created by <code>def</code> or <code>lambda</code>) it is likely that filter will be slower than the list comprehension. It almost certainly is not enough to matter, and you shouldn't think much about performance until you've timed your code and found it to be a bottleneck, but the difference will be there.</p>

<p>The other overhead that might apply is that the lambda is being forced to access a scoped variable (<code>value</code>). That is slower than accessing a local variable and in Python 2.x the list comprehension only accesses local variables. If you are using Python 3.x the list comprehension runs in a separate function so it will also be accessing <code>value</code> through a closure and this difference won't apply.</p>

<p>The other option to consider is to use a generator instead of a list comprehension:</p>

<pre><code>def filterbyvalue(seq, value):
   for el in seq:
       if el.attribute==value: yield el
</code></pre>

<p>Then in your main code (which is where readability really matters) you've replaced both list comprehension and filter with a hopefully meaningful function name.</p>
"
What&#39;s the difference between lists and tuples?,https://stackoverflow.com/questions/626759/whats-the-difference-between-lists-and-tuples,1161,python;list;tuples,"<p>Apart from tuples being immutable there is also a semantic distinction that should guide their usage. Tuples are heterogeneous data structures (i.e., their entries have different meanings), while lists are homogeneous sequences. <strong>Tuples have structure, lists have order.</strong></p>
<p>Using this distinction makes code more explicit and understandable.</p>
<p>One example would be pairs of page and line number to reference locations in a book, e.g.:</p>
<pre><code>my_location = (42, 11)  # page number, line number
</code></pre>
<p>You can then use this as a key in a dictionary to store notes on locations. A list on the other hand could be used to store multiple locations. Naturally one might want to add or remove locations from the list, so it makes sense that lists are mutable. On the other hand it doesn't make sense to add or remove items from an existing location - hence tuples are immutable.</p>
<p>There might be situations where you want to change items within an existing location tuple, for example when iterating through the lines of a page. But tuple immutability forces you to create a new location tuple for each new value. This seems inconvenient on the face of it, but using immutable data like this is a cornerstone of value types and functional programming techniques, which can have substantial advantages.</p>
<p>There are some interesting articles on this issue, e.g. <a href=""http://jtauber.com/blog/2006/04/15/python_tuples_are_not_just_constant_lists/"" rel=""noreferrer"">&quot;Python Tuples are Not Just Constant Lists&quot;</a> or <a href=""https://web.archive.org/web/20200809232837/https://news.e-scribe.com/397"" rel=""noreferrer"">&quot;Understanding tuples vs. lists in Python&quot;</a>. The official Python documentation <a href=""http://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences"" rel=""noreferrer"">also mentions this</a></p>
<blockquote>
<p>&quot;Tuples are immutable, and usually contain an heterogeneous sequence ...&quot;.</p>
</blockquote>
<p>In a statically typed language like <em>Haskell</em> the values in a tuple generally have different types and the length of the tuple must be fixed. In a list the values all have the same type and the length is not fixed. So the difference is very obvious.</p>
<p>Finally there is the <a href=""http://docs.python.org/dev/library/collections.html#collections.namedtuple"" rel=""noreferrer"">namedtuple</a> in Python, which makes sense because a tuple is already supposed to have structure. This underlines the idea that tuples are a light-weight alternative to classes and instances.</p>
"
Writing a pandas DataFrame to CSV file,https://stackoverflow.com/questions/16923281/writing-a-pandas-dataframe-to-csv-file,1160,python;pandas;dataframe;csv;file-io,"<p>To delimit by a tab you can use the <code>sep</code> argument of <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html"" rel=""noreferrer""><code>to_csv</code></a>:</p>
<pre><code>df.to_csv(file_name, sep='\t')
</code></pre>
<p>To use a specific encoding (e.g. 'utf-8') use the <code>encoding</code> argument:</p>
<pre><code>df.to_csv(file_name, sep='\t', encoding='utf-8')
</code></pre>
<p>In many cases you will want to remove the index and add a header:</p>
<pre><code>df.to_csv(file_name, sep='\t', encoding='utf-8', index=False, header=True)
</code></pre>
"
Importing modules from parent folder,https://stackoverflow.com/questions/714063/importing-modules-from-parent-folder,1155,python;module;path;directory;python-import,"<p>It seems that the problem is not related to the module being in a parent directory or anything like that.</p>

<p>You need to add the directory that contains <code>ptdraft</code> to PYTHONPATH</p>

<p>You said that <code>import nib</code> worked with you, that probably means that you added <code>ptdraft</code> itself (not its parent) to PYTHONPATH.</p>
"
How can I parse a YAML file in Python,https://stackoverflow.com/questions/1773805/how-can-i-parse-a-yaml-file-in-python,1154,python;yaml,"<p>The easiest and purest method without relying on C headers is PyYaml (<a href=""http://pyyaml.org/wiki/PyYAMLDocumentation"" rel=""noreferrer"">documentation</a>), which can be installed via <strong><code>pip install pyyaml</code></strong>:</p>
<pre><code>import yaml

with open(&quot;example.yaml&quot;) as stream:
    try:
        print(yaml.safe_load(stream))
    except yaml.YAMLError as exc:
        print(exc)
</code></pre>
<p>And that's it. A plain <code>yaml.load()</code> function also exists, but <code>yaml.safe_load()</code> should always be preferred to avoid introducing the possibility for arbitrary code execution. So unless you explicitly need the arbitrary object serialization/deserialization use <code>safe_load</code>.</p>
<p>Note the PyYaml project supports versions up through the <a href=""https://yaml.org/spec/1.1/spec.html"" rel=""noreferrer"">YAML 1.1 specification</a>. If <a href=""https://yaml.org/spec/1.2/spec.html"" rel=""noreferrer"">YAML 1.2 specification</a> support is needed, see <a href=""https://yaml.readthedocs.io/"" rel=""noreferrer"">ruamel.yaml</a> as noted in <a href=""https://stackoverflow.com/a/38922434/313192"">this answer</a>.</p>
<p>Also, you could also use a drop in replacement for pyyaml, that keeps your yaml file ordered <em>the same way you had it</em>, called <a href=""https://github.com/wimglenn/oyaml"" rel=""noreferrer"">oyaml</a>. View <a href=""https://snyk.io/advisor/python/oyaml"" rel=""noreferrer"">synk of oyaml here</a></p>
"
How to retrieve a module&#39;s path?,https://stackoverflow.com/questions/247770/how-to-retrieve-a-modules-path,1153,python;module;inotify,"<pre><code>import a_module
print(a_module.__file__)
</code></pre>

<p>Will actually give you the path to the .pyc file that was loaded, at least on Mac OS X. So I guess you can do:</p>

<pre><code>import os
path = os.path.abspath(a_module.__file__)
</code></pre>

<p>You can also try:</p>

<pre><code>path = os.path.dirname(a_module.__file__)
</code></pre>

<p>To get the module's directory.</p>
"
How can I make a Python script standalone executable to run without any dependency?,https://stackoverflow.com/questions/5458048/how-can-i-make-a-python-script-standalone-executable-to-run-without-any-dependen,1146,python;executable,"<p>You can use <a href=""http://www.py2exe.org/"" rel=""noreferrer"">py2exe</a> as already answered and use <a href=""http://cython.org/"" rel=""noreferrer"">Cython</a> to convert your key <code>.py</code> files in <code>.pyc</code>, C compiled files, like <code>.dll</code> in Windows and <code>.so</code> on Linux.</p>
<p>It is much harder to revert than common <code>.pyo</code> and <code>.pyc</code> files (and also gain in performance!).</p>
"
UnicodeDecodeError: &#39;charmap&#39; codec can&#39;t decode byte X in position Y: character maps to &lt;undefined&gt;,https://stackoverflow.com/questions/9233027/unicodedecodeerror-charmap-codec-cant-decode-byte-x-in-position-y-character,1144,python;python-3.x;unicode;file-io;decode,"<p>The file in question is not using the CP1252 encoding. It's using another encoding. Which one you have to figure out yourself. Common ones are Latin-1 and UTF-8. Since 0x90 doesn't actually mean anything in Latin-1, UTF-8 (where 0x90 is a continuation byte) is more likely.</p>
<p>You specify the encoding when you open the file:</p>
<pre><code>file = open(filename, encoding=&quot;utf8&quot;)
</code></pre>
"
How do I unload (reload) a Python module?,https://stackoverflow.com/questions/437589/how-do-i-unload-reload-a-python-module,1142,python;module;reload;python-import,"<p>You can reload a module when it has already been imported by using <a href=""https://docs.python.org/3/library/importlib.html#importlib.reload"" rel=""noreferrer""><code>importlib.reload()</code></a>:</p>
<pre><code>from importlib import reload  # Python 3.4+
import foo

while True:
    # Do some things.
    if is_changed(foo):
        foo = reload(foo)
</code></pre>
<p>In Python 2, <a href=""https://docs.python.org/2.7/library/functions.html#reload"" rel=""noreferrer""><code>reload</code></a> was a builtin. In Python 3, it was <a href=""https://docs.python.org/3/whatsnew/3.0.html#builtins"" rel=""noreferrer"">moved</a> to the <a href=""https://docs.python.org/3/library/imp.html"" rel=""noreferrer""><code>imp</code></a> module. In 3.4, <code>imp</code> was <a href=""https://docs.python.org/3/whatsnew/3.4.html#importlib"" rel=""noreferrer"">deprecated</a> in favor of <a href=""https://docs.python.org/3/library/importlib.html"" rel=""noreferrer""><code>importlib</code></a>. When targeting 3 or later, either reference the appropriate module when calling <code>reload</code> or import it.</p>
<p>I think that this is what you want. Web servers like Django's development server use this so that you can see the effects of your code changes without restarting the server process itself.</p>
<p>To quote from the docs:</p>
<blockquote>
<ul>
<li>Python module’s code is recompiled and the module-level code re-executed, defining a new set of objects which are bound to names in the module’s dictionary by reusing the <a href=""https://docs.python.org/3/glossary.html#term-loader"" rel=""noreferrer"">loader</a> which originally loaded the module. The <code>init</code> function of extension modules is not called a second time.</li>
<li>As with all other objects in Python the old objects are only reclaimed after their reference counts drop to zero.</li>
<li>The names in the module namespace are updated to point to any new or changed objects.</li>
<li>Other references to the old objects (such as names external to the module) are not rebound to refer to the new objects and must be updated in each namespace where they occur if that is desired.</li>
</ul>
</blockquote>
<p>As you noted in your question, you'll have to reconstruct <code>Foo</code> objects if the <code>Foo</code> class resides in the <code>foo</code> module.</p>
"
How can I represent an &#39;Enum&#39; in Python?,https://stackoverflow.com/questions/36932/how-can-i-represent-an-enum-in-python,1140,python;python-3.x;enums,"<p><a href=""https://docs.python.org/3/library/enum.html"" rel=""noreferrer"">Enums</a> have been added to Python 3.4 as described in <a href=""http://www.python.org/dev/peps/pep-0435/"" rel=""noreferrer"">PEP 435</a>.  It has also been <a href=""https://pypi.python.org/pypi/enum34"" rel=""noreferrer"">backported to 3.3, 3.2, 3.1, 2.7, 2.6, 2.5, and 2.4</a> on pypi.</p>
<p>For more advanced Enum techniques try the <a href=""https://pypi.python.org/pypi/aenum"" rel=""noreferrer"">aenum library</a> (2.7, 3.3+, same author as <code>enum34</code>. Code is not perfectly compatible between py2 and py3, e.g. you'll need <a href=""https://stackoverflow.com/a/25982264/57461""><code>__order__</code> in python 2</a>).</p>
<ul>
<li>To use <code>enum34</code>, do <code>$ pip install enum34</code></li>
<li>To use <code>aenum</code>, do <code>$ pip install aenum</code></li>
</ul>
<p>Installing <code>enum</code> (no numbers) will install a completely different and incompatible version.</p>
<hr />
<pre><code>from enum import Enum     # for enum34, or the stdlib version
# from aenum import Enum  # for the aenum version
Animal = Enum('Animal', 'ant bee cat dog')

Animal.ant  # returns &lt;Animal.ant: 1&gt;
Animal['ant']  # returns &lt;Animal.ant: 1&gt; (string lookup)
Animal.ant.name  # returns 'ant' (inverse lookup)
</code></pre>
<p>or equivalently:</p>
<pre><code>class Animal(Enum):
    ant = 1
    bee = 2
    cat = 3
    dog = 4
</code></pre>
<hr />
<p>In earlier versions, one way of accomplishing enums is:</p>
<pre><code>def enum(**enums):
    return type('Enum', (), enums)
</code></pre>
<p>which is used like so:</p>
<pre><code>&gt;&gt;&gt; Numbers = enum(ONE=1, TWO=2, THREE='three')
&gt;&gt;&gt; Numbers.ONE
1
&gt;&gt;&gt; Numbers.TWO
2
&gt;&gt;&gt; Numbers.THREE
'three'
</code></pre>
<p>You can also easily support automatic enumeration with something like this:</p>
<pre><code>def enum(*sequential, **named):
    enums = dict(zip(sequential, range(len(sequential))), **named)
    return type('Enum', (), enums)
</code></pre>
<p>and used like so:</p>
<pre><code>&gt;&gt;&gt; Numbers = enum('ZERO', 'ONE', 'TWO')
&gt;&gt;&gt; Numbers.ZERO
0
&gt;&gt;&gt; Numbers.ONE
1
</code></pre>
<p>Support for converting the values back to names can be added this way:</p>
<pre><code>def enum(*sequential, **named):
    enums = dict(zip(sequential, range(len(sequential))), **named)
    reverse = dict((value, key) for key, value in enums.iteritems())
    enums['reverse_mapping'] = reverse
    return type('Enum', (), enums)
</code></pre>
<p>This overwrites anything with that name, but it is useful for rendering your enums in output. It will throw a <code>KeyError</code> if the reverse mapping doesn't exist. With the first example:</p>
<pre><code>&gt;&gt;&gt; Numbers.reverse_mapping['three']
'THREE'
</code></pre>
<hr />
<p>If you are using MyPy another way to express &quot;enums&quot; is with <a href=""https://mypy.readthedocs.io/en/stable/literal_types.html#parameterizing-literals"" rel=""noreferrer""><code>typing.Literal</code></a>.</p>
<p>For example:</p>
<pre class=""lang-py prettyprint-override""><code>from typing import Literal #python &gt;=3.8
from typing_extensions import Literal #python 2.7, 3.4-3.7


Animal = Literal['ant', 'bee', 'cat', 'dog']

def hello_animal(animal: Animal):
    print(f&quot;hello {animal}&quot;)

hello_animal('rock') # error
hello_animal('bee') # passes

</code></pre>
"
How do I remove/delete/replace a folder that is not empty?,https://stackoverflow.com/questions/303200/how-do-i-remove-delete-replace-a-folder-that-is-not-empty,1139,python;file,"<pre><code>import shutil

shutil.rmtree('/folder_name')
</code></pre>

<p><a href=""http://docs.python.org/library/shutil.html#shutil.rmtree"" rel=""noreferrer"">Standard Library Reference: shutil.rmtree</a>.</p>

<p>By design, <code>rmtree</code> fails on folder trees containing read-only files. If you want the folder to be deleted regardless of whether it contains read-only files, then use</p>

<pre><code>shutil.rmtree('/folder_name', ignore_errors=True)
</code></pre>
"
How do I check the versions of Python modules?,https://stackoverflow.com/questions/20180543/how-do-i-check-the-versions-of-python-modules,1138,python,"<p><a href=""https://stackoverflow.com/a/3220572/1265154"">Use <code>pip</code> instead of <code>easy_install</code>.</a></p>
<p>With pip, list all installed packages and their versions via:</p>
<pre class=""lang-none prettyprint-override""><code>pip freeze
</code></pre>
<p>On most Linux systems, you can pipe this to <code>grep</code> (or <code>findstr</code> on Windows) to find the row for the particular package you're interested in.</p>
<hr />
<h3>Linux:</h3>
<pre class=""lang-none prettyprint-override""><code>pip freeze | grep lxml
</code></pre>
<blockquote>
<p>lxml==2.3</p>
</blockquote>
<h3>Windows:</h3>
<pre class=""lang-none prettyprint-override""><code>pip freeze | findstr lxml
</code></pre>
<blockquote>
<p>lxml==2.3</p>
</blockquote>
<hr />
<p>For an individual module, you can try the <a href=""http://www.python.org/dev/peps/pep-0396/"" rel=""nofollow noreferrer""><code>__version__</code> attribute</a>. However, there are modules without it:</p>
<pre class=""lang-bash prettyprint-override""><code>python -c &quot;import requests; print(requests.__version__)&quot;
2.14.2

python -c &quot;import lxml; print(lxml.__version__)&quot;
</code></pre>
<blockquote>
<p>Traceback (most recent call last): <br />
File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt; <br />
AttributeError: 'module' object has no attribute '__version__'</p>
</blockquote>
<p>Lastly, as the commands in your question are prefixed with <code>sudo</code>, it appears you're installing to the global python environment. I strongly advise to take look into Python <a href=""https://pypi.python.org/pypi/virtualenv"" rel=""nofollow noreferrer"">virtual environment</a> managers, for example <a href=""http://virtualenvwrapper.readthedocs.org/en/latest/"" rel=""nofollow noreferrer"">virtualenvwrapper</a>.</p>
"
What are the most common Python docstring formats?,https://stackoverflow.com/questions/3898572/what-are-the-most-common-python-docstring-formats,1135,python;coding-style;documentation;docstring,"<h1>Formats</h1>

<p>Python docstrings can be written following several formats as the other posts showed. However the default Sphinx docstring format was not mentioned and is based on <strong>reStructuredText (reST)</strong>. You can get some information about the main formats in <a href=""http://daouzli.com/blog/docstring.html"" rel=""noreferrer"">this blog post</a>.</p>

<p>Note that the reST is recommended by the <a href=""https://www.python.org/dev/peps/pep-0287"" rel=""noreferrer"">PEP 287</a></p>

<p>There follows the main used formats for docstrings.</p>

<h2>- Epytext</h2>

<p>Historically a <strong>javadoc</strong> like style was prevalent, so it was taken as a base for <a href=""http://epydoc.sourceforge.net"" rel=""noreferrer"">Epydoc</a> (with the called <code>Epytext</code> format) to generate documentation.</p>

<p>Example:</p>

<pre><code>""""""
This is a javadoc style.

@param param1: this is a first param
@param param2: this is a second param
@return: this is a description of what is returned
@raise keyError: raises an exception
""""""
</code></pre>

<h2>- reST</h2>

<p>Nowadays, the probably more prevalent format is the <strong>reStructuredText</strong> (reST) format that is used by <a href=""http://sphinx-doc.org"" rel=""noreferrer"">Sphinx</a> to generate documentation.
Note: it is used by default in JetBrains PyCharm (type triple quotes after defining a method and hit enter). It is also used by default as output format in Pyment.</p>

<p>Example:</p>

<pre><code>""""""
This is a reST style.

:param param1: this is a first param
:param param2: this is a second param
:returns: this is a description of what is returned
:raises keyError: raises an exception
""""""
</code></pre>

<h2>- Google</h2>

<p>Google has their own <a href=""https://github.com/google/styleguide/blob/gh-pages/pyguide.md#38-comments-and-docstrings"" rel=""noreferrer"">format</a> that is often used. It also can be interpreted by Sphinx (ie. using <a href=""https://sphinxcontrib-napoleon.readthedocs.io/en/latest/"" rel=""noreferrer"">Napoleon plugin</a>). </p>

<p>Example:</p>

<pre><code>""""""
This is an example of Google style.

Args:
    param1: This is the first param.
    param2: This is a second param.

Returns:
    This is a description of what is returned.

Raises:
    KeyError: Raises an exception.
""""""
</code></pre>

<p>Even <a href=""https://www.sphinx-doc.org/en/master/usage/extensions/example_google.html#example-google"" rel=""noreferrer"">more examples</a></p>

<h2>- Numpydoc</h2>

<p>Note that Numpy recommend to follow their own <a href=""https://numpydoc.readthedocs.io/en/latest/"" rel=""noreferrer"">numpydoc</a> based on Google format and usable by Sphinx.</p>

<pre><code>""""""
My numpydoc description of a kind
of very exhautive numpydoc format docstring.

Parameters
----------
first : array_like
    the 1st param name `first`
second :
    the 2nd param
third : {'value', 'other'}, optional
    the 3rd param, by default 'value'

Returns
-------
string
    a value in a string

Raises
------
KeyError
    when a key error
OtherError
    when an other error
""""""
</code></pre>

<h1>Converting/Generating</h1>

<p>It is possible to use a tool like <a href=""https://github.com/dadadel/pyment"" rel=""noreferrer"">Pyment</a> to automatically generate docstrings to a Python project not yet documented, or to convert existing docstrings (can be mixing several formats) from a format to an other one.</p>

<p>Note: The examples are taken from the <a href=""https://github.com/dadadel/pyment/blob/master/README.rst"" rel=""noreferrer"">Pyment documentation</a></p>
"
Should I use &#39;has_key()&#39; or &#39;in&#39; on Python dicts?,https://stackoverflow.com/questions/1323410/should-i-use-has-key-or-in-on-python-dicts,1133,python;dictionary,"<p><code>in</code> is definitely more pythonic.</p>

<p>In fact <a href=""http://docs.python.org/3.1/whatsnew/3.0.html#builtins"" rel=""noreferrer""><code>has_key()</code> was removed in Python 3.x</a>.</p>
"
What is the difference between pip and Conda?,https://stackoverflow.com/questions/20994716/what-is-the-difference-between-pip-and-conda,1133,python;pip;ipython;package-managers;conda,"<p>Quoting from the <a href=""http://web.archive.org/web/20170415041123/www.continuum.io/blog/developer-blog/python-packages-and-environments-conda"" rel=""noreferrer"">Conda blog</a>:</p>
<blockquote>
<p>Having been involved in the python world for so long, we are all aware of pip, easy_install, and virtualenv, but these tools did not meet all of our specific requirements. The main problem is that they are focused around Python, neglecting non-Python library dependencies, such as HDF5, MKL, LLVM, etc., which do not have a setup.py in their source code and also do not install files into Python’s site-packages directory.</p>
</blockquote>
<p>So Conda is a packaging tool and installer that aims to do more than what <code>pip</code> does; handle library dependencies <em>outside</em> of the Python packages as well as the Python packages themselves. Conda also creates a virtual environment, like <code>virtualenv</code> does.</p>
<p>As such, Conda should be compared to <a href=""http://www.buildout.org/en/latest/"" rel=""noreferrer"">Buildout</a> perhaps, another tool that lets you handle both Python and non-Python installation tasks.</p>
<p>Because Conda introduces a new packaging format, you cannot use <code>pip</code> and Conda interchangeably;  <code>pip</code> cannot install the Conda package format. You can use the two tools side by side (by installing <code>pip</code> with <code>conda install pip</code>) but they do not interoperate either.</p>
<p>Since writing this answer, Anaconda has published a <a href=""https://www.anaconda.com/understanding-conda-and-pip/"" rel=""noreferrer"">new page on <em>Understanding Conda and Pip</em></a>, which echoes this as well:</p>
<blockquote>
<p>This highlights a key difference between conda and pip. Pip installs Python packages whereas conda installs packages which may contain software written in any language. For example, before using pip, a Python interpreter must be installed via a system package manager or by downloading and running an installer. Conda on the other hand can install Python packages as well as the Python interpreter directly.</p>
</blockquote>
<p>and further on</p>
<blockquote>
<p>Occasionally a package is needed which is not available as a conda package but is available on PyPI and can be installed with pip. In these cases, it makes sense to try to use both conda and pip.</p>
</blockquote>
"
What is the difference between old style and new style classes in Python?,https://stackoverflow.com/questions/54867/what-is-the-difference-between-old-style-and-new-style-classes-in-python,1132,python;class;oop;types;new-style-class,"<p>From <em><a href=""http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes"" rel=""noreferrer"">New-style and classic classes</a></em>:</p>

<blockquote>
  <p><strong>Up to Python 2.1, old-style classes were the only flavour available to the user.</strong></p>
  
  <p>The concept of (old-style) class is unrelated to the concept of type:
  if <code>x</code> is an instance of an old-style class, then <code>x.__class__</code>
  designates the class of <code>x</code>, but <code>type(x)</code> is always <code>&lt;type
  'instance'&gt;</code>. </p>
  
  <p>This reflects the fact that all old-style instances, independently of
  their class, are implemented with a single built-in type, called
  instance.</p>
  
  <p><strong>New-style classes were introduced in Python 2.2 to unify the concepts of class and type</strong>. 
  A new-style class is simply a user-defined type, no more, no less.</p>
  
  <p>If x is an instance of a new-style class, then <code>type(x)</code> is typically
  the same as <code>x.__class__</code> (although this is not guaranteed – a
  new-style class instance is permitted to override the value returned
  for <code>x.__class__</code>).</p>
  
  <p><strong>The major motivation for introducing new-style classes is to provide a unified object model with a full meta-model</strong>. </p>
  
  <p>It also has a number of immediate benefits, like the ability to
  subclass most built-in types, or the introduction of ""descriptors"",
  which enable computed properties.</p>
  
  <p><strong>For compatibility reasons, classes are still old-style by default</strong>. </p>
  
  <p>New-style classes are created by specifying another new-style class
  (i.e. a type) as a parent class, or the ""top-level type"" object if no
  other parent is needed. </p>
  
  <p>The behaviour of new-style classes differs from that of old-style
  classes in a number of important details in addition to what type
  returns. </p>
  
  <p>Some of these changes are fundamental to the new object model, like
  the way special methods are invoked. Others are ""fixes"" that could not
  be implemented before for compatibility concerns, like the method
  resolution order in case of multiple inheritance.</p>
  
  <p><strong>Python 3 only has new-style classes</strong>. </p>
  
  <p>No matter if you subclass from <code>object</code> or not, classes are new-style
  in Python 3.</p>
</blockquote>
"
What is the naming convention in Python for variables and functions?,https://stackoverflow.com/questions/159720/what-is-the-naming-convention-in-python-for-variables-and-functions,1127,python;naming-conventions;camelcasing;pascalcasing;snakecasing,"<p>See Python <a href=""https://www.python.org/dev/peps/pep-0008/#function-and-variable-names"" rel=""noreferrer"">PEP 8: Function and Variable Names</a>:</p>
<blockquote>
<p>Function names should be <a href=""https://en.wikipedia.org/wiki/Snake_case"" rel=""noreferrer"">lowercase, with words separated by underscores</a> as necessary to improve readability.</p>
<p>Variable names follow the same convention as function names.</p>
<p><a href=""https://en.wikipedia.org/wiki/MixedCase"" rel=""noreferrer"">mixedCase</a> is allowed only in contexts where that's already the prevailing style (e.g. <a href=""https://docs.python.org/library/threading.html"" rel=""noreferrer"">threading.py</a>), to retain backwards compatibility.</p>
</blockquote>
"
How to POST JSON data with Python Requests?,https://stackoverflow.com/questions/9733638/how-to-post-json-data-with-python-requests,1121,python;json;python-requests;cherrypy,"<p>Starting with Requests version 2.4.2, you can use the <a href=""https://requests.readthedocs.io/en/master/user/quickstart/#more-complicated-post-requests"" rel=""noreferrer""><code>json=</code> parameter</a> (which takes a dictionary) instead of <code>data=</code> (which takes a string) in the call:</p>
<pre><code>&gt;&gt;&gt; import requests
&gt;&gt;&gt; r = requests.post('http://httpbin.org/post', json={&quot;key&quot;: &quot;value&quot;})
&gt;&gt;&gt; r.status_code
200
&gt;&gt;&gt; r.json()
{'args': {},
 'data': '{&quot;key&quot;: &quot;value&quot;}',
 'files': {},
 'form': {},
 'headers': {'Accept': '*/*',
             'Accept-Encoding': 'gzip, deflate',
             'Connection': 'close',
             'Content-Length': '16',
             'Content-Type': 'application/json',
             'Host': 'httpbin.org',
             'User-Agent': 'python-requests/2.4.3 CPython/3.4.0',
             'X-Request-Id': 'xx-xx-xx'},
 'json': {'key': 'value'},
 'origin': 'x.x.x.x',
 'url': 'http://httpbin.org/post'}
</code></pre>
"
How to emulate a do-while loop?,https://stackoverflow.com/questions/743164/how-to-emulate-a-do-while-loop,1121,python;while-loop;do-while,"<p>I am not sure what you are trying to do. You can implement a do-while loop like this:</p>

<pre><code>while True:
  stuff()
  if fail_condition:
    break
</code></pre>

<p>Or:</p>

<pre><code>stuff()
while not fail_condition:
  stuff()
</code></pre>

<p>What are you doing trying to use a do while loop to print the stuff in the list? Why not just use:</p>

<pre><code>for i in l:
  print i
print ""done""
</code></pre>

<p>Update:</p>

<p>So do you have a list of lines? And you want to keep iterating through it? How about: </p>

<pre><code>for s in l: 
  while True: 
    stuff() 
    # use a ""break"" instead of s = i.next()
</code></pre>

<p>Does that seem like something close to what you would want? With your code example, it would be:</p>

<pre><code>for s in some_list:
  while True:
    if state is STATE_CODE:
      if ""//"" in s:
        tokens.add( TOKEN_COMMENT, s.split( ""//"" )[1] )
        state = STATE_COMMENT
      else :
        tokens.add( TOKEN_CODE, s )
    if state is STATE_COMMENT:
      if ""//"" in s:
        tokens.append( TOKEN_COMMENT, s.split( ""//"" )[1] )
        break # get next s
      else:
        state = STATE_CODE
        # re-evaluate same line
        # continues automatically
</code></pre>
"
How to get a function name as a string?,https://stackoverflow.com/questions/251464/how-to-get-a-function-name-as-a-string,1118,python;string;function,"<pre><code>my_function.__name__
</code></pre>

<p>Using <code>__name__</code> is the preferred method as it applies uniformly. Unlike <code>func_name</code>, it works on built-in functions as well:</p>

<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.time.func_name
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in ?
AttributeError: 'builtin_function_or_method' object has no attribute 'func_name'
&gt;&gt;&gt; time.time.__name__ 
'time'
</code></pre>

<p>Also the double underscores indicate to the reader this is a special attribute. As a bonus, classes and modules have a <code>__name__</code> attribute too, so you only have remember one special name.</p>
"
Traverse a list in reverse order in Python,https://stackoverflow.com/questions/529424/traverse-a-list-in-reverse-order-in-python,1113,python;loops;reverse,"<p>Use the built-in <a href=""https://docs.python.org/library/functions.html#reversed"" rel=""noreferrer""><code>reversed()</code></a> function:</p>

<pre><code>&gt;&gt;&gt; a = [""foo"", ""bar"", ""baz""]
&gt;&gt;&gt; for i in reversed(a):
...     print(i)
... 
baz
bar
foo
</code></pre>

<p>To also access the original index, use <a href=""https://docs.python.org/library/functions.html#enumerate"" rel=""noreferrer""><code>enumerate()</code></a> on your list before passing it to <code>reversed()</code>:</p>

<pre><code>&gt;&gt;&gt; for i, e in reversed(list(enumerate(a))):
...     print(i, e)
... 
2 baz
1 bar
0 foo
</code></pre>

<p>Since <code>enumerate()</code> returns a generator and generators can't be reversed, you need to convert it to a <code>list</code> first.</p>
"
What is Python&#39;s equivalent of &amp;&amp; (logical-and) in an if-statement?,https://stackoverflow.com/questions/2485466/what-is-pythons-equivalent-of-logical-and-in-an-if-statement,1113,python;logical-and,"<p>Use <code>and</code> instead of <code>&amp;&amp;</code>.</p>
"
Reverse / invert a dictionary mapping,https://stackoverflow.com/questions/483666/reverse-invert-a-dictionary-mapping,1092,python;dictionary;mapping;reverse,"<p>Python 3+:</p>
<pre><code>inv_map = {v: k for k, v in my_map.items()}
</code></pre>
<p>Python 2:</p>
<pre><code>inv_map = {v: k for k, v in my_map.iteritems()}
</code></pre>
"
How do I remove the first item from a list?,https://stackoverflow.com/questions/4426663/how-do-i-remove-the-first-item-from-a-list,1088,python;list,"<p>You can find a short collection of useful list functions <a href=""https://docs.python.org/3/tutorial/datastructures.html#more-on-lists"" rel=""noreferrer"">here</a>.</p>
<p><a href=""https://www.programiz.com/python-programming/methods/list/pop"" rel=""noreferrer""><code>list.pop(index)</code></a></p>
<pre><code>&gt;&gt;&gt; l = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; l.pop(0)
'a'
&gt;&gt;&gt; l
['b', 'c', 'd']
&gt;&gt;&gt; 
</code></pre>
<p><a href=""https://docs.python.org/3/tutorial/datastructures.html#the-del-statement"" rel=""noreferrer""><code>del list[index]</code></a></p>
<pre><code>&gt;&gt;&gt; l = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; del l[0]
&gt;&gt;&gt; l
['b', 'c', 'd']
&gt;&gt;&gt; 
</code></pre>
<p>These both modify your original list.</p>
<p>Others have suggested using slicing:</p>
<ul>
<li>Copies the list</li>
<li>Can return a subset</li>
</ul>
<p>Also, if you are performing many <code>pop(0)</code>, you should look at <a href=""http://docs.python.org/library/collections.html#collections.deque"" rel=""noreferrer""><code>collections.deque</code></a></p>
<pre><code>from collections import deque
&gt;&gt;&gt; l = deque(['a', 'b', 'c', 'd'])
&gt;&gt;&gt; l.popleft()
'a'
&gt;&gt;&gt; l
deque(['b', 'c', 'd'])
</code></pre>
<ul>
<li>Provides higher performance popping from left end of the list</li>
</ul>
"
"How do I remove duplicates from a list, while preserving order?",https://stackoverflow.com/questions/480214/how-do-i-remove-duplicates-from-a-list-while-preserving-order,1080,python;list;duplicates;list-comprehension;unique,"<p>Here you have some alternatives: <a href=""http://www.peterbe.com/plog/uniqifiers-benchmark"" rel=""noreferrer"">http://www.peterbe.com/plog/uniqifiers-benchmark</a></p>

<p>Fastest one:</p>

<pre><code>def f7(seq):
    seen = set()
    seen_add = seen.add
    return [x for x in seq if not (x in seen or seen_add(x))]
</code></pre>

<p>Why assign <code>seen.add</code> to <code>seen_add</code> instead of just calling <code>seen.add</code>? Python is a dynamic language, and resolving <code>seen.add</code> each iteration is more costly than resolving a local variable. <code>seen.add</code> could have changed between iterations, and the runtime isn't smart enough to rule that out. To play it safe, it has to check the object each time.</p>

<p>If you plan on using this function a lot on the same dataset, perhaps you would be better off with an ordered set: <a href=""http://code.activestate.com/recipes/528878/"" rel=""noreferrer"">http://code.activestate.com/recipes/528878/</a></p>

<p><em>O</em>(1) insertion, deletion and member-check per operation.</p>

<p>(Small additional note: <code>seen.add()</code> always returns <code>None</code>, so the <em><code>or</code></em> above is there only as a way to attempt a set update, and not as an integral part of the logical test.)</p>
"
Behaviour of increment and decrement operators in Python,https://stackoverflow.com/questions/1485841/behaviour-of-increment-and-decrement-operators-in-python,1079,python;operators;increment;decrement,"<p><code>++</code> is not an operator. It is two <code>+</code> operators. The <code>+</code> operator is the <strong>identity</strong> operator, which does nothing. (Clarification: the <code>+</code> and <code>-</code> unary operators only work on numbers, but I presume that you wouldn't expect a hypothetical <code>++</code> operator to work on strings.)</p>

<pre><code>++count
</code></pre>

<p>Parses as</p>

<pre><code>+(+count)
</code></pre>

<p>Which translates to</p>

<pre><code>count
</code></pre>

<p>You have to use the slightly longer <code>+=</code> operator to do what you want to do:</p>

<pre><code>count += 1
</code></pre>

<p>I suspect the <code>++</code> and <code>--</code> operators were left out for consistency and simplicity. I don't know the exact argument Guido van Rossum gave for the decision, but I can imagine a few arguments:</p>

<ul>
<li>Simpler parsing. Technically, parsing <code>++count</code> is ambiguous, as it could be <code>+</code>, <code>+</code>, <code>count</code> (two unary <code>+</code> operators) just as easily as it could be <code>++</code>, <code>count</code> (one unary <code>++</code> operator). It's not a significant syntactic ambiguity, but it does exist.</li>
<li>Simpler language. <code>++</code> is nothing more than a synonym for <code>+= 1</code>. It was a shorthand invented because C compilers were stupid and didn't know how to optimize <code>a += 1</code> into the <code>inc</code> instruction most computers have. In this day of optimizing compilers and bytecode interpreted languages, adding operators to a language to allow programmers to optimize their code is usually frowned upon, especially in a language like Python that is designed to be consistent and readable.</li>
<li>Confusing side-effects. One common newbie error in languages with <code>++</code> operators is mixing up the differences (both in precedence and in return value) between the pre- and post-increment/decrement operators, and Python likes to eliminate language ""gotcha""-s. The <a href=""https://en.cppreference.com/w/c/language/operator_precedence"" rel=""noreferrer"">precedence issues</a> of <a href=""https://stackoverflow.com/a/17819123/1449799"">pre-/post-increment in C</a> are pretty hairy, and incredibly easy to mess up.</li>
</ul>
"
How to get an absolute file path in Python,https://stackoverflow.com/questions/51520/how-to-get-an-absolute-file-path-in-python,1075,python;path;relative-path;absolute-path,"<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath(""mydir/myfile.txt"")
'C:/example/cwd/mydir/myfile.txt'
</code></pre>

<p>Also works if it is already an absolute path:</p>

<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath(""C:/example/cwd/mydir/myfile.txt"")
'C:/example/cwd/mydir/myfile.txt'
</code></pre>
"
"What are the differences between the urllib, urllib2, urllib3 and requests module?",https://stackoverflow.com/questions/2018026/what-are-the-differences-between-the-urllib-urllib2-urllib3-and-requests-modul,1071,python;python-requests;urllib;urllib2;urllib3,"<p>I know it's been said already, but I'd highly recommend the <a href=""https://requests.readthedocs.io/"" rel=""noreferrer""><code>requests</code></a> Python package.</p>
<p>If you've used languages other than python, you're probably thinking <code>urllib</code> and <code>urllib2</code> are easy to use, not much code, and highly capable, that's how I used to think.  But the <code>requests</code> package is so unbelievably useful and short that everyone should be using it.</p>
<p>First, it supports a fully restful API, and is as easy as:</p>
<pre><code>import requests

resp = requests.get('http://www.mywebsite.com/user')
resp = requests.post('http://www.mywebsite.com/user')
resp = requests.put('http://www.mywebsite.com/user/put')
resp = requests.delete('http://www.mywebsite.com/user/delete')
</code></pre>
<p>Regardless of whether GET / POST, you never have to encode parameters again, it simply takes a dictionary as an argument and is good to go:</p>
<pre><code>userdata = {&quot;firstname&quot;: &quot;John&quot;, &quot;lastname&quot;: &quot;Doe&quot;, &quot;password&quot;: &quot;jdoe123&quot;}
resp = requests.post('http://www.mywebsite.com/user', data=userdata)
</code></pre>
<p>Plus it even has a built in JSON decoder (again, I know <code>json.loads()</code> isn't a lot more to write, but this sure is convenient):</p>
<pre><code>resp.json()
</code></pre>
<p>Or if your response data is just text, use:</p>
<pre><code>resp.text
</code></pre>
<p>This is just the tip of the iceberg. This is the list of features from the requests site:</p>
<ul>
<li>International Domains and URLs</li>
<li>Keep-Alive &amp; Connection Pooling</li>
<li>Sessions with Cookie Persistence</li>
<li>Browser-style SSL Verification</li>
<li>Basic/Digest Authentication</li>
<li>Elegant Key/Value Cookies</li>
<li>Automatic Decompression</li>
<li>Unicode Response Bodies</li>
<li>Multipart File Uploads</li>
<li>Connection Timeouts</li>
<li>.netrc support</li>
<li>List item</li>
<li>Python 2.7, 3.6—3.9</li>
<li>Thread-safe.</li>
</ul>
"
Deleting DataFrame row in Pandas based on column value,https://stackoverflow.com/questions/18172851/deleting-dataframe-row-in-pandas-based-on-column-value,1059,python;pandas;dataframe;performance;delete-row,"<p>If I'm understanding correctly, it should be as simple as:</p>

<pre><code>df = df[df.line_race != 0]
</code></pre>
"
Multiprocessing vs Threading Python,https://stackoverflow.com/questions/3044580/multiprocessing-vs-threading-python,1055,python;multithreading;multiprocessing,"<p>The <code>threading</code> module uses threads, the <code>multiprocessing</code> module uses processes. The difference is that threads run in the same memory space, while processes have separate memory. This makes it a bit harder to share objects between processes with multiprocessing. Since threads use the same memory, precautions have to be taken or two threads will write to the same memory at the same time. This is what the global interpreter lock is for.</p>

<p>Spawning processes is a bit slower than spawning threads.</p>
"
Getting today&#39;s date in YYYY-MM-DD in Python?,https://stackoverflow.com/questions/32490629/getting-todays-date-in-yyyy-mm-dd-in-python,1053,python;date;datetime;formatting;python-datetime,"<p>Use <a href=""http://strftime.org/"" rel=""noreferrer""><code>strftime</code></a>:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.today().strftime('%Y-%m-%d')
'2021-01-26'
</code></pre>
<p>To also include a zero-padded <code>Hour:Minute:Second</code> at the end:</p>
<pre><code>&gt;&gt;&gt; datetime.today().strftime('%Y-%m-%d %H:%M:%S')
'2021-01-26 16:50:03'
</code></pre>
<p>To get the UTC date and time:</p>
<pre><code>&gt;&gt;&gt; datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
'2021-01-27 00:50:03'
</code></pre>
"
mkdir -p functionality in Python,https://stackoverflow.com/questions/600268/mkdir-p-functionality-in-python,1052,python;path;directory-structure;mkdir,"<p>For Python ≥ 3.5, use <a href=""https://docs.python.org/library/pathlib.html#pathlib.Path.mkdir"" rel=""noreferrer""><code>pathlib.Path.mkdir</code></a>:</p>
<pre><code>import pathlib
pathlib.Path(&quot;/tmp/path/to/desired/directory&quot;).mkdir(parents=True, exist_ok=True)
</code></pre>
<p>The <code>exist_ok</code> parameter was added in Python 3.5.</p>
<hr />
<p>For Python ≥ 3.2, <a href=""https://docs.python.org/library/os.html#os.makedirs"" rel=""noreferrer""><code>os.makedirs</code></a> has an <a href=""https://docs.python.org/3/library/os.html?highlight=exist_ok#os.makedirs"" rel=""noreferrer"">optional third argument <code>exist_ok</code></a> that, when <code>True</code>, enables the <code>mkdir -p</code> functionality—<em>unless</em> <code>mode</code> is provided and the existing directory has different permissions than the intended ones; in that case, <code>OSError</code> is raised as previously:</p>
<pre><code>import os
os.makedirs(&quot;/tmp/path/to/desired/directory&quot;, exist_ok=True)
</code></pre>
<hr />
<p>For even older versions of Python, you can use <code>os.makedirs</code> and ignore the error:</p>
<pre><code>import errno    
import os

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python ≥ 2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        # possibly handle other errno cases here, otherwise finally:
        else:
            raise
</code></pre>
"
How to use to find files recursively?,https://stackoverflow.com/questions/2186525/how-to-use-to-find-files-recursively,1051,python;path;filesystems;glob;fnmatch,"<p>There are a couple of ways:</p>
<p><strong>pathlib.Path().rglob()</strong></p>
<p>Use <a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob"" rel=""noreferrer""><code>pathlib.Path().rglob()</code></a> from the <a href=""https://docs.python.org/3/library/pathlib.html"" rel=""noreferrer""><code>pathlib</code></a> module, which was introduced in Python 3.5.</p>
<pre><code>from pathlib import Path

for path in Path('src').rglob('*.c'):
    print(path.name)
</code></pre>
<p><strong>glob.glob()</strong></p>
<p>If you don't want to use pathlib, use <a href=""https://docs.python.org/3/library/glob.html#glob.glob"" rel=""noreferrer""><code>glob.glob()</code></a>:</p>
<pre><code>from glob import glob

for filename in glob('src/**/*.c', recursive=True):
    print(filename)   
</code></pre>
<p>For cases where matching files beginning with a dot (<code>.</code>); like files in the current directory or hidden files on Unix based system, use the <a href=""https://docs.python.org/2/library/os.html#os.walk"" rel=""noreferrer""><code>os.walk()</code></a> solution below.</p>
<p><strong>os.walk()</strong></p>
<p>For older Python versions, use <a href=""https://docs.python.org/2/library/os.html#os.walk"" rel=""noreferrer""><code>os.walk()</code></a> to recursively walk a directory and <a href=""https://docs.python.org/2/library/fnmatch.html#fnmatch.filter"" rel=""noreferrer""><code>fnmatch.filter()</code></a> to match against a simple expression:</p>
<pre><code>import fnmatch
import os

matches = []
for root, dirnames, filenames in os.walk('src'):
    for filename in fnmatch.filter(filenames, '*.c'):
        matches.append(os.path.join(root, filename))
</code></pre>
<p>This version should also be faster depending on how many files you have, as the pathlib module has a bit of overhead over <a href=""https://docs.python.org/2/library/os.html#os.walk"" rel=""noreferrer""><code>os.walk()</code></a>.</p>
"
How do I convert a datetime to date?,https://stackoverflow.com/questions/3743222/how-do-i-convert-a-datetime-to-date,1051,python;datetime,"<p>Use the <a href=""https://docs.python.org/3/library/datetime.html#datetime.datetime.date"" rel=""noreferrer""><code>date()</code></a> method:</p>
<pre><code>datetime.datetime.now().date()
</code></pre>
"
What does functools.wraps do?,https://stackoverflow.com/questions/308999/what-does-functools-wraps-do,1046,python;decorator;functools,"<p>When you use a decorator, you're replacing one function with another.  In other words, if you have a decorator</p>
<pre><code>def logged(func):
    def with_logging(*args, **kwargs):
        print(func.__name__ + &quot; was called&quot;)
        return func(*args, **kwargs)
    return with_logging
</code></pre>
<p>then when you say</p>
<pre><code>@logged
def f(x):
   &quot;&quot;&quot;does some math&quot;&quot;&quot;
   return x + x * x
</code></pre>
<p>it's exactly the same as saying</p>
<pre><code>def f(x):
    &quot;&quot;&quot;does some math&quot;&quot;&quot;
    return x + x * x
f = logged(f)
</code></pre>
<p>and your function <code>f</code> is replaced with the function <code>with_logging</code>.  Unfortunately, this means that if you then say</p>
<pre><code>print(f.__name__)
</code></pre>
<p>it will print <code>with_logging</code> because that's the name of your new function.  In fact, if you look at the docstring for <code>f</code>, it will be blank because <code>with_logging</code> has no docstring, and so the docstring you wrote won't be there anymore.  Also, if you look at the pydoc result for that function, it won't be listed as taking one argument <code>x</code>; instead it'll be listed as taking <code>*args</code> and <code>**kwargs</code> because that's what with_logging takes.</p>
<p>If using a decorator always meant losing this information about a function, it would be a serious problem.  That's why we have <code>functools.wraps</code>.  This takes a function used in a decorator and adds the functionality of copying over the function name, docstring, arguments list, etc.  And since <code>wraps</code> is itself a decorator, the following code does the correct thing:</p>
<pre><code>from functools import wraps
def logged(func):
    @wraps(func)
    def with_logging(*args, **kwargs):
        print(func.__name__ + &quot; was called&quot;)
        return func(*args, **kwargs)
    return with_logging

@logged
def f(x):
    &quot;&quot;&quot;does some math&quot;&quot;&quot;
    return x + x * x

print(f.__name__)  # prints 'f'
print(f.__doc__)   # prints 'does some math'
</code></pre>
"
How do I expand the output display to see more columns of a Pandas DataFrame?,https://stackoverflow.com/questions/11707586/how-do-i-expand-the-output-display-to-see-more-columns-of-a-pandas-dataframe,1043,python;pandas;printing;column-width,"<p>(For Pandas versions before 0.23.4, see at bottom.)</p>
<p>Use <code>pandas.set_option(optname, val)</code>, or equivalently <code>pd.options.&lt;opt.hierarchical.name&gt; = val</code>. Like:</p>
<pre><code>import pandas as pd

pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)
</code></pre>
<p>Pandas will try to autodetect the size of your terminal window if you set <code>pd.options.display.width = 0</code>.</p>
<p>Here is the <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.set_option.html"" rel=""noreferrer"">help for <code>set_option</code></a>:</p>
<pre>
set_option(pat,value) - Sets the value of the specified option

Available options:
display.[chop_threshold, colheader_justify, column_space, date_dayfirst,
         date_yearfirst, encoding, expand_frame_repr, float_format, height,
         line_width, max_columns, max_colwidth, max_info_columns, max_info_rows,
         max_rows, max_seq_items, mpl_style, multi_sparse, notebook_repr_html,
         pprint_nest_depth, precision, width]
mode.[sim_interactive, use_inf_as_null]

Parameters
----------
pat - str/regexp which should match a single option.

Note: partial matches are supported for convenience, but unless you use the
full option name (e.g., *x.y.z.option_name*), your code may break in future
versions if new options with similar names are introduced.

value - new value of option.

Returns
-------
None

Raises
------
KeyError if no such option exists

display.chop_threshold: [default: None] [currently: None]
: float or None
        if set to a float value, all float values smaller then the given threshold
        will be displayed as exactly 0 by repr and friends.
display.colheader_justify: [default: right] [currently: right]
: 'left'/'right'
        Controls the justification of column headers. used by DataFrameFormatter.
display.column_space: [default: 12] [currently: 12]No description available.

display.date_dayfirst: [default: False] [currently: False]
: boolean
        When True, prints and parses dates with the day first, eg 20/01/2005
display.date_yearfirst: [default: False] [currently: False]
: boolean
        When True, prints and parses dates with the year first, e.g., 2005/01/20
display.encoding: [default: UTF-8] [currently: UTF-8]
: str/unicode
        Defaults to the detected encoding of the console.
        Specifies the encoding to be used for strings returned by to_string,
        these are generally strings meant to be displayed on the console.
display.expand_frame_repr: [default: True] [currently: True]
: boolean
        Whether to print out the full DataFrame repr for wide DataFrames
        across multiple lines, `max_columns` is still respected, but the output will
        wrap-around across multiple ""pages"" if it's width exceeds `display.width`.
display.float_format: [default: None] [currently: None]
: callable
        The callable should accept a floating point number and return
        a string with the desired format of the number. This is used
        in some places like SeriesFormatter.
        See core.format.EngFormatter for an example.
display.height: [default: 60] [currently: 1000]
: int
        Deprecated.
        (Deprecated, use `display.height` instead.)

display.line_width: [default: 80] [currently: 1000]
: int
        Deprecated.
        (Deprecated, use `display.width` instead.)

display.max_columns: [default: 20] [currently: 500]
: int
        max_rows and max_columns are used in __repr__() methods to decide if
        to_string() or info() is used to render an object to a string.  In case
        python/IPython is running in a terminal this can be set to 0 and Pandas
        will correctly auto-detect the width the terminal and swap to a smaller
        format in case all columns would not fit vertically. The IPython notebook,
        IPython qtconsole, or IDLE do not run in a terminal and hence it is not
        possible to do correct auto-detection.
        'None' value means unlimited.
display.max_colwidth: [default: 50] [currently: 50]
: int
        The maximum width in characters of a column in the repr of
        a Pandas data structure. When the column overflows, a ""...""
        placeholder is embedded in the output.
display.max_info_columns: [default: 100] [currently: 100]
: int
        max_info_columns is used in DataFrame.info method to decide if
        per column information will be printed.
display.max_info_rows: [default: 1690785] [currently: 1690785]
: int or None
        max_info_rows is the maximum number of rows for which a frame will
        perform a null check on its columns when repr'ing To a console.
        The default is 1,000,000 rows. So, if a DataFrame has more
        1,000,000 rows there will be no null check performed on the
        columns and thus the representation will take much less time to
        display in an interactive session. A value of None means always
        perform a null check when repr'ing.
display.max_rows: [default: 60] [currently: 500]
: int
        This sets the maximum number of rows Pandas should output when printing
        out various output. For example, this value determines whether the repr()
        for a dataframe prints out fully or just a summary repr.
        'None' value means unlimited.
display.max_seq_items: [default: None] [currently: None]
: int or None

        when pretty-printing a long sequence, no more then `max_seq_items`
        will be printed. If items are ommitted, they will be denoted by the addition
        of ""..."" to the resulting string.

        If set to None, the number of items to be printed is unlimited.
display.mpl_style: [default: None] [currently: None]
: bool

        Setting this to 'default' will modify the rcParams used by matplotlib
        to give plots a more pleasing visual style by default.
        Setting this to None/False restores the values to their initial value.
display.multi_sparse: [default: True] [currently: True]
: boolean
        ""sparsify"" MultiIndex display (don't display repeated
        elements in outer levels within groups)
display.notebook_repr_html: [default: True] [currently: True]
: boolean
        When True, IPython notebook will use html representation for
        Pandas objects (if it is available).
display.pprint_nest_depth: [default: 3] [currently: 3]
: int
        Controls the number of nested levels to process when pretty-printing
display.precision: [default: 7] [currently: 7]
: int
        Floating point output precision (number of significant digits). This is
        only a suggestion
display.width: [default: 80] [currently: 1000]
: int
        Width of the display in characters. In case python/IPython is running in
        a terminal this can be set to None and Pandas will correctly auto-detect the
        width.
        Note that the IPython notebook, IPython qtconsole, or IDLE do not run in a
        terminal and hence it is not possible to correctly detect the width.
mode.sim_interactive: [default: False] [currently: False]
: boolean
        Whether to simulate interactive mode for purposes of testing
mode.use_inf_as_null: [default: False] [currently: False]
: boolean
        True means treat None, NaN, INF, -INF as null (old way),
        False means None and NaN are null, but INF, -INF are not null
        (new way).
Call def:   pd.set_option(self, *args, **kwds)
</pre>
<hr />
<h3>Older version information</h3>
<p><em>Much of this has been deprecated.</em></p>
<p>As @bmu <a href=""https://stackoverflow.com/a/11708664/623735"">mentioned</a>, Pandas auto detects (by default) the size of the display area, a summary view will be used when an object repr does not fit on the display. You mentioned resizing the IDLE window, to no effect. If you do <code>print df.describe().to_string()</code> does it fit on the IDLE window?</p>
<p>The terminal size is determined by <code>pandas.util.terminal.get_terminal_size()</code> (deprecated and removed), this returns a tuple containing the <code>(width, height)</code> of the display. Does the output match the size of your IDLE window? There might be an issue (there was one before when running a terminal in Emacs).</p>
<p>Note that it is possible to bypass the autodetect, <code>pandas.set_printoptions(max_rows=200, max_columns=10)</code> will never switch to summary view if number of rows, columns does not exceed the given limits.</p>
<hr />
<p>The <code>max_colwidth</code> option helps in seeing untruncated form of each column.</p>
<p><a href=""https://i.sstatic.net/J412l.png"" rel=""noreferrer""><img src=""https://i.sstatic.net/J412l.png"" alt=""TruncatedColumnDisplay"" /></a></p>
"
Python `if x is not None` or `if not x is None`?,https://stackoverflow.com/questions/2710940/python-if-x-is-not-none-or-if-not-x-is-none,1042,python;nonetype;boolean-expression;pep8,"<p>There's no performance difference, as they compile to the same bytecode:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(&quot;not x is None&quot;)
  1           0 LOAD_NAME                0 (x)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               9 (is not)
              6 RETURN_VALUE
&gt;&gt;&gt; dis.dis(&quot;x is not None&quot;)
  1           0 LOAD_NAME                0 (x)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               9 (is not)
              6 RETURN_VALUE
</code></pre>
<p>Stylistically, I try to avoid <code>not x is y</code>, a human reader might misunderstand it as <code>(not x) is y</code>. If I write <code>x is not y</code> then there is no ambiguity.</p>
"
Find all files in a directory with extension .txt in Python,https://stackoverflow.com/questions/3964681/find-all-files-in-a-directory-with-extension-txt-in-python,1041,python;file-io,"<p>You can use <a href=""https://docs.python.org/2/library/glob.html"" rel=""noreferrer""><code>glob</code></a>:</p>

<pre><code>import glob, os
os.chdir(""/mydir"")
for file in glob.glob(""*.txt""):
    print(file)
</code></pre>

<p>or simply <a href=""https://docs.python.org/2/library/os.html#os.listdir"" rel=""noreferrer""><code>os.listdir</code></a>:</p>

<pre><code>import os
for file in os.listdir(""/mydir""):
    if file.endswith("".txt""):
        print(os.path.join(""/mydir"", file))
</code></pre>

<p>or if you want to traverse directory, use <a href=""https://docs.python.org/2/library/os.html#os.walk"" rel=""noreferrer""><code>os.walk</code></a>:</p>

<pre><code>import os
for root, dirs, files in os.walk(""/mydir""):
    for file in files:
        if file.endswith("".txt""):
             print(os.path.join(root, file))
</code></pre>
"
Convert date to datetime in Python,https://stackoverflow.com/questions/1937622/convert-date-to-datetime-in-python,1041,python;datetime;date,"<p>You can use <a href=""https://docs.python.org/3/library/datetime.html#datetime.datetime.combine"" rel=""noreferrer""><code>datetime.combine(date, time)</code></a>; for the time, you create a <code>datetime.time</code> object initialized to midnight.</p>
<pre><code>from datetime import date
from datetime import datetime

dt = datetime.combine(date.today(), datetime.min.time())
</code></pre>
"
Python integer incrementing with ++,https://stackoverflow.com/questions/2632677/python-integer-incrementing-with,1032,python;syntax;increment,"<p>Python doesn't support <code>++</code>, but you can do:</p>

<pre><code>number += 1
</code></pre>
"
Running unittest with typical test directory structure,https://stackoverflow.com/questions/1896918/running-unittest-with-typical-test-directory-structure,1029,python;unit-testing,"<p>The best solution in my opinion is to use the <code>unittest</code> <a href=""https://docs.python.org/2/library/unittest.html#command-line-interface"" rel=""noreferrer"">command line interface</a> which will add the directory to the <code>sys.path</code> so you don't have to (done in the <code>TestLoader</code> class).</p>
<p>For example for a directory structure like this:</p>
<pre><code>new_project
├── antigravity.py
└── test_antigravity.py
</code></pre>
<p>You can just run:</p>
<pre><code>$ cd new_project
$ python -m unittest test_antigravity
</code></pre>
<p>For a directory structure like yours:</p>
<pre><code>new_project
├── antigravity
│   ├── __init__.py         # make it a package
│   └── antigravity.py
└── test
    ├── __init__.py         # also make test a package
    └── test_antigravity.py
</code></pre>
<p>And in the test modules inside the <code>test</code> package, you can import the <code>antigravity</code> package and its modules as usual:</p>
<pre><code># import the package
import antigravity

# import the antigravity module
from antigravity import antigravity

# or an object inside the antigravity module
from antigravity.antigravity import my_object
</code></pre>
<p><strong>Running a single test module:</strong></p>
<p>To run a single test module, in this case <code>test_antigravity.py</code>:</p>
<pre><code>$ cd new_project
$ python -m unittest test.test_antigravity
</code></pre>
<p>Just reference the test module the same way you import it.</p>
<p><strong>Running a single test case or test method:</strong></p>
<p>Also you can run a single <code>TestCase</code> or a single test method:</p>
<pre><code>$ python -m unittest test.test_antigravity.GravityTestCase
$ python -m unittest test.test_antigravity.GravityTestCase.test_method
</code></pre>
<p><strong>Running all tests:</strong></p>
<p>You can also use <a href=""https://docs.python.org/2/library/unittest.html#test-discovery"" rel=""noreferrer"">test discovery</a> which will discover and run all the tests for you, they must be modules or packages named <code>test*.py</code> (can be changed with the <code>-p, --pattern</code> flag):</p>
<pre><code>$ cd new_project
$ python -m unittest discover
$ # Also works without discover for Python 3
$ # as suggested by @Burrito in the comments
$ python -m unittest
</code></pre>
<p>This will run all the <code>test*.py</code> modules inside the <code>test</code> package.</p>
<p><a href=""https://docs.python.org/3/library/unittest.html#unittest.TestLoader.discover"" rel=""noreferrer"">Here</a> you can find the updated official documentation of <code>discovery</code>.</p>
"
How do you get the logical xor of two variables in Python?,https://stackoverflow.com/questions/432842/how-do-you-get-the-logical-xor-of-two-variables-in-python,1026,python;logical-operators,"<p>If you're already normalizing the inputs to booleans, then != is xor.</p>
<pre><code>bool(a) != bool(b)
</code></pre>
"
How do I use a decimal step value for range()?,https://stackoverflow.com/questions/477486/how-do-i-use-a-decimal-step-value-for-range,1024,python;floating-point;range,"<p>Rather than using a decimal step directly, it's much safer to express this in terms of how many points you want. Otherwise, floating-point rounding error is likely to give you a wrong result.</p>
<p>Use the <a href=""https://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html"" rel=""noreferrer""><code>linspace</code></a> function from the <a href=""http://en.wikipedia.org/wiki/NumPy"" rel=""noreferrer"">NumPy</a> library (which isn't part of the standard library but is relatively easy to obtain). <code>linspace</code> takes a number of points to return, and also lets you specify whether or not to include the right endpoint:</p>
<pre><code>&gt;&gt;&gt; np.linspace(0,1,11)
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ])
&gt;&gt;&gt; np.linspace(0,1,10,endpoint=False)
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])
</code></pre>
<p>If you really want to use a floating-point step value, use <code>numpy.arange</code>:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.arange(0.0, 1.0, 0.1)
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])
</code></pre>
<p>Floating-point rounding error <em>will</em> cause problems, though. Here's a simple case where rounding error causes <code>arange</code> to produce a length-4 array when it should only produce 3 numbers:</p>
<pre><code>&gt;&gt;&gt; numpy.arange(1, 1.3, 0.1)
array([1. , 1.1, 1.2, 1.3])
</code></pre>
"
Is there any way to kill a Thread?,https://stackoverflow.com/questions/323972/is-there-any-way-to-kill-a-thread,1024,python;multithreading;python-multithreading;kill;terminate,"<p>It is generally a bad pattern to kill a thread abruptly, in Python, and in any language. Think of the following cases:</p>
<ul>
<li>the thread is holding a critical resource that must be closed properly</li>
<li>the thread has created several other threads that must be killed as well.</li>
</ul>
<p>The nice way of handling this, if you can afford it (if you are managing your own threads), is to have an exit_request flag that each thread checks on a regular interval to see if it is time for it to exit.</p>
<p><strong>For example:</strong></p>
<pre><code>import threading

class StoppableThread(threading.Thread):
    &quot;&quot;&quot;Thread class with a stop() method. The thread itself has to check
    regularly for the stopped() condition.&quot;&quot;&quot;

    def __init__(self,  *args, **kwargs):
        super(StoppableThread, self).__init__(*args, **kwargs)
        self._stop_event = threading.Event()

    def stop(self):
        self._stop_event.set()

    def stopped(self):
        return self._stop_event.is_set()
</code></pre>
<p>In this code, you should call <code>stop()</code> on the thread when you want it to exit, and wait for the thread to exit properly using <code>join()</code>. The thread should check the stop flag at regular intervals.</p>
<p>There are cases, however, when you really need to kill a thread. An example is when you are wrapping an external library that is busy for long calls, and you want to interrupt it.</p>
<p>The following code allows (with some restrictions) to raise an Exception in a Python thread:</p>
<pre><code>def _async_raise(tid, exctype):
    '''Raises an exception in the threads with id tid'''
    if not inspect.isclass(exctype):
        raise TypeError(&quot;Only types can be raised (not instances)&quot;)
    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid),
                                                     ctypes.py_object(exctype))
    if res == 0:
        raise ValueError(&quot;invalid thread id&quot;)
    elif res != 1:
        # &quot;if it returns a number greater than one, you're in trouble,
        # and you should call it again with exc=NULL to revert the effect&quot;
        ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid), None)
        raise SystemError(&quot;PyThreadState_SetAsyncExc failed&quot;)

class ThreadWithExc(threading.Thread):
    '''A thread class that supports raising an exception in the thread from
       another thread.
    '''
    def _get_my_tid(self):
        &quot;&quot;&quot;determines this (self's) thread id

        CAREFUL: this function is executed in the context of the caller
        thread, to get the identity of the thread represented by this
        instance.
        &quot;&quot;&quot;
        if not self.is_alive(): # Note: self.isAlive() on older version of Python
            raise threading.ThreadError(&quot;the thread is not active&quot;)

        # do we have it cached?
        if hasattr(self, &quot;_thread_id&quot;):
            return self._thread_id

        # no, look for it in the _active dict
        for tid, tobj in threading._active.items():
            if tobj is self:
                self._thread_id = tid
                return tid

        # TODO: in python 2.6, there's a simpler way to do: self.ident

        raise AssertionError(&quot;could not determine the thread's id&quot;)

    def raise_exc(self, exctype):
        &quot;&quot;&quot;Raises the given exception type in the context of this thread.

        If the thread is busy in a system call (time.sleep(),
        socket.accept(), ...), the exception is simply ignored.

        If you are sure that your exception should terminate the thread,
        one way to ensure that it works is:

            t = ThreadWithExc( ... )
            ...
            t.raise_exc( SomeException )
            while t.isAlive():
                time.sleep( 0.1 )
                t.raise_exc( SomeException )

        If the exception is to be caught by the thread, you need a way to
        check that your thread has caught it.

        CAREFUL: this function is executed in the context of the
        caller thread, to raise an exception in the context of the
        thread represented by this instance.
        &quot;&quot;&quot;
        _async_raise( self._get_my_tid(), exctype )
</code></pre>
<p>(Based on <a href=""http://tomerfiliba.com/recipes/Thread2/"" rel=""noreferrer"">Killable Threads</a> by Tomer Filiba. The quote about the return value of <code>PyThreadState_SetAsyncExc</code> appears to be from an <a href=""https://svn.python.org/projects/stackless/Python-2.4.3/dev/Python/pystate.c"" rel=""noreferrer"">old version of Python</a>.)</p>
<p>As noted in the documentation, this is not a magic bullet because if the thread is busy outside the Python interpreter, it will not catch the interruption.</p>
<p>A good usage pattern of this code is to have the thread catch a specific exception and perform the cleanup. That way, you can interrupt a task and still have proper cleanup.</p>
"
Convert hex string to integer in Python,https://stackoverflow.com/questions/209513/convert-hex-string-to-integer-in-python,1014,python;string;hex,"<p><strong>Without</strong> the <code>0x</code> prefix, you need to specify the base explicitly, otherwise there's no way to tell:</p>
<pre><code>x = int(&quot;deadbeef&quot;, 16)
</code></pre>
<p><strong>With</strong> the <code>0x</code> prefix, Python can distinguish hex and decimal automatically:</p>
<pre><code>&gt;&gt;&gt; print(int(&quot;0xdeadbeef&quot;, 0))
3735928559
&gt;&gt;&gt; print(int(&quot;10&quot;, 0))
10
</code></pre>
<p>(You <em>must</em> specify <code>0</code> as the base in order to invoke this prefix-guessing behavior; if you omit the second parameter, <a href=""https://docs.python.org/library/functions.html#int"" rel=""noreferrer""><code>int()</code></a> will assume base-10.)</p>
"
Getting a list of all subdirectories in the current directory,https://stackoverflow.com/questions/973473/getting-a-list-of-all-subdirectories-in-the-current-directory,1007,python;directory;subdirectory,"<p>Do you mean immediate subdirectories, or every directory right down the tree? </p>

<p>Either way, you could use <a href=""http://docs.python.org/library/os.html#os.walk"" rel=""noreferrer""><code>os.walk</code></a> to do this:</p>

<pre><code>os.walk(directory)
</code></pre>

<p>will yield a tuple for each subdirectory. Ths first entry in the 3-tuple is a directory name, so</p>

<pre><code>[x[0] for x in os.walk(directory)]
</code></pre>

<p>should give you all of the subdirectories, recursively.</p>

<p>Note that the second entry in the tuple is the list of child directories of the entry in the first position, so you could use this instead, but it's not likely to save you much.</p>

<p>However, you could use it just to give you the immediate child directories:</p>

<pre><code>next(os.walk('.'))[1]
</code></pre>

<p>Or see the other solutions already posted, using <a href=""http://docs.python.org/library/os.html#os.listdir"" rel=""noreferrer""><code>os.listdir</code></a> and <a href=""http://docs.python.org/library/os.path.html#os.path.isdir"" rel=""noreferrer""><code>os.path.isdir</code></a>, including those at ""<a href=""https://stackoverflow.com/questions/800197/get-all-of-the-immediate-subdirectories-in-python"">How to get all of the immediate subdirectories in Python</a>"".</p>
"
How do I do a not equal in Django queryset filtering?,https://stackoverflow.com/questions/687295/how-do-i-do-a-not-equal-in-django-queryset-filtering,1006,python;django;django-models;django-queryset,"<p>You can use <a href=""https://docs.djangoproject.com/en/stable/topics/db/queries/#complex-lookups-with-q"" rel=""noreferrer"">Q objects</a> for this. They can be negated with the <code>~</code> operator and combined much like normal Python expressions:</p>
<pre><code>from myapp.models import Entry
from django.db.models import Q

Entry.objects.filter(~Q(id=3))
</code></pre>
<p>will return all entries except the one(s) with <code>3</code> as their ID:</p>
<pre><code>[&lt;Entry: Entry object&gt;, &lt;Entry: Entry object&gt;, &lt;Entry: Entry object&gt;, ...]
</code></pre>
"
"Writing a list to a file with Python, with newlines",https://stackoverflow.com/questions/899103/writing-a-list-to-a-file-with-python-with-newlines,1005,python;file;list;file-io;newline,"<p>Use a loop:</p>
<pre><code>with open('your_file.txt', 'w') as f:
    for line in lines:
        f.write(f&quot;{line}\n&quot;)
</code></pre>
<p>For Python &lt;3.6:</p>
<pre><code>with open('your_file.txt', 'w') as f:
    for line in lines:
        f.write(&quot;%s\n&quot; % line)
</code></pre>
<p>For Python 2, one may also use:</p>
<pre><code>with open('your_file.txt', 'w') as f:
    for line in lines:
        print &gt;&gt; f, line
</code></pre>
<p>If you're keen on a single function call, at least remove the square brackets <code>[]</code>, so that the strings to be printed get made one at a time (a genexp rather than a listcomp) -- no reason to take up all the memory required to materialize the whole list of strings.</p>
"
Peak detection in a 2D array,https://stackoverflow.com/questions/3684484/peak-detection-in-a-2d-array,1003,python;image-processing,"<p>I detected the peaks using a <strong>local maximum filter</strong>. Here is the result on your first dataset of 4 paws:
<img src=""https://i.sstatic.net/Kgt4H.png"" alt=""Peaks detection result""></p>

<p>I also ran it on the second dataset of 9 paws and <a href=""https://i.sstatic.net/4CKCh.png"" rel=""noreferrer"">it worked as well</a>.</p>

<p>Here is how you do it:</p>

<pre><code>import numpy as np
from scipy.ndimage.filters import maximum_filter
from scipy.ndimage.morphology import generate_binary_structure, binary_erosion
import matplotlib.pyplot as pp

#for some reason I had to reshape. Numpy ignored the shape header.
paws_data = np.loadtxt(""paws.txt"").reshape(4,11,14)

#getting a list of images
paws = [p.squeeze() for p in np.vsplit(paws_data,4)]


def detect_peaks(image):
    """"""
    Takes an image and detect the peaks usingthe local maximum filter.
    Returns a boolean mask of the peaks (i.e. 1 when
    the pixel's value is the neighborhood maximum, 0 otherwise)
    """"""

    # define an 8-connected neighborhood
    neighborhood = generate_binary_structure(2,2)

    #apply the local maximum filter; all pixel of maximal value 
    #in their neighborhood are set to 1
    local_max = maximum_filter(image, footprint=neighborhood)==image
    #local_max is a mask that contains the peaks we are 
    #looking for, but also the background.
    #In order to isolate the peaks we must remove the background from the mask.

    #we create the mask of the background
    background = (image==0)

    #a little technicality: we must erode the background in order to 
    #successfully subtract it form local_max, otherwise a line will 
    #appear along the background border (artifact of the local maximum filter)
    eroded_background = binary_erosion(background, structure=neighborhood, border_value=1)

    #we obtain the final mask, containing only peaks, 
    #by removing the background from the local_max mask (xor operation)
    detected_peaks = local_max ^ eroded_background

    return detected_peaks


#applying the detection and plotting results
for i, paw in enumerate(paws):
    detected_peaks = detect_peaks(paw)
    pp.subplot(4,2,(2*i+1))
    pp.imshow(paw)
    pp.subplot(4,2,(2*i+2) )
    pp.imshow(detected_peaks)

pp.show()
</code></pre>

<p>All you need to do after is use <code>scipy.ndimage.measurements.label</code> on the mask to label all distinct objects. Then you'll be able to play with them individually.</p>

<p><strong>Note</strong> that the method works well because the background is not noisy. If it were, you would detect a bunch of other unwanted peaks in the background. Another important factor is the size of the <em>neighborhood</em>. You will need to adjust it if the peak size changes (the should remain roughly proportional).</p>
"
Is there a list of Pytz Timezones?,https://stackoverflow.com/questions/13866926/is-there-a-list-of-pytz-timezones,1002,python;django;datetime;timezone;pytz,"<p>You can list all the available timezones with <code>pytz.all_timezones</code>:</p>

<pre><code>In [40]: import pytz
In [41]: pytz.all_timezones
Out[42]: 
['Africa/Abidjan',
 'Africa/Accra',
 'Africa/Addis_Ababa',
 ...]
</code></pre>

<p>There is also <code>pytz.common_timezones</code>:</p>

<pre><code>In [45]: len(pytz.common_timezones)
Out[45]: 403

In [46]: len(pytz.all_timezones)
Out[46]: 563
</code></pre>
"
How are iloc and loc different?,https://stackoverflow.com/questions/31593201/how-are-iloc-and-loc-different,1000,python;pandas;dataframe;indexing;pandas-loc,"<h2>Label <em>vs.</em> Location</h2>
<p>The main distinction between the two methods is:</p>
<ul>
<li><p><code>loc</code> gets rows (and/or columns) with particular <strong>labels</strong>.</p>
</li>
<li><p><code>iloc</code> gets rows (and/or columns) at integer <strong>locations</strong>.</p>
</li>
</ul>
<p>To demonstrate, consider a series <code>s</code> of characters with a non-monotonic integer index:</p>
<pre><code>&gt;&gt;&gt; s = pd.Series(list(&quot;abcdef&quot;), index=[49, 48, 47, 0, 1, 2]) 
49    a
48    b
47    c
0     d
1     e
2     f

&gt;&gt;&gt; s.loc[0]    # value at index label 0
'd'

&gt;&gt;&gt; s.iloc[0]   # value at index location 0
'a'

&gt;&gt;&gt; s.loc[0:1]  # rows at index labels between 0 and 1 (inclusive)
0    d
1    e

&gt;&gt;&gt; s.iloc[0:1] # rows at index location between 0 and 1 (exclusive)
49    a
</code></pre>
<p>Here are some of the differences/similarities between <code>s.loc</code> and <code>s.iloc</code> when passed various objects:</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>&lt;object&gt;</th>
<th>description</th>
<th><code>s.loc[&lt;object&gt;]</code></th>
<th><code>s.iloc[&lt;object&gt;]</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>0</code></td>
<td>single item</td>
<td>Value at index <em>label</em> <code>0</code> (the string <code>'d'</code>)</td>
<td>Value at index <em>location</em> 0 (the string <code>'a'</code>)</td>
</tr>
<tr>
<td><code>0:1</code></td>
<td>slice</td>
<td><strong>Two</strong> rows (labels <code>0</code> and <code>1</code>)</td>
<td><strong>One</strong> row (first row at location 0)</td>
</tr>
<tr>
<td><code>1:47</code></td>
<td>slice with out-of-bounds end</td>
<td><strong>Zero</strong> rows (empty Series)</td>
<td><strong>Five</strong> rows (location 1 onwards)</td>
</tr>
<tr>
<td><code>1:47:-1</code></td>
<td>slice with negative step</td>
<td><strong>three</strong> rows (labels <code>1</code> back to <code>47</code>)</td>
<td><strong>Zero</strong> rows (empty Series)</td>
</tr>
<tr>
<td><code>[2, 0]</code></td>
<td>integer list</td>
<td><strong>Two</strong> rows with given labels</td>
<td><strong>Two</strong> rows with given locations</td>
</tr>
<tr>
<td><code>s &gt; 'e'</code></td>
<td>Bool series (indicating which values have the property)</td>
<td><strong>One</strong> row (containing <code>'f'</code>)</td>
<td><code>NotImplementedError</code></td>
</tr>
<tr>
<td><code>(s&gt;'e').values</code></td>
<td>Bool array</td>
<td><strong>One</strong> row (containing <code>'f'</code>)</td>
<td>Same as <code>loc</code></td>
</tr>
<tr>
<td><code>999</code></td>
<td>int object not in index</td>
<td><code>KeyError</code></td>
<td><code>IndexError</code> (out of bounds)</td>
</tr>
<tr>
<td><code>-1</code></td>
<td>int object not in index</td>
<td><code>KeyError</code></td>
<td>Returns last value in <code>s</code></td>
</tr>
<tr>
<td><code>lambda x: x.index[3]</code></td>
<td>callable applied to series (here returning 3<sup>rd</sup> item in index)</td>
<td><code>s.loc[s.index[3]]</code></td>
<td><code>s.iloc[s.index[3]]</code></td>
</tr>
</tbody>
</table>
</div>
<p><code>loc</code>'s label-querying capabilities extend well-beyond integer indexes and it's worth highlighting a couple of additional examples.</p>
<p>Here's a Series where the index contains string objects:</p>
<pre><code>&gt;&gt;&gt; s2 = pd.Series(s.index, index=s.values)
&gt;&gt;&gt; s2
a    49
b    48
c    47
d     0
e     1
f     2
</code></pre>
<p>Since <code>loc</code> is label-based, it can fetch the first value in the Series using <code>s2.loc['a']</code>. It can also slice with non-integer objects:</p>
<pre><code>&gt;&gt;&gt; s2.loc['c':'e']  # all rows lying between 'c' and 'e' (inclusive)
c    47
d     0
e     1
</code></pre>
<p>For DateTime indexes, we don't need to pass the exact date/time to fetch by label. For example:</p>
<pre><code>&gt;&gt;&gt; s3 = pd.Series(list('abcde'), pd.date_range('now', periods=5, freq='M')) 
&gt;&gt;&gt; s3
2021-01-31 16:41:31.879768    a
2021-02-28 16:41:31.879768    b
2021-03-31 16:41:31.879768    c
2021-04-30 16:41:31.879768    d
2021-05-31 16:41:31.879768    e
</code></pre>
<p>Then to fetch the row(s) for March/April 2021 we only need:</p>
<pre><code>&gt;&gt;&gt; s3.loc['2021-03':'2021-04']
2021-03-31 17:04:30.742316    c
2021-04-30 17:04:30.742316    d
</code></pre>
<h2>Rows and Columns</h2>
<p><code>loc</code> and <code>iloc</code> work the same way with DataFrames as they do with Series. It's useful to note that both methods can address columns and rows together.</p>
<p>When given a tuple, the first element is used to index the rows and, if it exists, the second element is used to index the columns.</p>
<p>Consider the DataFrame defined below:</p>
<pre><code>&gt;&gt;&gt; import numpy as np 
&gt;&gt;&gt; df = pd.DataFrame(np.arange(25).reshape(5, 5),  
                      index=list('abcde'), 
                      columns=['x','y','z', 8, 9])
&gt;&gt;&gt; df
    x   y   z   8   9
a   0   1   2   3   4
b   5   6   7   8   9
c  10  11  12  13  14
d  15  16  17  18  19
e  20  21  22  23  24
</code></pre>
<p>Then for example:</p>
<pre><code>&gt;&gt;&gt; df.loc['c': , :'z']  # rows 'c' and onwards AND columns up to 'z'
    x   y   z
c  10  11  12
d  15  16  17
e  20  21  22

&gt;&gt;&gt; df.iloc[:, 3]        # all rows, but only the column at index location 3
a     3
b     8
c    13
d    18
e    23
</code></pre>
<p>Sometimes we want to mix label and positional indexing methods for the rows and columns, somehow combining the capabilities of <code>loc</code> and <code>iloc</code>.</p>
<p>For example, consider the following DataFrame. How best to slice the rows up to and including 'c' <em>and</em> take the first four columns?</p>
<pre><code>&gt;&gt;&gt; import numpy as np 
&gt;&gt;&gt; df = pd.DataFrame(np.arange(25).reshape(5, 5),  
                      index=list('abcde'), 
                      columns=['x','y','z', 8, 9])
&gt;&gt;&gt; df
    x   y   z   8   9
a   0   1   2   3   4
b   5   6   7   8   9
c  10  11  12  13  14
d  15  16  17  18  19
e  20  21  22  23  24
</code></pre>
<p>We can achieve this result using <code>iloc</code> and the help of another method:</p>
<pre><code>&gt;&gt;&gt; df.iloc[:df.index.get_loc('c') + 1, :4]
    x   y   z   8
a   0   1   2   3
b   5   6   7   8
c  10  11  12  13
</code></pre>
<p><a href=""http://pandas.pydata.org/pandas-docs/version/0.19.1/generated/pandas.Index.get_loc.html"" rel=""noreferrer""><code>get_loc()</code></a> is an index method meaning &quot;get the position of the label in this index&quot;. Note that since slicing with <code>iloc</code> is exclusive of its endpoint, we must add 1 to this value if we want row 'c' as well.</p>
"
Fixed digits after decimal with f-strings,https://stackoverflow.com/questions/45310254/fixed-digits-after-decimal-with-f-strings,998,python;python-3.x;f-string,"<p>Include the type specifier in your format expression:</p>

<pre><code>&gt;&gt;&gt; a = 10.1234
&gt;&gt;&gt; f'{a:.2f}'
'10.12'
</code></pre>
"
Remove empty strings from a list of strings,https://stackoverflow.com/questions/3845423/remove-empty-strings-from-a-list-of-strings,996,python;string;list,"<p>I would use <a href=""http://docs.python.org/library/functions.html#filter"" rel=""noreferrer""><code>filter</code></a>:</p>

<pre><code>str_list = filter(None, str_list)
str_list = filter(bool, str_list)
str_list = filter(len, str_list)
str_list = filter(lambda item: item, str_list)
</code></pre>

<p>Python 3 returns an iterator from <code>filter</code>, so should be wrapped in a call to <code>list()</code></p>

<pre><code>str_list = list(filter(None, str_list))
</code></pre>
"
How to identify which OS Python is running on,https://stackoverflow.com/questions/1854/how-to-identify-which-os-python-is-running-on,996,python;operating-system;cross-platform;platform-agnostic,"<pre><code>&gt;&gt;&gt; import os

&gt;&gt;&gt; os.name
'posix'

&gt;&gt;&gt; import platform

&gt;&gt;&gt; platform.system()
'Linux'

&gt;&gt;&gt; platform.release()
'2.6.22-15-generic'
</code></pre>
<p>The output of <a href=""https://docs.python.org/library/platform.html#platform.system"" rel=""noreferrer""><code>platform.system()</code></a> is as follows:</p>
<ul>
<li>Linux: <code>Linux</code></li>
<li>Mac: <code>Darwin</code></li>
<li>Windows: <code>Windows</code></li>
</ul>
<p>See: <a href=""https://docs.python.org/library/platform.html"" rel=""noreferrer""><code>platform</code> — Access to underlying platform’s identifying data</a></p>
"
List comprehension vs map,https://stackoverflow.com/questions/1247486/list-comprehension-vs-map,995,python;list-comprehension;map-function,"<p><em>map</em> may be microscopically faster in some cases (when you're <em>not</em> making a lambda for the purpose, but using the same function in map and a <a href=""https://en.wikipedia.org/wiki/List_comprehension#Python"" rel=""noreferrer"">list comprehension</a>). List comprehensions may be faster in other cases and most (not all) Pythonistas consider them more direct and clearer.</p>
<p>An example of the tiny speed advantage of <em>map</em> when using exactly the same function:</p>
<pre class=""lang-none prettyprint-override""><code>$ python -m timeit -s'xs=range(10)' 'map(hex, xs)'
100000 loops, best of 3: 4.86 usec per loop

$ python -m timeit -s'xs=range(10)' '[hex(x) for x in xs]'
100000 loops, best of 3: 5.58 usec per loop
</code></pre>
<p>An example of how performance comparison gets completely reversed when map needs a lambda:</p>
<pre class=""lang-none prettyprint-override""><code>$ python -m timeit -s'xs=range(10)' 'map(lambda x: x+2, xs)'
100000 loops, best of 3: 4.24 usec per loop

$ python -m timeit -s'xs=range(10)' '[x+2 for x in xs]'
100000 loops, best of 3: 2.32 usec per loop
</code></pre>
"
Get key by value in dictionary,https://stackoverflow.com/questions/8023306/get-key-by-value-in-dictionary,991,python;dictionary,"<p>There is none. <code>dict</code> is not intended to be used this way.</p>

<pre><code>dictionary = {'george': 16, 'amber': 19}
search_age = input(""Provide age"")
for name, age in dictionary.items():  # for name, age in dictionary.iteritems():  (for Python 2.x)
    if age == search_age:
        print(name)
</code></pre>
"
How do I update/upgrade pip itself from inside my virtual environment?,https://stackoverflow.com/questions/15221473/how-do-i-update-upgrade-pip-itself-from-inside-my-virtual-environment,990,python;upgrade;virtualenv;pip;package-managers,"<p><code>pip</code> is just a <a href=""https://pypi.python.org/pypi/pip"" rel=""noreferrer"">PyPI package</a> like any other; you could use it to upgrade itself the same way you would upgrade any package:</p>
<pre><code>pip install --upgrade pip
</code></pre>
<p>On Windows the <a href=""https://pip.pypa.io/en/stable/installing/#upgrading-pip"" rel=""noreferrer"">recommended command</a> is:</p>
<pre><code>py -m pip install --upgrade pip
</code></pre>
"
What does -&gt; mean in Python function definitions?,https://stackoverflow.com/questions/14379753/what-does-mean-in-python-function-definitions,989,python;python-typing;grammar;function-definition,"<p>It's a <a href=""http://www.python.org/dev/peps/pep-3107/"" rel=""noreferrer"">function annotation</a>.</p>

<p>In more detail, Python 2.x has docstrings, which allow you to attach a metadata string to various types of object. This is amazingly handy, so Python 3 extends the feature by allowing you to attach metadata to functions describing their parameters and return values.</p>

<p>There's no preconceived use case, but the PEP suggests several. One very handy one is to allow you to annotate parameters with their expected types; it would then be easy to write a decorator that verifies the annotations or coerces the arguments to the right type. Another is to allow parameter-specific documentation instead of encoding it into the docstring.</p>
"
How can I use Python to get the system hostname?,https://stackoverflow.com/questions/4271740/how-can-i-use-python-to-get-the-system-hostname,987,python;hostname,"<p>Use <a href=""http://docs.python.org/library/socket.html"" rel=""noreferrer""><code>socket</code></a> and its <a href=""http://docs.python.org/library/socket.html#socket.gethostname"" rel=""noreferrer""><code>gethostname()</code></a> functionality. This will get the <code>hostname</code> of the computer where the Python interpreter is running:</p>

<pre><code>import socket
print(socket.gethostname())
</code></pre>
"
How are lambdas useful?,https://stackoverflow.com/questions/890128/how-are-lambdas-useful,986,python;function;lambda;closures,"<p>Are you talking about <a href=""https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions"" rel=""noreferrer"">lambda expressions</a>? Like</p>
<pre><code>lambda x: x**2 + 2*x - 5
</code></pre>
<p>Those things are actually quite useful.  Python supports a style of programming called <em>functional programming</em> where you can pass functions to other functions to do stuff. Example:</p>
<pre><code>mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])
</code></pre>
<p>sets <code>mult3</code> to <code>[3, 6, 9]</code>, those elements of the original list that are multiples of 3. This is shorter (and, one could argue, clearer) than</p>
<pre><code>def filterfunc(x):
    return x % 3 == 0
mult3 = filter(filterfunc, [1, 2, 3, 4, 5, 6, 7, 8, 9])
</code></pre>
<p>Of course, in this particular case, you could do the same thing as a list comprehension:</p>
<pre><code>mult3 = [x for x in [1, 2, 3, 4, 5, 6, 7, 8, 9] if x % 3 == 0]
</code></pre>
<p>(or even as <code>range(3,10,3)</code>), but there are many other, more sophisticated use cases where you can't use a list comprehension and a lambda function may be the shortest way to write something out.</p>
<ul>
<li><p>Returning a function from another function</p>
<pre><code>  &gt;&gt;&gt; def transform(n):
  ...     return lambda x: x + n
  ...
  &gt;&gt;&gt; f = transform(3)
  &gt;&gt;&gt; f(4)
  7
</code></pre>
<p>This is often used to create function wrappers, such as Python's decorators.</p>
</li>
<li><p>Combining elements of an iterable sequence with <code>reduce()</code></p>
<pre><code>  &gt;&gt;&gt; reduce(lambda a, b: '{}, {}'.format(a, b), [1, 2, 3, 4, 5, 6, 7, 8, 9])
  '1, 2, 3, 4, 5, 6, 7, 8, 9'
</code></pre>
</li>
<li><p>Sorting by an alternate key</p>
<pre><code>  &gt;&gt;&gt; sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], key=lambda x: abs(5-x))
  [5, 4, 6, 3, 7, 2, 8, 1, 9]
</code></pre>
</li>
</ul>
<p>I use lambda functions on a regular basis. It took me a while to get used to them, but eventually I came to understand that they're a very valuable part of the language.</p>
"
What is the best project structure for a Python application?,https://stackoverflow.com/questions/193161/what-is-the-best-project-structure-for-a-python-application,984,python;directory-structure;organization;project-structure,"<p>Doesn't too much matter.  Whatever makes you happy will work.  There aren't a lot of silly rules because Python projects can be simple.</p>

<ul>
<li><code>/scripts</code> or <code>/bin</code> for that kind of command-line interface stuff</li>
<li><code>/tests</code> for your tests</li>
<li><code>/lib</code> for your C-language libraries</li>
<li><code>/doc</code> for most documentation</li>
<li><code>/apidoc</code> for the Epydoc-generated API docs.</li>
</ul>

<p>And the top-level directory can contain README's, Config's and whatnot.</p>

<p>The hard choice is whether or not to use a <code>/src</code> tree.  Python doesn't have a distinction between <code>/src</code>, <code>/lib</code>, and <code>/bin</code> like Java or C has.</p>

<p>Since a top-level <code>/src</code> directory is seen by some as meaningless, your top-level directory can be the top-level architecture of your application.</p>

<ul>
<li><code>/foo</code></li>
<li><code>/bar</code></li>
<li><code>/baz</code></li>
</ul>

<p>I recommend putting all of this under the ""name-of-my-product"" directory.  So, if you're writing an application named <code>quux</code>, the directory that contains all this stuff is named  <code>/quux</code>.</p>

<p>Another project's <code>PYTHONPATH</code>, then, can include <code>/path/to/quux/foo</code> to reuse the <code>QUUX.foo</code> module.  </p>

<p>In my case, since I use Komodo Edit, my IDE cuft is a single .KPF file.  I actually put that in the top-level <code>/quux</code> directory, and omit adding it to SVN.</p>
"
How can I open multiple files using &quot;with open&quot; in Python?,https://stackoverflow.com/questions/4617034/how-can-i-open-multiple-files-using-with-open-in-python,982,python;file-io,
How do I detect whether a variable is a function?,https://stackoverflow.com/questions/624926/how-do-i-detect-whether-a-variable-is-a-function,981,python,
open() in Python does not create a file if it doesn&#39;t exist,https://stackoverflow.com/questions/2967194/open-in-python-does-not-create-a-file-if-it-doesnt-exist,980,python;linux;file-io;file-permissions,
Why use pip over easy_install?,https://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install,979,python;pip;setuptools;easy-install;pypi,
What is a clean &quot;pythonic&quot; way to implement multiple constructors?,https://stackoverflow.com/questions/682504/what-is-a-clean-pythonic-way-to-implement-multiple-constructors,977,python;class;constructor,
What does the &quot;at&quot; (@) symbol do in Python?,https://stackoverflow.com/questions/6392739/what-does-the-at-symbol-do-in-python,976,python;syntax,
Find a value in a list,https://stackoverflow.com/questions/9542738/find-a-value-in-a-list,968,python;list;find,
How to properly ignore exceptions,https://stackoverflow.com/questions/730764/how-to-properly-ignore-exceptions,968,python;exception;try-except,
python exception message capturing,https://stackoverflow.com/questions/4690600/python-exception-message-capturing,967,python;exception;logging;except;python-logging,
List of lists changes reflected across sublists unexpectedly,https://stackoverflow.com/questions/240178/list-of-lists-changes-reflected-across-sublists-unexpectedly,967,python;list;nested-lists;mutable,
How to import the class within the same directory or sub directory?,https://stackoverflow.com/questions/4142151/how-to-import-the-class-within-the-same-directory-or-sub-directory,966,python;python-import,
How to see normal stdout/stderr console print() output from code during a pytest run?,https://stackoverflow.com/questions/14405063/how-to-see-normal-stdout-stderr-console-print-output-from-code-during-a-pytest,964,python;pytest;stdout;flags,
"Saving UTF-8 texts with json.dumps as UTF-8, not as a \u escape sequence",https://stackoverflow.com/questions/18337407/saving-utf-8-texts-with-json-dumps-as-utf-8-not-as-a-u-escape-sequence,962,python;json;unicode;utf-8;escaping,
How can I iterate over files in a given directory?,https://stackoverflow.com/questions/10377998/how-can-i-iterate-over-files-in-a-given-directory,958,python;iterator;directory,
How to disable Python warnings?,https://stackoverflow.com/questions/14463277/how-to-disable-python-warnings,957,python;suppress-warnings,
Shuffling a list of objects,https://stackoverflow.com/questions/976882/shuffling-a-list-of-objects,956,python;list;random;shuffle,
How to make IPython notebook matplotlib plot inline,https://stackoverflow.com/questions/19410042/how-to-make-ipython-notebook-matplotlib-plot-inline,955,python;matplotlib;jupyter-notebook;ipython;data-visualization,
pip install mysql-python fails with EnvironmentError: mysql_config not found,https://stackoverflow.com/questions/5178292/pip-install-mysql-python-fails-with-environmenterror-mysql-config-not-found,954,python;pip;mysql-python,
Python setup.py uninstall,https://stackoverflow.com/questions/1550226/python-setup-py-uninstall,949,python;setup.py;pypi,
Print string to text file,https://stackoverflow.com/questions/5214578/print-string-to-text-file,948,python;string;text;file-io,
not None test in Python,https://stackoverflow.com/questions/3965104/not-none-test-in-python,946,python;nonetype,
Pandas Merging 101,https://stackoverflow.com/questions/53645882/pandas-merging-101,946,python;pandas;join;merge;concatenation,
"What is __future__ in Python used for and how/when to use it, and how it works",https://stackoverflow.com/questions/7075082/what-is-future-in-python-used-for-and-how-when-to-use-it-and-how-it-works,946,python;python-2.x,
Why is python setup.py saying invalid command &#39;bdist_wheel&#39; on Travis CI?,https://stackoverflow.com/questions/34819221/why-is-python-setup-py-saying-invalid-command-bdist-wheel-on-travis-ci,940,python;travis-ci;setup.py;pypi,
Why does Python code run faster in a function?,https://stackoverflow.com/questions/11241523/why-does-python-code-run-faster-in-a-function,938,python;performance;profiling;benchmarking;cpython,
How to sort a list/tuple of lists/tuples by the element at a given index,https://stackoverflow.com/questions/3121979/how-to-sort-a-list-tuple-of-lists-tuples-by-the-element-at-a-given-index,935,python;list;sorting;tuples,
How to change the font size on a matplotlib plot,https://stackoverflow.com/questions/3899980/how-to-change-the-font-size-on-a-matplotlib-plot,932,python;matplotlib;font-size,
How do I get the day of week given a date?,https://stackoverflow.com/questions/9847213/how-do-i-get-the-day-of-week-given-a-date,932,python;date;datetime;time;weekday,
How to remove items from a list while iterating?,https://stackoverflow.com/questions/1207406/how-to-remove-items-from-a-list-while-iterating,931,python;iteration,
How do I set the figure title and axes labels font size?,https://stackoverflow.com/questions/12444716/how-do-i-set-the-figure-title-and-axes-labels-font-size,931,python;matplotlib;axis-labels;yaxis;x-axis,
Get the last day of the month,https://stackoverflow.com/questions/42950/get-the-last-day-of-the-month,928,python;date,
Create an empty list with certain size in Python,https://stackoverflow.com/questions/10712002/create-an-empty-list-with-certain-size-in-python,927,python;list,
Argparse optional positional arguments?,https://stackoverflow.com/questions/4480075/argparse-optional-positional-arguments,927,python;command-line-arguments;argparse,
How to use multiprocessing pool.map with multiple arguments,https://stackoverflow.com/questions/5442910/how-to-use-multiprocessing-pool-map-with-multiple-arguments,924,python;multiprocessing;python-multiprocessing,
How to convert string representation of list to a list,https://stackoverflow.com/questions/1894269/how-to-convert-string-representation-of-list-to-a-list,923,python;string;list;text-parsing,
"How do I print the full NumPy array, without truncation?",https://stackoverflow.com/questions/1987694/how-do-i-print-the-full-numpy-array-without-truncation,922,python;arrays;numpy;output-formatting,
How to create a zip archive of a directory?,https://stackoverflow.com/questions/1855095/how-to-create-a-zip-archive-of-a-directory,921,python;zip;archive;python-zipfile,
"&quot;TypeError: a bytes-like object is required, not &#39;str&#39;&quot; when handling file content in Python 3",https://stackoverflow.com/questions/33054527/typeerror-a-bytes-like-object-is-required-not-str-when-handling-file-conte,921,python;python-3.x;string;file;byte,
"What exactly do &quot;u&quot; and &quot;r&quot; string prefixes do, and what are raw string literals?",https://stackoverflow.com/questions/2081640/what-exactly-do-u-and-r-string-prefixes-do-and-what-are-raw-string-literals,921,python;unicode;python-2.x;rawstring,
How to define a two-dimensional array?,https://stackoverflow.com/questions/6667201/how-to-define-a-two-dimensional-array,919,python;list;multidimensional-array,
"Creating an empty Pandas DataFrame, and then filling it",https://stackoverflow.com/questions/13784192/creating-an-empty-pandas-dataframe-and-then-filling-it,918,python;pandas;dataframe,
How do I properly assert that an exception gets raised in pytest?,https://stackoverflow.com/questions/23337471/how-do-i-properly-assert-that-an-exception-gets-raised-in-pytest,911,python;unit-testing;exception;testing;pytest,
Can I force pip to reinstall the current version?,https://stackoverflow.com/questions/19548957/can-i-force-pip-to-reinstall-the-current-version,911,python;pip;package,
What is monkey patching?,https://stackoverflow.com/questions/5626193/what-is-monkey-patching,911,python;terminology;monkeypatching,
Unzipping files in Python,https://stackoverflow.com/questions/3451111/unzipping-files-in-python,909,python;zip;unzip;python-zipfile,
"Difference between modes a, a+, w, w+, and r+ in built-in open function",https://stackoverflow.com/questions/1466000/difference-between-modes-a-a-w-w-and-r-in-built-in-open-function,908,python;file,
How to list all available package versions with pip?,https://stackoverflow.com/questions/4888027/how-to-list-all-available-package-versions-with-pip,907,python;pip,
Styling multi-line conditions in &#39;if&#39; statements?,https://stackoverflow.com/questions/181530/styling-multi-line-conditions-in-if-statements,901,python;if-statement,
Shuffle DataFrame rows,https://stackoverflow.com/questions/29576430/shuffle-dataframe-rows,898,python;pandas;dataframe;permutation;shuffle,
How to filter Pandas dataframe using &#39;in&#39; and &#39;not in&#39; like in SQL,https://stackoverflow.com/questions/19960077/how-to-filter-pandas-dataframe-using-in-and-not-in-like-in-sql,895,python;pandas;dataframe;indexing;filter,
"Truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()",https://stackoverflow.com/questions/36921951/truth-value-of-a-series-is-ambiguous-use-a-empty-a-bool-a-item-a-any-o,895,python;pandas;filter;conditional-statements;valueerror,
What does the Ellipsis object do?,https://stackoverflow.com/questions/772124/what-does-the-ellipsis-object-do,893,python;ellipsis,
How to check if a string is a substring of items in a list of strings,https://stackoverflow.com/questions/4843158/how-to-check-if-a-string-is-a-substring-of-items-in-a-list-of-strings,889,python;string;list,
Using Python 3 in virtualenv,https://stackoverflow.com/questions/23842713/using-python-3-in-virtualenv,888,python;python-3.x;virtualenv,
How do I remove/delete a virtualenv?,https://stackoverflow.com/questions/11005457/how-do-i-remove-delete-a-virtualenv,882,python;virtualenv;python-venv;virtualenv-commands,
How can I capitalize the first letter of each word in a string?,https://stackoverflow.com/questions/1549641/how-can-i-capitalize-the-first-letter-of-each-word-in-a-string,879,python;capitalization;capitalize,
How do I generate all permutations of a list?,https://stackoverflow.com/questions/104420/how-do-i-generate-all-permutations-of-a-list,873,python;algorithm;permutation;combinatorics,
What is the intended use of the optional &quot;else&quot; clause of the &quot;try&quot; statement in Python?,https://stackoverflow.com/questions/855759/what-is-the-intended-use-of-the-optional-else-clause-of-the-try-statement-in,873,python;exception,
"Constructing DataFrame from values in variables yields &quot;ValueError: If using all scalar values, you must pass an index&quot;",https://stackoverflow.com/questions/17839973/constructing-dataframe-from-values-in-variables-yields-valueerror-if-using-all,867,python;pandas;dataframe;constructor;valueerror,
Adding a method to an existing object instance in Python,https://stackoverflow.com/questions/972/adding-a-method-to-an-existing-object-instance-in-python,867,python;oop;methods;monkeypatching,
What&#39;s the difference between a module and package in Python?,https://stackoverflow.com/questions/7948494/whats-the-difference-between-a-module-and-package-in-python,864,python;module;package;terminology;difference,
What is the difference between range and xrange functions in Python 2.X?,https://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x,863,python;loops;range;python-2.x;xrange,
Best way to strip punctuation from a string,https://stackoverflow.com/questions/265960/best-way-to-strip-punctuation-from-a-string,862,python;string;punctuation,
How do I change the working directory in Python?,https://stackoverflow.com/questions/431684/how-do-i-change-the-working-directory-in-python,862,python;path;cd,
How to delete the contents of a folder?,https://stackoverflow.com/questions/185936/how-to-delete-the-contents-of-a-folder,861,python;file,
How can I temporarily disable a foreign key constraint in MySQL?,https://stackoverflow.com/questions/15501673/how-can-i-temporarily-disable-a-foreign-key-constraint-in-mysql,860,python;sql;mysql;django;django-models,
How to update/upgrade a package using pip?,https://stackoverflow.com/questions/47071256/how-to-update-upgrade-a-package-using-pip,860,python;pip,
Split Strings into words with multiple word boundary delimiters,https://stackoverflow.com/questions/1059559/split-strings-into-words-with-multiple-word-boundary-delimiters,859,python;string;split,
What is the purpose and use of **kwargs?,https://stackoverflow.com/questions/1769403/what-is-the-purpose-and-use-of-kwargs,859,python;keyword-argument,
How to make a datetime object aware (not naive)?,https://stackoverflow.com/questions/7065164/how-to-make-a-datetime-object-aware-not-naive,858,python;timezone;python-datetime;python-2.6;pytz,
How to convert index of a pandas dataframe into a column,https://stackoverflow.com/questions/20461165/how-to-convert-index-of-a-pandas-dataframe-into-a-column,858,python;pandas;dataframe;join;indexing,
Why are Python&#39;s &#39;private&#39; methods not actually private?,https://stackoverflow.com/questions/70528/why-are-pythons-private-methods-not-actually-private,855,python;encapsulation;information-hiding,
How to fix &quot;Attempted relative import in non-package&quot; even with __init__.py,https://stackoverflow.com/questions/11536764/how-to-fix-attempted-relative-import-in-non-package-even-with-init-py,853,python;package;python-import;importerror;init,
How to test multiple variables for equality against a single value?,https://stackoverflow.com/questions/15112125/how-to-test-multiple-variables-for-equality-against-a-single-value,851,python;if-statement;comparison;match;boolean-logic,
How to print instances of a class using print()?,https://stackoverflow.com/questions/1535327/how-to-print-instances-of-a-class-using-print,847,python;class;printing;object,
Convert int to binary string in Python,https://stackoverflow.com/questions/699866/convert-int-to-binary-string-in-python,846,python;binary;string.format,
How to find out the number of CPUs using python,https://stackoverflow.com/questions/1006289/how-to-find-out-the-number-of-cpus-using-python,846,python;system-information,
Which exception should I raise on bad/illegal argument combinations in Python?,https://stackoverflow.com/questions/256222/which-exception-should-i-raise-on-bad-illegal-argument-combinations-in-python,844,python;exception;arguments,
What is the Python equivalent of static variables inside a function?,https://stackoverflow.com/questions/279561/what-is-the-python-equivalent-of-static-variables-inside-a-function,842,python;static,
What is the best way to remove accents (normalize) in a Python unicode string?,https://stackoverflow.com/questions/517923/what-is-the-best-way-to-remove-accents-normalize-in-a-python-unicode-string,842,python;python-3.x;unicode;python-2.x;diacritics,
How do I call a parent class&#39;s method from a child class in Python?,https://stackoverflow.com/questions/805066/how-do-i-call-a-parent-classs-method-from-a-child-class-in-python,841,python;class;oop;object;inheritance,
How do you round UP a number?,https://stackoverflow.com/questions/2356501/how-do-you-round-up-a-number,840,python;floating-point;integer;rounding,
How can I read and process (parse) command line arguments?,https://stackoverflow.com/questions/1009860/how-can-i-read-and-process-parse-command-line-arguments,840,python;command-line;command-line-arguments,
How do I call a function from another .py file?,https://stackoverflow.com/questions/20309456/how-do-i-call-a-function-from-another-py-file,839,python;file;function;import,
How to combine multiple QuerySets in Django?,https://stackoverflow.com/questions/431628/how-to-combine-multiple-querysets-in-django,837,python;django;search;django-queryset;django-q,
How to serve static files in Flask,https://stackoverflow.com/questions/20646822/how-to-serve-static-files-in-flask,836,python;flask;static-files,
How do I get indices of N maximum values in a NumPy array?,https://stackoverflow.com/questions/6910641/how-do-i-get-indices-of-n-maximum-values-in-a-numpy-array,835,python;numpy;max;numpy-ndarray,
Collections.defaultdict difference with normal dict,https://stackoverflow.com/questions/5900578/collections-defaultdict-difference-with-normal-dict,835,python;dictionary;default-value;defaultdict,
How to state in requirements.txt a direct github source,https://stackoverflow.com/questions/16584552/how-to-state-in-requirements-txt-a-direct-github-source,834,python;github;pip;requirements.txt,
How can I pass a list as a command-line argument with argparse?,https://stackoverflow.com/questions/15753701/how-can-i-pass-a-list-as-a-command-line-argument-with-argparse,832,python;argparse,
How do I get the current time in milliseconds in Python?,https://stackoverflow.com/questions/5998245/how-do-i-get-the-current-time-in-milliseconds-in-python,832,python;datetime;time,
How to urlencode a querystring in Python?,https://stackoverflow.com/questions/5607551/how-to-urlencode-a-querystring-in-python,828,python;urllib;urlencode,
How to print a date in a regular format?,https://stackoverflow.com/questions/311627/how-to-print-a-date-in-a-regular-format,828,python;date;datetime;formatting,
How do I wait for a pressed key?,https://stackoverflow.com/questions/983354/how-do-i-wait-for-a-pressed-key,827,python;wait;keyboard-input,
Split string with multiple delimiters in Python,https://stackoverflow.com/questions/4998629/split-string-with-multiple-delimiters-in-python,824,python;string;split;delimiter,
Why shouldn&#39;t I use PyPy over CPython if PyPy is 6.3 times faster?,https://stackoverflow.com/questions/18946662/why-shouldnt-i-use-pypy-over-cpython-if-pypy-is-6-3-times-faster,824,python;performance;jit;pypy;cpython,
Convert all strings in a list to integers,https://stackoverflow.com/questions/7368789/convert-all-strings-in-a-list-to-integers,822,python;string;list;integer,
Where does pip install its packages?,https://stackoverflow.com/questions/29980798/where-does-pip-install-its-packages,821,python;pip;virtualenv,
Dump a NumPy array into a csv file,https://stackoverflow.com/questions/6081008/dump-a-numpy-array-into-a-csv-file,821,python;arrays;numpy;csv;file-io,
Filter dict to contain only certain keys?,https://stackoverflow.com/questions/3420122/filter-dict-to-contain-only-certain-keys,821,python;dictionary,
"Get statistics for each group (such as count, mean, etc) using pandas GroupBy?",https://stackoverflow.com/questions/19384532/get-statistics-for-each-group-such-as-count-mean-etc-using-pandas-groupby,818,python;pandas;dataframe;group-by;statistics,
Create list of single item repeated N times,https://stackoverflow.com/questions/3459098/create-list-of-single-item-repeated-n-times,818,python;list;list-comprehension;multiplication;replicate,
What do ** (double star/asterisk) and * (star/asterisk) mean in a function call?,https://stackoverflow.com/questions/2921847/what-do-double-star-asterisk-and-star-asterisk-mean-in-a-function-call,818,python;syntax;parameter-passing;iterable-unpacking;argument-unpacking,
How do I prepend to a short python list?,https://stackoverflow.com/questions/8537916/how-do-i-prepend-to-a-short-python-list,817,python;list;prepend,
How to change a string into uppercase?,https://stackoverflow.com/questions/9257094/how-to-change-a-string-into-uppercase,816,python;string;function;uppercase;string-conversion,
Append integer to beginning of list in Python,https://stackoverflow.com/questions/17911091/append-integer-to-beginning-of-list-in-python,811,python;list;prepend,
How do I protect Python code from being read by users?,https://stackoverflow.com/questions/261638/how-do-i-protect-python-code-from-being-read-by-users,810,python;licensing;obfuscation;copy-protection,
What is the purpose of the single underscore &quot;_&quot; variable in Python?,https://stackoverflow.com/questions/5893163/what-is-the-purpose-of-the-single-underscore-variable-in-python,810,python;variables;naming-conventions;metasyntactic-variable,
"IndentationError: unindent does not match any outer indentation level, although the indentation looks correct",https://stackoverflow.com/questions/492387/indentationerror-unindent-does-not-match-any-outer-indentation-level-although,809,python;indentation;python-2.x,
How can the Euclidean distance be calculated with NumPy?,https://stackoverflow.com/questions/1401712/how-can-the-euclidean-distance-be-calculated-with-numpy,808,python;numpy;euclidean-distance,
How do I do a case-insensitive string comparison?,https://stackoverflow.com/questions/319426/how-do-i-do-a-case-insensitive-string-comparison,808,python;comparison;case-insensitive,
How to represent an infinite number in Python?,https://stackoverflow.com/questions/7781260/how-to-represent-an-infinite-number-in-python,806,python;infinite;infinity,
Import a module from a relative path,https://stackoverflow.com/questions/279237/import-a-module-from-a-relative-path,805,python;relative-path;python-import,
Set value for particular cell in pandas DataFrame using index,https://stackoverflow.com/questions/13842088/set-value-for-particular-cell-in-pandas-dataframe-using-index,804,python;pandas;dataframe;cell;nan,
Using @property versus getters and setters,https://stackoverflow.com/questions/6618002/using-property-versus-getters-and-setters,804,python;properties;getter-setter,
Why is [] faster than list()?,https://stackoverflow.com/questions/30216000/why-is-faster-than-list,800,python;performance;list;instantiation;literals,
How can I fill out a Python string with spaces?,https://stackoverflow.com/questions/5676646/how-can-i-fill-out-a-python-string-with-spaces,798,python;string;string-formatting;padding,
How to calculate number of days between two given dates,https://stackoverflow.com/questions/151199/how-to-calculate-number-of-days-between-two-given-dates,798,python;date;datetime,
What is the difference between __init__ and __call__?,https://stackoverflow.com/questions/9663562/what-is-the-difference-between-init-and-call,797,python;class;oop;object;callable-object,
Return a default value if a dictionary key is not available,https://stackoverflow.com/questions/6130768/return-a-default-value-if-a-dictionary-key-is-not-available,797,python;dictionary;key;nonetype,
How do I get my program to sleep for 50 milliseconds?,https://stackoverflow.com/questions/377454/how-do-i-get-my-program-to-sleep-for-50-milliseconds,797,python;timer;sleep;milliseconds,
How can I force division to be floating point? Division keeps rounding down to 0?,https://stackoverflow.com/questions/1267869/how-can-i-force-division-to-be-floating-point-division-keeps-rounding-down-to-0,796,python;floating-point;integer;division;python-2.x,
Why does python use &#39;else&#39; after for and while loops?,https://stackoverflow.com/questions/9979970/why-does-python-use-else-after-for-and-while-loops,792,python;if-statement;for-loop;for-else,
How do I log a Python error with debug information?,https://stackoverflow.com/questions/5191830/how-do-i-log-a-python-error-with-debug-information,792,python;exception;logging;python-logging,
Is there a portable way to get the current username in Python?,https://stackoverflow.com/questions/842059/is-there-a-portable-way-to-get-the-current-username-in-python,792,python;portability,
Changing the tick frequency on the x or y axis,https://stackoverflow.com/questions/12608788/changing-the-tick-frequency-on-the-x-or-y-axis,790,python;matplotlib;frequency;xticks;yticks,
Does Python have an ordered set?,https://stackoverflow.com/questions/1653970/does-python-have-an-ordered-set,789,python;set,
Determine function name from within that function,https://stackoverflow.com/questions/5067604/determine-function-name-from-within-that-function,788,python;function;introspection,
Does Python have “private” variables in classes?,https://stackoverflow.com/questions/1641219/does-python-have-private-variables-in-classes,787,python;class;private,
Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX AVX2,https://stackoverflow.com/questions/47068709/your-cpu-supports-instructions-that-this-tensorflow-binary-was-not-compiled-to-u,782,python;tensorflow;cpu;avx,
What is the difference between dict.items() and dict.iteritems() in Python 2?,https://stackoverflow.com/questions/10458437/what-is-the-difference-between-dict-items-and-dict-iteritems-in-python-2,782,python;dictionary;python-2.x,
Import multiple CSV files into pandas and concatenate into one DataFrame,https://stackoverflow.com/questions/20906474/import-multiple-csv-files-into-pandas-and-concatenate-into-one-dataframe,780,python;pandas;csv;dataframe;concatenation,
Which Python memory profiler is recommended?,https://stackoverflow.com/questions/110259/which-python-memory-profiler-is-recommended,776,python;performance;memory-management;profiling,
What is the quickest way to HTTP GET in Python?,https://stackoverflow.com/questions/645312/what-is-the-quickest-way-to-http-get-in-python,773,python;http;network-programming,
Are dictionaries ordered in Python 3.6+?,https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6,773,python;dictionary;python-3.6;python-internals,
Correct way to try/except using Python requests module?,https://stackoverflow.com/questions/16511337/correct-way-to-try-except-using-python-requests-module,770,python;exception;python-requests;request,
What is a &quot;slug&quot; in Django?,https://stackoverflow.com/questions/427102/what-is-a-slug-in-django,770,python;django;url;django-models;slug,
"When to use cla(), clf() or close() for clearing a plot",https://stackoverflow.com/questions/8213522/when-to-use-cla-clf-or-close-for-clearing-a-plot,770,python;matplotlib;plot,
How do I access command line arguments?,https://stackoverflow.com/questions/4033723/how-do-i-access-command-line-arguments,769,python;command-line;command-line-arguments,
How do I append one string to another in Python?,https://stackoverflow.com/questions/4435169/how-do-i-append-one-string-to-another-in-python,767,python;string;append,
Decorators with parameters?,https://stackoverflow.com/questions/5929107/decorators-with-parameters,766,python;function;parameters;arguments;decorator,
How can I break out of multiple loops?,https://stackoverflow.com/questions/189645/how-can-i-break-out-of-multiple-loops,764,python;nested-loops;break;control-flow,
Asking the user for input until they give a valid response,https://stackoverflow.com/questions/23294658/asking-the-user-for-input-until-they-give-a-valid-response,764,python;validation;input,
What does &#39;super&#39; do in Python? - difference between super().__init__() and explicit superclass __init__(),https://stackoverflow.com/questions/222877/what-does-super-do-in-python-difference-between-super-init-and-expl,764,python;oop;inheritance;multiple-inheritance;super,
Is arr.__len__() the preferred way to get the length of an array in Python?,https://stackoverflow.com/questions/518021/is-arr-len-the-preferred-way-to-get-the-length-of-an-array-in-python,761,python;arrays;methods,
"How do I convert seconds to hours, minutes and seconds?",https://stackoverflow.com/questions/775049/how-do-i-convert-seconds-to-hours-minutes-and-seconds,760,python;datetime,
How to rename a file using Python,https://stackoverflow.com/questions/2491222/how-to-rename-a-file-using-python,757,python;file-rename,
"How can I check if a string represents an int, without using try/except?",https://stackoverflow.com/questions/1265665/how-can-i-check-if-a-string-represents-an-int-without-using-try-except,753,python;string;integer,
How can I get a value from a cell of a dataframe?,https://stackoverflow.com/questions/16729574/how-can-i-get-a-value-from-a-cell-of-a-dataframe,751,python;pandas;dataframe;indexing;filter,
CSV file written with Python has blank lines between each row,https://stackoverflow.com/questions/3348460/csv-file-written-with-python-has-blank-lines-between-each-row,751,python;windows;csv,
"Difference between map, applymap and apply methods in Pandas",https://stackoverflow.com/questions/19798153/difference-between-map-applymap-and-apply-methods-in-pandas,751,python;pandas;dataframe;vectorization,
Finding local IP addresses using Python&#39;s stdlib,https://stackoverflow.com/questions/166506/finding-local-ip-addresses-using-pythons-stdlib,749,python;network-programming;ip-address,
How to check if any value is NaN in a Pandas DataFrame,https://stackoverflow.com/questions/29530232/how-to-check-if-any-value-is-nan-in-a-pandas-dataframe,749,python;pandas;dataframe;nan,
Dealing with multiple Python versions and PIP,https://stackoverflow.com/questions/2812520/dealing-with-multiple-python-versions-and-pip,749,python;pip,
Making Python loggers output all messages to stdout in addition to log file,https://stackoverflow.com/questions/14058453/making-python-loggers-output-all-messages-to-stdout-in-addition-to-log-file,748,python;logging;error-logging;python-logging,
"In practice, what are the main uses for the &quot;yield from&quot; syntax in Python 3.3?",https://stackoverflow.com/questions/9708902/in-practice-what-are-the-main-uses-for-the-yield-from-syntax-in-python-3-3,748,python;yield,
Sort a list by multiple attributes?,https://stackoverflow.com/questions/4233476/sort-a-list-by-multiple-attributes,747,python;sorting,
Speed comparison with Project Euler: C vs Python vs Erlang vs Haskell,https://stackoverflow.com/questions/6964392/speed-comparison-with-project-euler-c-vs-python-vs-erlang-vs-haskell,744,python;c;performance;haskell;erlang,
"What is the maximum recursion depth, and how to increase it?",https://stackoverflow.com/questions/3323001/what-is-the-maximum-recursion-depth-and-how-to-increase-it,744,python;recursion;limit;stack-overflow;sys,
How to install psycopg2 with &quot;pip&quot; on Python?,https://stackoverflow.com/questions/5420789/how-to-install-psycopg2-with-pip-on-python,741,python;virtualenv;psycopg2;pip,
How to set the current working directory?,https://stackoverflow.com/questions/1810743/how-to-set-the-current-working-directory,739,python;working-directory,
How to check if a dictionary is empty?,https://stackoverflow.com/questions/23177439/how-to-check-if-a-dictionary-is-empty,734,python;dictionary,
Finding the average of a list,https://stackoverflow.com/questions/9039961/finding-the-average-of-a-list,733,python;list;average;mean;reduce,
Getting the index of the returned max or min item using max()/min() on a list,https://stackoverflow.com/questions/2474015/getting-the-index-of-the-returned-max-or-min-item-using-max-min-on-a-list,733,python;list;max;min;argmax,
How can I use pickle to save a dict (or any other Python object)?,https://stackoverflow.com/questions/11218477/how-can-i-use-pickle-to-save-a-dict-or-any-other-python-object,732,python;dictionary;pickle,
How do I find the duplicates in a list and create another list with them?,https://stackoverflow.com/questions/9835762/how-do-i-find-the-duplicates-in-a-list-and-create-another-list-with-them,731,python;list;duplicates,
Is there a simple way to remove multiple spaces in a string?,https://stackoverflow.com/questions/1546226/is-there-a-simple-way-to-remove-multiple-spaces-in-a-string,730,python;regex;string,
Configure Flask dev server to be visible across the network,https://stackoverflow.com/questions/7023052/configure-flask-dev-server-to-be-visible-across-the-network,729,python;flask;werkzeug,
How to extract numbers from a string in Python?,https://stackoverflow.com/questions/4289331/how-to-extract-numbers-from-a-string-in-python,728,python;string;numbers,
How do I capture SIGINT in Python?,https://stackoverflow.com/questions/1112343/how-do-i-capture-sigint-in-python,728,python;signals,
Remove specific characters from a string in Python,https://stackoverflow.com/questions/3939361/remove-specific-characters-from-a-string-in-python,727,python;string;replace;immutability,
How to check Django version,https://stackoverflow.com/questions/6468397/how-to-check-django-version,725,python;django;command-line;command;version,
How would you make a comma-separated string from a list of strings?,https://stackoverflow.com/questions/44778/how-would-you-make-a-comma-separated-string-from-a-list-of-strings,724,python;string;list,
How can I import a module dynamically given its name as string?,https://stackoverflow.com/questions/301134/how-can-i-import-a-module-dynamically-given-its-name-as-string,724,python;python-import,
Python &quot;extend&quot; for a dictionary,https://stackoverflow.com/questions/577234/python-extend-for-a-dictionary,723,python;dictionary,
No module named pkg_resources,https://stackoverflow.com/questions/7446187/no-module-named-pkg-resources,723,python;django;virtualenv;setuptools;pip,
